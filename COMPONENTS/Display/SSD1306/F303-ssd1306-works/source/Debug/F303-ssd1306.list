
F303-ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b74  08004b74  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004b74  08004b74  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b74  08004b74  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000504  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4b3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f33  00000000  00000000  0002d4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac80  00000000  00000000  0002fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed77  00000000  00000000  0004aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad89  00000000  00000000  00059827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f45b0  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000910  00000000  00000000  000f4600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002754  00000000  00000000  000f4f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003da0 	.word	0x08003da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003da0 	.word	0x08003da0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001de:	f107 030c 	add.w	r3, r7, #12
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001ee:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <MX_GPIO_Init+0x8c>)
 80001f0:	695b      	ldr	r3, [r3, #20]
 80001f2:	4a1c      	ldr	r2, [pc, #112]	; (8000264 <MX_GPIO_Init+0x8c>)
 80001f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f8:	6153      	str	r3, [r2, #20]
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <MX_GPIO_Init+0x8c>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000202:	60bb      	str	r3, [r7, #8]
 8000204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <MX_GPIO_Init+0x8c>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <MX_GPIO_Init+0x8c>)
 800020c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000210:	6153      	str	r3, [r2, #20]
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <MX_GPIO_Init+0x8c>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_GPIO_Init+0x8c>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a10      	ldr	r2, [pc, #64]	; (8000264 <MX_GPIO_Init+0x8c>)
 8000224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000228:	6153      	str	r3, [r2, #20]
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_GPIO_Init+0x8c>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000232:	603b      	str	r3, [r7, #0]
 8000234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2108      	movs	r1, #8
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <MX_GPIO_Init+0x90>)
 800023c:	f001 f81a 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000240:	2308      	movs	r3, #8
 8000242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2300      	movs	r3, #0
 800024e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000250:	f107 030c 	add.w	r3, r7, #12
 8000254:	4619      	mov	r1, r3
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_GPIO_Init+0x90>)
 8000258:	f000 fe9a 	bl	8000f90 <HAL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40021000 	.word	0x40021000
 8000268:	48000400 	.word	0x48000400

0800026c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000272:	4a1c      	ldr	r2, [pc, #112]	; (80002e4 <MX_I2C1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000278:	4a1b      	ldr	r2, [pc, #108]	; (80002e8 <MX_I2C1_Init+0x7c>)
 800027a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_I2C1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000284:	2201      	movs	r2, #1
 8000286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_I2C1_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_I2C1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_I2C1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a6:	480e      	ldr	r0, [pc, #56]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002a8:	f000 fffc 	bl	80012a4 <HAL_I2C_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002b2:	f000 f94f 	bl	8000554 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002b6:	2100      	movs	r1, #0
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002ba:	f001 fcef 	bl	8001c9c <HAL_I2CEx_ConfigAnalogFilter>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002c4:	f000 f946 	bl	8000554 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002c8:	2100      	movs	r1, #0
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_I2C1_Init+0x74>)
 80002cc:	f001 fd31 	bl	8001d32 <HAL_I2CEx_ConfigDigitalFilter>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f93d 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000030 	.word	0x20000030
 80002e4:	40005400 	.word	0x40005400
 80002e8:	2000090e 	.word	0x2000090e

080002ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <HAL_I2C_MspInit+0x7c>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d127      	bne.n	800035e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <HAL_I2C_MspInit+0x80>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a16      	ldr	r2, [pc, #88]	; (800036c <HAL_I2C_MspInit+0x80>)
 8000314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <HAL_I2C_MspInit+0x80>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000326:	23c0      	movs	r3, #192	; 0xc0
 8000328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032a:	2312      	movs	r3, #18
 800032c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000336:	2304      	movs	r3, #4
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4619      	mov	r1, r3
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <HAL_I2C_MspInit+0x84>)
 8000342:	f000 fe25 	bl	8000f90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <HAL_I2C_MspInit+0x80>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <HAL_I2C_MspInit+0x80>)
 800034c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000350:	61d3      	str	r3, [r2, #28]
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_I2C_MspInit+0x80>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800035e:	bf00      	nop
 8000360:	3728      	adds	r7, #40	; 0x28
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40005400 	.word	0x40005400
 800036c:	40021000 	.word	0x40021000
 8000370:	48000400 	.word	0x48000400

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037a:	f000 fc99 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037e:	f000 f897 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000382:	f7ff ff29 	bl	80001d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000386:	f000 fbf5 	bl	8000b74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800038a:	f7ff ff6f 	bl	800026c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Init lcd using one of the stm32HAL i2c typedefs
   if (ssd1306_Init(&hi2c1) != 0) {
 800038e:	4840      	ldr	r0, [pc, #256]	; (8000490 <main+0x11c>)
 8000390:	f000 f8fc 	bl	800058c <ssd1306_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <main+0x2a>
     Error_Handler();
 800039a:	f000 f8db 	bl	8000554 <Error_Handler>
   }
   HAL_Delay(1000);
 800039e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a2:	f000 fceb 	bl	8000d7c <HAL_Delay>

   ssd1306_Fill(Black);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fa10 	bl	80007cc <ssd1306_Fill>
   ssd1306_UpdateScreen(&hi2c1);
 80003ac:	4838      	ldr	r0, [pc, #224]	; (8000490 <main+0x11c>)
 80003ae:	f000 fa31 	bl	8000814 <ssd1306_UpdateScreen>

   HAL_Delay(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f000 fce1 	bl	8000d7c <HAL_Delay>

   // Write data to local screenbuffer
   ssd1306_SetCursor(0, 0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fb61 	bl	8000a84 <ssd1306_SetCursor>
   ssd1306_WriteString("ssd1306", Font_11x18, White);
 80003c2:	4a34      	ldr	r2, [pc, #208]	; (8000494 <main+0x120>)
 80003c4:	2301      	movs	r3, #1
 80003c6:	ca06      	ldmia	r2, {r1, r2}
 80003c8:	4833      	ldr	r0, [pc, #204]	; (8000498 <main+0x124>)
 80003ca:	f000 fb35 	bl	8000a38 <ssd1306_WriteString>

   ssd1306_SetCursor(0, 36);
 80003ce:	2124      	movs	r1, #36	; 0x24
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 fb57 	bl	8000a84 <ssd1306_SetCursor>
   ssd1306_WriteString("embeetle", Font_11x18, White);
 80003d6:	4a2f      	ldr	r2, [pc, #188]	; (8000494 <main+0x120>)
 80003d8:	2301      	movs	r3, #1
 80003da:	ca06      	ldmia	r2, {r1, r2}
 80003dc:	482f      	ldr	r0, [pc, #188]	; (800049c <main+0x128>)
 80003de:	f000 fb2b 	bl	8000a38 <ssd1306_WriteString>

   // Draw rectangle on screen
   for (uint8_t i=0; i<28; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	73fb      	strb	r3, [r7, #15]
 80003e6:	e013      	b.n	8000410 <main+0x9c>
       for (uint8_t j=0; j<64; j++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	73bb      	strb	r3, [r7, #14]
 80003ec:	e00a      	b.n	8000404 <main+0x90>
           ssd1306_DrawPixel(100+i, 0+j, White);
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	3364      	adds	r3, #100	; 0x64
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	7bb9      	ldrb	r1, [r7, #14]
 80003f6:	2201      	movs	r2, #1
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fa3d 	bl	8000878 <ssd1306_DrawPixel>
       for (uint8_t j=0; j<64; j++) {
 80003fe:	7bbb      	ldrb	r3, [r7, #14]
 8000400:	3301      	adds	r3, #1
 8000402:	73bb      	strb	r3, [r7, #14]
 8000404:	7bbb      	ldrb	r3, [r7, #14]
 8000406:	2b3f      	cmp	r3, #63	; 0x3f
 8000408:	d9f1      	bls.n	80003ee <main+0x7a>
   for (uint8_t i=0; i<28; i++) {
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	3301      	adds	r3, #1
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b1b      	cmp	r3, #27
 8000414:	d9e8      	bls.n	80003e8 <main+0x74>
       }
   }

   // Copy all data from local screenbuffer to the screen
   ssd1306_UpdateScreen(&hi2c1);
 8000416:	481e      	ldr	r0, [pc, #120]	; (8000490 <main+0x11c>)
 8000418:	f000 f9fc 	bl	8000814 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR, buf, 1, HAL_MAX_DELAY);
 800041c:	2378      	movs	r3, #120	; 0x78
 800041e:	b299      	uxth	r1, r3
 8000420:	463a      	mov	r2, r7
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2301      	movs	r3, #1
 800042a:	4819      	ldr	r0, [pc, #100]	; (8000490 <main+0x11c>)
 800042c:	f000 ffca 	bl	80013c4 <HAL_I2C_Master_Transmit>
 8000430:	4603      	mov	r3, r0
 8000432:	737b      	strb	r3, [r7, #13]
	  if(ret != HAL_OK){
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d005      	beq.n	8000446 <main+0xd2>
		  strcpy((char*)buf, "Error!\r\n");
 800043a:	463b      	mov	r3, r7
 800043c:	4a18      	ldr	r2, [pc, #96]	; (80004a0 <main+0x12c>)
 800043e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000440:	c303      	stmia	r3!, {r0, r1}
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e006      	b.n	8000454 <main+0xe0>
	  }
	  else
	  {
		  strcpy((char*)buf, "OK!\r\n");
 8000446:	463b      	mov	r3, r7
 8000448:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <main+0x130>)
 800044a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800044e:	6018      	str	r0, [r3, #0]
 8000450:	3304      	adds	r3, #4
 8000452:	8019      	strh	r1, [r3, #0]
	  }

	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000454:	463b      	mov	r3, r7
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff feb6 	bl	80001c8 <strlen>
 800045c:	4603      	mov	r3, r0
 800045e:	b29a      	uxth	r2, r3
 8000460:	4639      	mov	r1, r7
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	4810      	ldr	r0, [pc, #64]	; (80004a8 <main+0x134>)
 8000468:	f003 f898 	bl	800359c <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin , 1);    // LD3 on
 800046c:	2201      	movs	r2, #1
 800046e:	2108      	movs	r1, #8
 8000470:	480e      	ldr	r0, [pc, #56]	; (80004ac <main+0x138>)
 8000472:	f000 feff 	bl	8001274 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8000476:	2064      	movs	r0, #100	; 0x64
 8000478:	f000 fc80 	bl	8000d7c <HAL_Delay>
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin , 0);    // LD3 off
 800047c:	2200      	movs	r2, #0
 800047e:	2108      	movs	r1, #8
 8000480:	480a      	ldr	r0, [pc, #40]	; (80004ac <main+0x138>)
 8000482:	f000 fef7 	bl	8001274 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f000 fc78 	bl	8000d7c <HAL_Delay>
	  ret = HAL_I2C_Master_Transmit(&hi2c1, ADDR, buf, 1, HAL_MAX_DELAY);
 800048c:	e7c6      	b.n	800041c <main+0xa8>
 800048e:	bf00      	nop
 8000490:	20000030 	.word	0x20000030
 8000494:	20000000 	.word	0x20000000
 8000498:	08003db8 	.word	0x08003db8
 800049c:	08003dc0 	.word	0x08003dc0
 80004a0:	08003dcc 	.word	0x08003dcc
 80004a4:	08003dd8 	.word	0x08003dd8
 80004a8:	2000048c 	.word	0x2000048c
 80004ac:	48000400 	.word	0x48000400

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ba:	2228      	movs	r2, #40	; 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 fc66 	bl	8003d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e4:	2302      	movs	r3, #2
 80004e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	2301      	movs	r3, #1
 80004ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2310      	movs	r3, #16
 80004ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 fc67 	bl	8001dcc <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000504:	f000 f826 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	230f      	movs	r3, #15
 800050a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fc90 	bl	8002e48 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800052e:	f000 f811 	bl	8000554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000532:	2320      	movs	r3, #32
 8000534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4618      	mov	r0, r3
 800053e:	f002 feb9 	bl	80032b4 <HAL_RCCEx_PeriphCLKConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000548:	f000 f804 	bl	8000554 <Error_Handler>
  }
}
 800054c:	bf00      	nop
 800054e:	3758      	adds	r7, #88	; 0x58
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	e7fe      	b.n	800055c <Error_Handler+0x8>

0800055e <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af04      	add	r7, sp, #16
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800056a:	230a      	movs	r3, #10
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	1cfb      	adds	r3, r7, #3
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	2200      	movs	r2, #0
 800057a:	2178      	movs	r1, #120	; 0x78
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f001 f815 	bl	80015ac <HAL_I2C_Mem_Write>
 8000582:	4603      	mov	r3, r0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 fbf1 	bl	8000d7c <HAL_Delay>
    int status = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800059e:	21ae      	movs	r1, #174	; 0xae
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffdc 	bl	800055e <ssd1306_WriteCommand>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80005b0:	2120      	movs	r1, #32
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f7ff ffd3 	bl	800055e <ssd1306_WriteCommand>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005c2:	2110      	movs	r1, #16
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffca 	bl	800055e <ssd1306_WriteCommand>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80005d4:	21b0      	movs	r1, #176	; 0xb0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffc1 	bl	800055e <ssd1306_WriteCommand>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80005e6:	21c8      	movs	r1, #200	; 0xc8
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffb8 	bl	800055e <ssd1306_WriteCommand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80005f8:	2100      	movs	r1, #0
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ffaf 	bl	800055e <ssd1306_WriteCommand>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800060a:	2110      	movs	r1, #16
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ffa6 	bl	800055e <ssd1306_WriteCommand>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff9d 	bl	800055e <ssd1306_WriteCommand>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800062e:	2181      	movs	r1, #129	; 0x81
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff94 	bl	800055e <ssd1306_WriteCommand>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4413      	add	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000640:	21ff      	movs	r1, #255	; 0xff
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff8b 	bl	800055e <ssd1306_WriteCommand>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000652:	21a1      	movs	r1, #161	; 0xa1
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff82 	bl	800055e <ssd1306_WriteCommand>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000664:	21a6      	movs	r1, #166	; 0xa6
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff79 	bl	800055e <ssd1306_WriteCommand>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000676:	21a8      	movs	r1, #168	; 0xa8
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff70 	bl	800055e <ssd1306_WriteCommand>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000688:	213f      	movs	r1, #63	; 0x3f
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff67 	bl	800055e <ssd1306_WriteCommand>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800069a:	21a4      	movs	r1, #164	; 0xa4
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff5e 	bl	800055e <ssd1306_WriteCommand>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80006ac:	21d3      	movs	r1, #211	; 0xd3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff55 	bl	800055e <ssd1306_WriteCommand>
 80006b4:	4603      	mov	r3, r0
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80006be:	2100      	movs	r1, #0
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff4c 	bl	800055e <ssd1306_WriteCommand>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80006d0:	21d5      	movs	r1, #213	; 0xd5
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff43 	bl	800055e <ssd1306_WriteCommand>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80006e2:	21f0      	movs	r1, #240	; 0xf0
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff3a 	bl	800055e <ssd1306_WriteCommand>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80006f4:	21d9      	movs	r1, #217	; 0xd9
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff31 	bl	800055e <ssd1306_WriteCommand>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000706:	2122      	movs	r1, #34	; 0x22
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff28 	bl	800055e <ssd1306_WriteCommand>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000718:	21da      	movs	r1, #218	; 0xda
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff1f 	bl	800055e <ssd1306_WriteCommand>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4413      	add	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 800072a:	2112      	movs	r1, #18
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff16 	bl	800055e <ssd1306_WriteCommand>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 800073c:	21db      	movs	r1, #219	; 0xdb
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff0d 	bl	800055e <ssd1306_WriteCommand>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800074e:	2120      	movs	r1, #32
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff04 	bl	800055e <ssd1306_WriteCommand>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000760:	218d      	movs	r1, #141	; 0x8d
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fefb 	bl	800055e <ssd1306_WriteCommand>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000772:	2114      	movs	r1, #20
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fef2 	bl	800055e <ssd1306_WriteCommand>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000784:	21af      	movs	r1, #175	; 0xaf
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fee9 	bl	800055e <ssd1306_WriteCommand>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <ssd1306_Init+0x214>
        return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e00f      	b.n	80007c0 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f813 	bl	80007cc <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f834 	bl	8000814 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <ssd1306_Init+0x23c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <ssd1306_Init+0x23c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <ssd1306_Init+0x23c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	715a      	strb	r2, [r3, #5]

    return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000484 	.word	0x20000484

080007cc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e00d      	b.n	80007f8 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <ssd1306_Fill+0x1a>
 80007e2:	2100      	movs	r1, #0
 80007e4:	e000      	b.n	80007e8 <ssd1306_Fill+0x1c>
 80007e6:	21ff      	movs	r1, #255	; 0xff
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <ssd1306_Fill+0x44>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	460a      	mov	r2, r1
 80007f0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007fe:	d3ed      	bcc.n	80007dc <ssd1306_Fill+0x10>
    }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000084 	.word	0x20000084

08000814 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af04      	add	r7, sp, #16
 800081a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e020      	b.n	8000864 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3b50      	subs	r3, #80	; 0x50
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fe97 	bl	800055e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000830:	2100      	movs	r1, #0
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fe93 	bl	800055e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000838:	2110      	movs	r1, #16
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe8f 	bl	800055e <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	01db      	lsls	r3, r3, #7
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <ssd1306_UpdateScreen+0x60>)
 8000846:	4413      	add	r3, r2
 8000848:	2264      	movs	r2, #100	; 0x64
 800084a:	9202      	str	r2, [sp, #8]
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	2240      	movs	r2, #64	; 0x40
 8000856:	2178      	movs	r1, #120	; 0x78
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 fea7 	bl	80015ac <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3301      	adds	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b07      	cmp	r3, #7
 8000868:	d9db      	bls.n	8000822 <ssd1306_UpdateScreen+0xe>
    }
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000084 	.word	0x20000084

08000878 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	71bb      	strb	r3, [r7, #6]
 8000886:	4613      	mov	r3, r2
 8000888:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db48      	blt.n	8000924 <ssd1306_DrawPixel+0xac>
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2b3f      	cmp	r3, #63	; 0x3f
 8000896:	d845      	bhi.n	8000924 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <ssd1306_DrawPixel+0xb8>)
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80008a0:	797b      	ldrb	r3, [r7, #5]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80008ae:	797b      	ldrb	r3, [r7, #5]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d11a      	bne.n	80008ea <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	08db      	lsrs	r3, r3, #3
 80008ba:	b2d8      	uxtb	r0, r3
 80008bc:	4603      	mov	r3, r0
 80008be:	01db      	lsls	r3, r3, #7
 80008c0:	4413      	add	r3, r2
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <ssd1306_DrawPixel+0xbc>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b259      	sxtb	r1, r3
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	4603      	mov	r3, r0
 80008de:	01db      	lsls	r3, r3, #7
 80008e0:	4413      	add	r3, r2
 80008e2:	b2c9      	uxtb	r1, r1
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <ssd1306_DrawPixel+0xbc>)
 80008e6:	54d1      	strb	r1, [r2, r3]
 80008e8:	e01d      	b.n	8000926 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	4603      	mov	r3, r0
 80008f4:	01db      	lsls	r3, r3, #7
 80008f6:	4413      	add	r3, r2
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <ssd1306_DrawPixel+0xbc>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	2101      	movs	r1, #1
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	b25b      	sxtb	r3, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4013      	ands	r3, r2
 8000912:	b259      	sxtb	r1, r3
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	4603      	mov	r3, r0
 8000918:	01db      	lsls	r3, r3, #7
 800091a:	4413      	add	r3, r2
 800091c:	b2c9      	uxtb	r1, r1
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <ssd1306_DrawPixel+0xbc>)
 8000920:	54d1      	strb	r1, [r2, r3]
 8000922:	e000      	b.n	8000926 <ssd1306_DrawPixel+0xae>
        return;
 8000924:	bf00      	nop
    }
}
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	20000484 	.word	0x20000484
 8000934:	20000084 	.word	0x20000084

08000938 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4604      	mov	r4, r0
 8000940:	1d38      	adds	r0, r7, #4
 8000942:	e880 0006 	stmia.w	r0, {r1, r2}
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000950:	4b38      	ldr	r3, [pc, #224]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	793b      	ldrb	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	2b7f      	cmp	r3, #127	; 0x7f
 800095c:	dc06      	bgt.n	800096c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800095e:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 8000960:	885b      	ldrh	r3, [r3, #2]
 8000962:	461a      	mov	r2, r3
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000968:	2b3f      	cmp	r3, #63	; 0x3f
 800096a:	dd01      	ble.n	8000970 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800096c:	2300      	movs	r3, #0
 800096e:	e05d      	b.n	8000a2c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	e04c      	b.n	8000a10 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	3b20      	subs	r3, #32
 800097c:	7979      	ldrb	r1, [r7, #5]
 800097e:	fb01 f303 	mul.w	r3, r1, r3
 8000982:	4619      	mov	r1, r3
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	440b      	add	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	e034      	b.n	8000a00 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d012      	beq.n	80009cc <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	b2d8      	uxtb	r0, r3
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	7bba      	ldrb	r2, [r7, #14]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f7ff ff57 	bl	8000878 <ssd1306_DrawPixel>
 80009ca:	e016      	b.n	80009fa <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4413      	add	r3, r2
 80009d8:	b2d8      	uxtb	r0, r3
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 80009dc:	885b      	ldrh	r3, [r3, #2]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf0c      	ite	eq
 80009ee:	2301      	moveq	r3, #1
 80009f0:	2300      	movne	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	f7ff ff3f 	bl	8000878 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	793b      	ldrb	r3, [r7, #4]
 8000a02:	461a      	mov	r2, r3
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d3c5      	bcc.n	8000996 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	461a      	mov	r2, r3
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d3ad      	bcc.n	8000976 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 8000a1c:	881a      	ldrh	r2, [r3, #0]
 8000a1e:	793b      	ldrb	r3, [r7, #4]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <ssd1306_WriteChar+0xfc>)
 8000a28:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3724      	adds	r7, #36	; 0x24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	20000484 	.word	0x20000484

08000a38 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	1d38      	adds	r0, r7, #4
 8000a42:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a46:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000a48:	e012      	b.n	8000a70 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	7818      	ldrb	r0, [r3, #0]
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	1d3a      	adds	r2, r7, #4
 8000a52:	ca06      	ldmia	r2, {r1, r2}
 8000a54:	f7ff ff70 	bl	8000938 <ssd1306_WriteChar>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d002      	beq.n	8000a6a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	e008      	b.n	8000a7c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e8      	bne.n	8000a4a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <ssd1306_SetCursor+0x2c>)
 8000a9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <ssd1306_SetCursor+0x2c>)
 8000aa2:	805a      	strh	r2, [r3, #2]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000484 	.word	0x20000484

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x44>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f8f8 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <MX_USART2_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b80:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb8:	f002 fca2 	bl	8003500 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f7ff fcc7 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000048c 	.word	0x2000048c
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_UART_MspInit+0x80>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d129      	bne.n	8000c4a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c26:	f248 0304 	movw	r3, #32772	; 0x8004
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f000 f9a3 	bl	8000f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40021000 	.word	0x40021000

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ff76 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 f85d 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fb71 	bl	8000374 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c94:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca0:	08004b7c 	.word	0x08004b7c
  ldr r2, =_sbss
 8000ca4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ca8:	20000518 	.word	0x20000518

08000cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_2_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f931 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fef2 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f911 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000010 	.word	0x20000010
 8000d38:	2000000c 	.word	0x2000000c

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000514 	.word	0x20000514

08000d64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000514 	.word	0x20000514

08000d7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000010 	.word	0x20000010

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff47 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff5c 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffb0 	bl	8000ee4 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e14e      	b.n	800123e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8140 	beq.w	8001238 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d005      	beq.n	8000fd0 <HAL_GPIO_Init+0x40>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d130      	bne.n	8001032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001006:	2201      	movs	r2, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 0201 	and.w	r2, r3, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d123      	bne.n	80010c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691a      	ldr	r2, [r3, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0203 	and.w	r2, r3, #3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 809a 	beq.w	8001238 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a54      	ldr	r2, [pc, #336]	; (800125c <HAL_GPIO_Init+0x2cc>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b52      	ldr	r3, [pc, #328]	; (800125c <HAL_GPIO_Init+0x2cc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111c:	4a50      	ldr	r2, [pc, #320]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1e0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a46      	ldr	r2, [pc, #280]	; (8001264 <HAL_GPIO_Init+0x2d4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1dc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a45      	ldr	r2, [pc, #276]	; (8001268 <HAL_GPIO_Init+0x2d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1d8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a44      	ldr	r2, [pc, #272]	; (800126c <HAL_GPIO_Init+0x2dc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1d4>
 8001160:	2303      	movs	r3, #3
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 8001164:	2305      	movs	r3, #5
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1e2>
 8001170:	2300      	movs	r3, #0
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001182:	4937      	ldr	r1, [pc, #220]	; (8001260 <HAL_GPIO_Init+0x2d0>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x2e0>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fa22 f303 	lsr.w	r3, r2, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f47f aea9 	bne.w	8000fa0 <HAL_GPIO_Init+0x10>
  }
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000
 8001264:	48000400 	.word	0x48000400
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001290:	e002      	b.n	8001298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e081      	b.n	80013ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f80e 	bl	80002ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001304:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e006      	b.n	800132c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800132a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d104      	bne.n	800133e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69d9      	ldr	r1, [r3, #28]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	461a      	mov	r2, r3
 80013d0:	460b      	mov	r3, r1
 80013d2:	817b      	strh	r3, [r7, #10]
 80013d4:	4613      	mov	r3, r2
 80013d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	f040 80da 	bne.w	800159a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_I2C_Master_Transmit+0x30>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e0d3      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013fc:	f7ff fcb2 	bl	8000d64 <HAL_GetTick>
 8001400:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2319      	movs	r3, #25
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fa58 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0be      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2221      	movs	r2, #33	; 0x21
 8001422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2210      	movs	r2, #16
 800142a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	893a      	ldrh	r2, [r7, #8]
 800143e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144a:	b29b      	uxth	r3, r3
 800144c:	2bff      	cmp	r3, #255	; 0xff
 800144e:	d90e      	bls.n	800146e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	8979      	ldrh	r1, [r7, #10]
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 fbe6 	bl	8001c38 <I2C_TransferConfig>
 800146c:	e06c      	b.n	8001548 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	b2da      	uxtb	r2, r3
 800147e:	8979      	ldrh	r1, [r7, #10]
 8001480:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 fbd5 	bl	8001c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800148e:	e05b      	b.n	8001548 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	6a39      	ldr	r1, [r7, #32]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fa64 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e07b      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d034      	beq.n	8001548 <HAL_I2C_Master_Transmit+0x184>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d130      	bne.n	8001548 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2200      	movs	r2, #0
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f9e7 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e04d      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	2bff      	cmp	r3, #255	; 0xff
 8001508:	d90e      	bls.n	8001528 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	b2da      	uxtb	r2, r3
 8001516:	8979      	ldrh	r1, [r7, #10]
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fb89 	bl	8001c38 <I2C_TransferConfig>
 8001526:	e00f      	b.n	8001548 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	b2da      	uxtb	r2, r3
 8001538:	8979      	ldrh	r1, [r7, #10]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 fb78 	bl	8001c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d19e      	bne.n	8001490 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	6a39      	ldr	r1, [r7, #32]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 fa4a 	bl	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e01a      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2220      	movs	r2, #32
 800156c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_I2C_Master_Transmit+0x1e4>)
 800157a:	400b      	ands	r3, r1
 800157c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800159a:	2302      	movs	r3, #2
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	80002000 	.word	0x80002000
 80015a8:	fe00e800 	.word	0xfe00e800

080015ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	817b      	strh	r3, [r7, #10]
 80015be:	460b      	mov	r3, r1
 80015c0:	813b      	strh	r3, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	f040 80f9 	bne.w	80017c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_I2C_Mem_Write+0x34>
 80015da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0ed      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Mem_Write+0x4e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e0e6      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001602:	f7ff fbaf 	bl	8000d64 <HAL_GetTick>
 8001606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2319      	movs	r3, #25
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f955 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0d1      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2221      	movs	r2, #33	; 0x21
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800164c:	88f8      	ldrh	r0, [r7, #6]
 800164e:	893a      	ldrh	r2, [r7, #8]
 8001650:	8979      	ldrh	r1, [r7, #10]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4603      	mov	r3, r0
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f8b9 	bl	80017d4 <I2C_RequestMemoryWrite>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0a9      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d90e      	bls.n	800169c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	22ff      	movs	r2, #255	; 0xff
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 facf 	bl	8001c38 <I2C_TransferConfig>
 800169a:	e00f      	b.n	80016bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fabe 	bl	8001c38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f94e 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e07b      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d034      	beq.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d130      	bne.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	2200      	movs	r2, #0
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f8d1 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e04d      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d90e      	bls.n	8001754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	22ff      	movs	r2, #255	; 0xff
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	b2da      	uxtb	r2, r3
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fa73 	bl	8001c38 <I2C_TransferConfig>
 8001752:	e00f      	b.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	b2da      	uxtb	r2, r3
 8001764:	8979      	ldrh	r1, [r7, #10]
 8001766:	2300      	movs	r3, #0
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fa62 	bl	8001c38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d19e      	bne.n	80016bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f934 	bl	80019f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e01a      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2220      	movs	r2, #32
 8001798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_I2C_Mem_Write+0x224>)
 80017a6:	400b      	ands	r3, r1
 80017a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fe00e800 	.word	0xfe00e800

080017d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	460b      	mov	r3, r1
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	8979      	ldrh	r1, [r7, #10]
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <I2C_RequestMemoryWrite+0xa4>)
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fa1b 	bl	8001c38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f8ab 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e02c      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800181c:	893b      	ldrh	r3, [r7, #8]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
 8001826:	e015      	b.n	8001854 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29b      	uxth	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f891 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e012      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800184a:	893b      	ldrh	r3, [r7, #8]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f830 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	80002000 	.word	0x80002000

0800187c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d103      	bne.n	800189a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d007      	beq.n	80018b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	619a      	str	r2, [r3, #24]
  }
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d4:	e031      	b.n	800193a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d02d      	beq.n	800193a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018de:	f7ff fa41 	bl	8000d64 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d302      	bcc.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d122      	bne.n	800193a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	429a      	cmp	r2, r3
 8001910:	d113      	bne.n	800193a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f043 0220 	orr.w	r2, r3, #32
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4013      	ands	r3, r2
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	429a      	cmp	r2, r3
 8001956:	d0be      	beq.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800196e:	e033      	b.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f87f 	bl	8001a78 <I2C_IsErrorOccurred>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e031      	b.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198a:	d025      	beq.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198c:	f7ff f9ea 	bl	8000d64 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	429a      	cmp	r2, r3
 800199a:	d302      	bcc.n	80019a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11a      	bne.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d013      	beq.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0220 	orr.w	r2, r3, #32
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e007      	b.n	80019e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d1c4      	bne.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019fc:	e02f      	b.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f838 	bl	8001a78 <I2C_IsErrorOccurred>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e02d      	b.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7ff f9a7 	bl	8000d64 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d11a      	bne.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d013      	beq.n	8001a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f043 0220 	orr.w	r2, r3, #32
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e007      	b.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d1c8      	bne.n	80019fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d068      	beq.n	8001b76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2210      	movs	r2, #16
 8001aaa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aac:	e049      	b.n	8001b42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d045      	beq.n	8001b42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ab6:	f7ff f955 	bl	8000d64 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d302      	bcc.n	8001acc <I2C_IsErrorOccurred+0x54>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d13a      	bne.n	8001b42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ade:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aee:	d121      	bne.n	8001b34 <I2C_IsErrorOccurred+0xbc>
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af6:	d01d      	beq.n	8001b34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001af8:	7cfb      	ldrb	r3, [r7, #19]
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d01a      	beq.n	8001b34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b0e:	f7ff f929 	bl	8000d64 <HAL_GetTick>
 8001b12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e00e      	b.n	8001b34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b16:	f7ff f925 	bl	8000d64 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b19      	cmp	r3, #25
 8001b22:	d907      	bls.n	8001b34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b32:	e006      	b.n	8001b42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d1e9      	bne.n	8001b16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d003      	beq.n	8001b58 <I2C_IsErrorOccurred+0xe0>
 8001b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0aa      	beq.n	8001aae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00b      	beq.n	8001ba0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01c      	beq.n	8001c26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fe45 	bl	800187c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <I2C_IsErrorOccurred+0x1bc>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	fe00e800 	.word	0xfe00e800

08001c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	817b      	strh	r3, [r7, #10]
 8001c46:	4613      	mov	r3, r2
 8001c48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c50:	7a7b      	ldrb	r3, [r7, #9]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	0d5b      	lsrs	r3, r3, #21
 8001c72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <I2C_TransferConfig+0x60>)
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	ea02 0103 	and.w	r1, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	03ff63ff 	.word	0x03ff63ff

08001c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d138      	bne.n	8001d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e032      	b.n	8001d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d139      	bne.n	8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e033      	b.n	8001dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2224      	movs	r2, #36	; 0x24
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
  }
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ddc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f001 b823 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 817d 	beq.w	8002102 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e08:	4bbc      	ldr	r3, [pc, #752]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d00c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e14:	4bb9      	ldr	r3, [pc, #740]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d15c      	bne.n	8001eda <HAL_RCC_OscConfig+0x10e>
 8001e20:	4bb6      	ldr	r3, [pc, #728]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d155      	bne.n	8001eda <HAL_RCC_OscConfig+0x10e>
 8001e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_OscConfig+0x94>
 8001e5a:	4ba8      	ldr	r3, [pc, #672]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e015      	b.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e98:	fa92 f2a2 	rbit	r2, r2
 8001e9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ea0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 811f 	beq.w	8002100 <HAL_RCC_OscConfig+0x334>
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8116 	bne.w	8002100 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f000 bfaf 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x12e>
 8001eec:	4b83      	ldr	r3, [pc, #524]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a82      	ldr	r2, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e036      	b.n	8001f68 <HAL_RCC_OscConfig+0x19c>
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x158>
 8001f0a:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a7b      	ldr	r2, [pc, #492]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b79      	ldr	r3, [pc, #484]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a78      	ldr	r2, [pc, #480]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e021      	b.n	8001f68 <HAL_RCC_OscConfig+0x19c>
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x184>
 8001f36:	4b71      	ldr	r3, [pc, #452]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a70      	ldr	r2, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6d      	ldr	r2, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x19c>
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f68:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f023 020f 	bic.w	r2, r3, #15
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	495f      	ldr	r1, [pc, #380]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d059      	beq.n	8002046 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fee7 	bl	8000d64 <HAL_GetTick>
 8001f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fee2 	bl	8000d64 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f000 bf43 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 8001fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fc6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x218>
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x244>
 8001fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002000:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002014:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002018:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002024:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f042 0220 	orr.w	r2, r2, #32
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	f002 021f 	and.w	r2, r2, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ab      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1d0>
 8002044:	e05d      	b.n	8002102 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fe8d 	bl	8000d64 <HAL_GetTick>
 800204a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe fe88 	bl	8000d64 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d902      	bls.n	8002066 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	f000 bee9 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800207a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_RCC_OscConfig+0x2cc>
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	e015      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f8>
 8002098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800209c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_RCC_OscConfig+0x330>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020d0:	fa92 f2a2 	rbit	r2, r2
 80020d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f002 021f 	and.w	r2, r2, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ab      	bne.n	8002050 <HAL_RCC_OscConfig+0x284>
 80020f8:	e003      	b.n	8002102 <HAL_RCC_OscConfig+0x336>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 817d 	beq.w	8002412 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002118:	4ba6      	ldr	r3, [pc, #664]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002124:	4ba3      	ldr	r3, [pc, #652]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d172      	bne.n	8002216 <HAL_RCC_OscConfig+0x44a>
 8002130:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d16c      	bne.n	8002216 <HAL_RCC_OscConfig+0x44a>
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800214e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0x3a0>
 8002166:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e013      	b.n	8002194 <HAL_RCC_OscConfig+0x3c8>
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002184:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002190:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2202      	movs	r2, #2
 8002196:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800219a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800219e:	fa92 f2a2 	rbit	r2, r2
 80021a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021aa:	fab2 f282 	clz	r2, r2
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f002 021f 	and.w	r2, r2, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCC_OscConfig+0x410>
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f000 be2e 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b75      	ldr	r3, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	21f8      	movs	r1, #248	; 0xf8
 80021f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021fa:	fa91 f1a1 	rbit	r1, r1
 80021fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002202:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002206:	fab1 f181 	clz	r1, r1
 800220a:	b2c9      	uxtb	r1, r1
 800220c:	408b      	lsls	r3, r1
 800220e:	4969      	ldr	r1, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002214:	e0fd      	b.n	8002412 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8088 	beq.w	8002338 <HAL_RCC_OscConfig+0x56c>
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800223a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002248:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fd86 	bl	8000d64 <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7fe fd81 	bl	8000d64 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d902      	bls.n	8002274 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	f000 bde2 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002274:	2302      	movs	r3, #2
 8002276:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002286:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4d8>
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x500>
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0220 	orr.w	r2, r2, #32
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0af      	beq.n	800225e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	21f8      	movs	r1, #248	; 0xf8
 8002314:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800231c:	fa91 f1a1 	rbit	r1, r1
 8002320:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002324:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002328:	fab1 f181 	clz	r1, r1
 800232c:	b2c9      	uxtb	r1, r1
 800232e:	408b      	lsls	r3, r1
 8002330:	4920      	ldr	r1, [pc, #128]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
 8002336:	e06c      	b.n	8002412 <HAL_RCC_OscConfig+0x646>
 8002338:	2301      	movs	r3, #1
 800233a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800234a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	461a      	mov	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fcfe 	bl	8000d64 <HAL_GetTick>
 8002368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7fe fcf9 	bl	8000d64 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d902      	bls.n	8002384 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	f000 bd5a 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d104      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5ec>
 80023ae:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCC_OscConfig+0x5e8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x614>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023ca:	2302      	movs	r3, #2
 80023cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023dc:	4bc8      	ldr	r3, [pc, #800]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2202      	movs	r2, #2
 80023e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023ea:	fa92 f2a2 	rbit	r2, r2
 80023ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ad      	bne.n	800236e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8110 	beq.w	8002648 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d079      	beq.n	800252c <HAL_RCC_OscConfig+0x760>
 8002438:	2301      	movs	r3, #1
 800243a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800244a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	4bab      	ldr	r3, [pc, #684]	; (8002704 <HAL_RCC_OscConfig+0x938>)
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	461a      	mov	r2, r3
 800245e:	2301      	movs	r3, #1
 8002460:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fc7f 	bl	8000d64 <HAL_GetTick>
 8002466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe fc7a 	bl	8000d64 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d902      	bls.n	8002482 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	f000 bcdb 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	fa93 f2a3 	rbit	r2, r3
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 80024de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024e8:	2102      	movs	r1, #2
 80024ea:	6019      	str	r1, [r3, #0]
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f1a3 	rbit	r1, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002502:	6019      	str	r1, [r3, #0]
  return result;
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0a0      	beq.n	800246c <HAL_RCC_OscConfig+0x6a0>
 800252a:	e08d      	b.n	8002648 <HAL_RCC_OscConfig+0x87c>
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800254e:	601a      	str	r2, [r3, #0]
  return result;
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002558:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x938>)
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	461a      	mov	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fbf9 	bl	8000d64 <HAL_GetTick>
 8002572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fbf4 	bl	8000d64 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d902      	bls.n	800258e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	f000 bc55 	b.w	8002e38 <HAL_RCC_OscConfig+0x106c>
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002596:	2202      	movs	r2, #2
 8002598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fa93 f2a3 	rbit	r2, r3
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025ba:	2202      	movs	r2, #2
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80025f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002606:	2102      	movs	r1, #2
 8002608:	6019      	str	r1, [r3, #0]
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f1a3 	rbit	r1, r3
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002620:	6019      	str	r1, [r3, #0]
  return result;
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d197      	bne.n	8002578 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 81a1 	beq.w	80029a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d116      	bne.n	800269e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	61d3      	str	r3, [r2, #28]
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002696:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_RCC_OscConfig+0x93c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11a      	bne.n	80026e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_RCC_OscConfig+0x93c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a16      	ldr	r2, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x93c>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fb55 	bl	8000d64 <HAL_GetTick>
 80026ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	e009      	b.n	80026d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c0:	f7fe fb50 	bl	8000d64 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e3b1      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x93c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x940>
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	4a02      	ldr	r2, [pc, #8]	; (8002700 <HAL_RCC_OscConfig+0x934>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6213      	str	r3, [r2, #32]
 80026fc:	e03c      	b.n	8002778 <HAL_RCC_OscConfig+0x9ac>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	10908120 	.word	0x10908120
 8002708:	40007000 	.word	0x40007000
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x96a>
 800271c:	4bc1      	ldr	r3, [pc, #772]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4ac0      	ldr	r2, [pc, #768]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4bbe      	ldr	r3, [pc, #760]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4abd      	ldr	r2, [pc, #756]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e020      	b.n	8002778 <HAL_RCC_OscConfig+0x9ac>
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b05      	cmp	r3, #5
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x994>
 8002746:	4bb7      	ldr	r3, [pc, #732]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4ab6      	ldr	r2, [pc, #728]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4bb4      	ldr	r3, [pc, #720]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4ab3      	ldr	r2, [pc, #716]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0x9ac>
 8002760:	4bb0      	ldr	r3, [pc, #704]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4aaf      	ldr	r2, [pc, #700]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	4bad      	ldr	r3, [pc, #692]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4aac      	ldr	r2, [pc, #688]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8081 	beq.w	800288c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe faeb 	bl	8000d64 <HAL_GetTick>
 800278e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fae6 	bl	8000d64 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e345      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027b4:	2202      	movs	r2, #2
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027d8:	2202      	movs	r2, #2
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027f2:	601a      	str	r2, [r3, #0]
  return result;
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80027fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d102      	bne.n	8002818 <HAL_RCC_OscConfig+0xa4c>
 8002812:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	e013      	b.n	8002840 <HAL_RCC_OscConfig+0xa74>
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b79      	ldr	r3, [pc, #484]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002844:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002848:	2102      	movs	r1, #2
 800284a:	6011      	str	r1, [r2, #0]
 800284c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002850:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	fa92 f1a2 	rbit	r1, r2
 800285a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800285e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002862:	6011      	str	r1, [r2, #0]
  return result;
 8002864:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002868:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d084      	beq.n	8002794 <HAL_RCC_OscConfig+0x9c8>
 800288a:	e07f      	b.n	800298c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7fe fa6a 	bl	8000d64 <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fa65 	bl	8000d64 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e2c4      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028b6:	2202      	movs	r2, #2
 80028b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028da:	2202      	movs	r2, #2
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028f4:	601a      	str	r2, [r3, #0]
  return result;
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80028fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0xb4e>
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	e013      	b.n	8002942 <HAL_RCC_OscConfig+0xb76>
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002946:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800294a:	2102      	movs	r1, #2
 800294c:	6011      	str	r1, [r2, #0]
 800294e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002952:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	fa92 f1a2 	rbit	r1, r2
 800295c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002960:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002964:	6011      	str	r1, [r2, #0]
  return result;
 8002966:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d184      	bne.n	8002896 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800298c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8242 	beq.w	8002e36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_RCC_OscConfig+0xc58>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	f000 8213 	beq.w	8002de6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f040 8162 	bne.w	8002c96 <HAL_RCC_OscConfig+0xeca>
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80029f6:	601a      	str	r2, [r3, #0]
  return result;
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002a00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe f9a4 	bl	8000d64 <HAL_GetTick>
 8002a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e00c      	b.n	8002a3c <HAL_RCC_OscConfig+0xc70>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe f99c 	bl	8000d64 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1fd      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a60:	601a      	str	r2, [r3, #0]
  return result;
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <HAL_RCC_OscConfig+0xcba>
 8002a80:	4bb0      	ldr	r3, [pc, #704]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e027      	b.n	8002ad6 <HAL_RCC_OscConfig+0xd0a>
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	fa93 f2a3 	rbit	r2, r3
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4b9c      	ldr	r3, [pc, #624]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ada:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ade:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ae2:	6011      	str	r1, [r2, #0]
 8002ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ae8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	fa92 f1a2 	rbit	r1, r2
 8002af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002afa:	6011      	str	r1, [r2, #0]
  return result;
 8002afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d182      	bne.n	8002a28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	497f      	ldr	r1, [pc, #508]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fa93 f2a3 	rbit	r2, r3
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b6e:	601a      	str	r2, [r3, #0]
  return result;
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe f8e8 	bl	8000d64 <HAL_GetTick>
 8002b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b98:	e009      	b.n	8002bae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe f8e3 	bl	8000d64 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e144      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bd2:	601a      	str	r2, [r3, #0]
  return result;
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002bdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xe2c>
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	e027      	b.n	8002c48 <HAL_RCC_OscConfig+0xe7c>
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c54:	6011      	str	r1, [r2, #0]
 8002c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fa92 f1a2 	rbit	r1, r2
 8002c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c6c:	6011      	str	r1, [r2, #0]
  return result;
 8002c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	fab2 f282 	clz	r2, r2
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f042 0220 	orr.w	r2, r2, #32
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d082      	beq.n	8002b9a <HAL_RCC_OscConfig+0xdce>
 8002c94:	e0cf      	b.n	8002e36 <HAL_RCC_OscConfig+0x106a>
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cba:	601a      	str	r2, [r3, #0]
  return result;
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f842 	bl	8000d64 <HAL_GetTick>
 8002ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe f83d 	bl	8000d64 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e09e      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d1e:	601a      	str	r2, [r3, #0]
  return result;
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d104      	bne.n	8002d48 <HAL_RCC_OscConfig+0xf7c>
 8002d3e:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_RCC_OscConfig+0xf78>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e029      	b.n	8002d98 <HAL_RCC_OscConfig+0xfcc>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_OscConfig+0x1078>)
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002da0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002daa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	fa92 f1a2 	rbit	r1, r2
 8002db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dbc:	6011      	str	r1, [r2, #0]
  return result;
 8002dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0220 	orr.w	r2, r2, #32
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d180      	bne.n	8002ce6 <HAL_RCC_OscConfig+0xf1a>
 8002de4:	e027      	b.n	8002e36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01e      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCC_OscConfig+0x1078>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b09e      	sub	sp, #120	; 0x78
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e162      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b90      	ldr	r3, [pc, #576]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d910      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	498b      	ldr	r1, [pc, #556]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b89      	ldr	r3, [pc, #548]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e14a      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	497f      	ldr	r1, [pc, #508]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80dc 	beq.w	8003074 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d13c      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xf6>
 8002ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ec8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_ClockConfig+0xa6>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	e00f      	b.n	8002f0e <HAL_RCC_ClockConfig+0xc6>
 8002eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	667b      	str	r3, [r7, #100]	; 0x64
 8002efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f00:	663b      	str	r3, [r7, #96]	; 0x60
 8002f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f12:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0220 	orr.w	r2, r2, #32
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d17b      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0f3      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d13c      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x178>
 8002f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x128>
 8002f6a:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e00f      	b.n	8002f90 <HAL_RCC_ClockConfig+0x148>
 8002f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f94:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13a      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b2      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1a0>
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	e00d      	b.n	8003004 <HAL_RCC_ClockConfig+0x1bc>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	61ba      	str	r2, [r7, #24]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	fa92 f2a2 	rbit	r2, r2
 800300e:	617a      	str	r2, [r7, #20]
  return result;
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e079      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	491a      	ldr	r1, [pc, #104]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7fd fe8e 	bl	8000d64 <HAL_GetTick>
 8003048:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fd fe8a 	bl	8000d64 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e061      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_ClockConfig+0x260>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d214      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4906      	ldr	r1, [pc, #24]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_RCC_ClockConfig+0x25c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_RCC_ClockConfig+0x2de>
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	491a      	ldr	r1, [pc, #104]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4912      	ldr	r1, [pc, #72]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030ea:	f000 f829 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_ClockConfig+0x2e8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	22f0      	movs	r2, #240	; 0xf0
 80030fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	fa92 f2a2 	rbit	r2, r2
 8003102:	60fa      	str	r2, [r7, #12]
  return result;
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	fab2 f282 	clz	r2, r2
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	40d3      	lsrs	r3, r2
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x2ec>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	fa21 f303 	lsr.w	r3, r1, r3
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_RCC_ClockConfig+0x2f0>)
 8003118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_RCC_ClockConfig+0x2f4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fddc 	bl	8000cdc <HAL_InitTick>
  
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3778      	adds	r7, #120	; 0x78
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	08004b3c 	.word	0x08004b3c
 8003138:	20000008 	.word	0x20000008
 800313c:	2000000c 	.word	0x2000000c

08003140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b08b      	sub	sp, #44	; 0x2c
 8003144:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x30>
 800316a:	2b08      	cmp	r3, #8
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x36>
 800316e:	e03c      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003172:	623b      	str	r3, [r7, #32]
      break;
 8003174:	e03c      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800317c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003180:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	fa92 f2a2 	rbit	r2, r2
 8003188:	607a      	str	r2, [r7, #4]
  return result;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	fab2 f282 	clz	r2, r2
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	40d3      	lsrs	r3, r2
 8003194:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003196:	5cd3      	ldrb	r3, [r2, r3]
 8003198:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_GetSysClockFreq+0xc0>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	220f      	movs	r2, #15
 80031a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	fa92 f2a2 	rbit	r2, r2
 80031ac:	60fa      	str	r2, [r7, #12]
  return result;
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	fab2 f282 	clz	r2, r2
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	40d3      	lsrs	r3, r2
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
 80031d8:	e004      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4a0c      	ldr	r2, [pc, #48]	; (8003210 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ec:	623b      	str	r3, [r7, #32]
      break;
 80031ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	372c      	adds	r7, #44	; 0x2c
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	007a1200 	.word	0x007a1200
 8003208:	08004b54 	.word	0x08004b54
 800320c:	08004b64 	.word	0x08004b64
 8003210:	003d0900 	.word	0x003d0900

08003214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000008 	.word	0x20000008

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003232:	f7ff ffef 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003236:	4601      	mov	r1, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003240:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	fa92 f2a2 	rbit	r2, r2
 800324c:	603a      	str	r2, [r7, #0]
  return result;
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	fab2 f282 	clz	r2, r2
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	40d3      	lsrs	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_RCC_GetPCLK1Freq+0x40>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	08004b4c 	.word	0x08004b4c

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003276:	f7ff ffcd 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 800327a:	4601      	mov	r1, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003284:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003288:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	603a      	str	r2, [r7, #0]
  return result;
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	40d3      	lsrs	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08004b4c 	.word	0x08004b4c

080032b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b092      	sub	sp, #72	; 0x48
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80cd 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d8:	4b86      	ldr	r3, [pc, #536]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10e      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a82      	ldr	r2, [pc, #520]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	61d3      	str	r3, [r2, #28]
 80032f0:	4b80      	ldr	r3, [pc, #512]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	4b7d      	ldr	r3, [pc, #500]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330e:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a79      	ldr	r2, [pc, #484]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fd fd23 	bl	8000d64 <HAL_GetTick>
 800331e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fd fd1f 	bl	8000d64 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0db      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003340:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003348:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800335a:	429a      	cmp	r2, r3
 800335c:	d076      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4b5e      	ldr	r3, [pc, #376]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	461a      	mov	r2, r3
 8003388:	2301      	movs	r3, #1
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b55      	ldr	r3, [pc, #340]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	461a      	mov	r2, r3
 80033ac:	2300      	movs	r3, #0
 80033ae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b0:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d045      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fcd0 	bl	8000d64 <HAL_GetTick>
 80033c4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd fccc 	bl	8000d64 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e086      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x238>
 80033de:	2302      	movs	r3, #2
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	2302      	movs	r3, #2
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	61fb      	str	r3, [r7, #28]
  return result;
 80033f6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d102      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800340c:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	e007      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2202      	movs	r2, #2
 8003424:	613a      	str	r2, [r7, #16]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	60fa      	str	r2, [r7, #12]
  return result;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f002 021f 	and.w	r2, r2, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0bd      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4926      	ldr	r1, [pc, #152]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800345e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	491a      	ldr	r1, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348c:	4313      	orrs	r3, r2
 800348e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4912      	ldr	r1, [pc, #72]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	490b      	ldr	r1, [pc, #44]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3748      	adds	r7, #72	; 0x48
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40007000 	.word	0x40007000
 80034fc:	10908100 	.word	0x10908100

08003500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e040      	b.n	8003594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fb56 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8b6 	bl	80036b0 <UART_SetConfig>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e022      	b.n	8003594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9e0 	bl	800391c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800356a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800357a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa67 	bl	8003a60 <UART_CheckIdleState>
 8003592:	4603      	mov	r3, r0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d178      	bne.n	80036a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_UART_Transmit+0x24>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e071      	b.n	80036a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d2:	f7fd fbc7 	bl	8000d64 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d108      	bne.n	8003604 <HAL_UART_Transmit+0x68>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e003      	b.n	800360c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800360c:	e030      	b.n	8003670 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fac9 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e03c      	b.n	80036a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003640:	b292      	uxth	r2, r2
 8003642:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	3302      	adds	r3, #2
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	e008      	b.n	800365e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b292      	uxth	r2, r2
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c8      	bne.n	800360e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2200      	movs	r2, #0
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fa92 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e005      	b.n	80036a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b8a      	ldr	r3, [pc, #552]	; (8003904 <UART_SetConfig+0x254>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a78      	ldr	r2, [pc, #480]	; (8003908 <UART_SetConfig+0x258>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d120      	bne.n	800376e <UART_SetConfig+0xbe>
 800372c:	4b77      	ldr	r3, [pc, #476]	; (800390c <UART_SetConfig+0x25c>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d817      	bhi.n	8003768 <UART_SetConfig+0xb8>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x90>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003751 	.word	0x08003751
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003763 	.word	0x08003763
 800374c:	08003757 	.word	0x08003757
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e01d      	b.n	8003792 <UART_SetConfig+0xe2>
 8003756:	2302      	movs	r3, #2
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e01a      	b.n	8003792 <UART_SetConfig+0xe2>
 800375c:	2304      	movs	r3, #4
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e017      	b.n	8003792 <UART_SetConfig+0xe2>
 8003762:	2308      	movs	r3, #8
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e014      	b.n	8003792 <UART_SetConfig+0xe2>
 8003768:	2310      	movs	r3, #16
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e011      	b.n	8003792 <UART_SetConfig+0xe2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a67      	ldr	r2, [pc, #412]	; (8003910 <UART_SetConfig+0x260>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d102      	bne.n	800377e <UART_SetConfig+0xce>
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e009      	b.n	8003792 <UART_SetConfig+0xe2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a64      	ldr	r2, [pc, #400]	; (8003914 <UART_SetConfig+0x264>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d102      	bne.n	800378e <UART_SetConfig+0xde>
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e001      	b.n	8003792 <UART_SetConfig+0xe2>
 800378e:	2310      	movs	r3, #16
 8003790:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379a:	d15a      	bne.n	8003852 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d827      	bhi.n	80037f2 <UART_SetConfig+0x142>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0xf8>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f3 	.word	0x080037f3
 80037b8:	080037e3 	.word	0x080037e3
 80037bc:	080037f3 	.word	0x080037f3
 80037c0:	080037f3 	.word	0x080037f3
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	080037eb 	.word	0x080037eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7ff fd2e 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80037d0:	61b8      	str	r0, [r7, #24]
        break;
 80037d2:	e013      	b.n	80037fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7ff fd4c 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 80037d8:	61b8      	str	r0, [r7, #24]
        break;
 80037da:	e00f      	b.n	80037fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <UART_SetConfig+0x268>)
 80037de:	61bb      	str	r3, [r7, #24]
        break;
 80037e0:	e00c      	b.n	80037fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7ff fcad 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80037e6:	61b8      	str	r0, [r7, #24]
        break;
 80037e8:	e008      	b.n	80037fc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e004      	b.n	80037fc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	77bb      	strb	r3, [r7, #30]
        break;
 80037fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d074      	beq.n	80038ec <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	005a      	lsls	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b0f      	cmp	r3, #15
 800381c:	d916      	bls.n	800384c <UART_SetConfig+0x19c>
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d212      	bcs.n	800384c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f023 030f 	bic.w	r3, r3, #15
 800382e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	b29a      	uxth	r2, r3
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	4313      	orrs	r3, r2
 8003840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	89fa      	ldrh	r2, [r7, #14]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	e04f      	b.n	80038ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77bb      	strb	r3, [r7, #30]
 8003850:	e04c      	b.n	80038ec <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d828      	bhi.n	80038aa <UART_SetConfig+0x1fa>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x1b0>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388d 	.word	0x0800388d
 8003868:	08003895 	.word	0x08003895
 800386c:	080038ab 	.word	0x080038ab
 8003870:	0800389b 	.word	0x0800389b
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038ab 	.word	0x080038ab
 800387c:	080038ab 	.word	0x080038ab
 8003880:	080038a3 	.word	0x080038a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7ff fcd2 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8003888:	61b8      	str	r0, [r7, #24]
        break;
 800388a:	e013      	b.n	80038b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800388c:	f7ff fcf0 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8003890:	61b8      	str	r0, [r7, #24]
        break;
 8003892:	e00f      	b.n	80038b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <UART_SetConfig+0x268>)
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e00c      	b.n	80038b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389a:	f7ff fc51 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 800389e:	61b8      	str	r0, [r7, #24]
        break;
 80038a0:	e008      	b.n	80038b4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	61bb      	str	r3, [r7, #24]
        break;
 80038a8:	e004      	b.n	80038b4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	77bb      	strb	r3, [r7, #30]
        break;
 80038b2:	bf00      	nop
    }

    if (pclk != 0U)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085a      	lsrs	r2, r3, #1
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d909      	bls.n	80038e8 <UART_SetConfig+0x238>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d205      	bcs.n	80038e8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	e001      	b.n	80038ec <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	efff69f3 	.word	0xefff69f3
 8003908:	40013800 	.word	0x40013800
 800390c:	40021000 	.word	0x40021000
 8003910:	40004400 	.word	0x40004400
 8003914:	40004800 	.word	0x40004800
 8003918:	007a1200 	.word	0x007a1200

0800391c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01a      	beq.n	8003a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1a:	d10a      	bne.n	8003a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b098      	sub	sp, #96	; 0x60
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a70:	f7fd f978 	bl	8000d64 <HAL_GetTick>
 8003a74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d12e      	bne.n	8003ae2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f88c 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d021      	beq.n	8003ae2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
 8003abe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e062      	b.n	8003ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d149      	bne.n	8003b84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af8:	2200      	movs	r2, #0
 8003afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f856 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d03c      	beq.n	8003b84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	623b      	str	r3, [r7, #32]
   return(result);
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e6      	bne.n	8003b0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3308      	adds	r3, #8
 8003b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5c:	61fa      	str	r2, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e011      	b.n	8003ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3758      	adds	r7, #88	; 0x58
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	e049      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d045      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fd f8cb 	bl	8000d64 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e048      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d031      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d110      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2208      	movs	r2, #8
 8003c06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f838 	bl	8003c7e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2208      	movs	r2, #8
 8003c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e029      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d111      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f81e 	bl	8003c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d0a6      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b095      	sub	sp, #84	; 0x54
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d118      	bne.n	8003d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e6      	bne.n	8003cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	; (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2600      	movs	r6, #0
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4d0b      	ldr	r5, [pc, #44]	; (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	; (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 f820 	bl	8003da0 <_init>
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2600      	movs	r6, #0
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08004b74 	.word	0x08004b74
 8003d84:	08004b74 	.word	0x08004b74
 8003d88:	08004b74 	.word	0x08004b74
 8003d8c:	08004b78 	.word	0x08004b78

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
