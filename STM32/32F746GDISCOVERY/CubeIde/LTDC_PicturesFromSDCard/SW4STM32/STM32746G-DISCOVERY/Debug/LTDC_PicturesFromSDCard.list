
LTDC_PicturesFromSDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ee0  08006228  08006228  00007228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a108  0800a108  0000b108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a110  0800a110  0000b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a114  0800a114  0000b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  20000000  0800a118  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000fac  200000a4  0800a1bc  0000c0a4  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  20001050  0800a1bc  0000d050  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY
 10 .debug_line   0001d9de  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000cc  00000000  00000000  00029ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0001e71c  00000000  00000000  00029b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004624  00000000  00000000  0004829a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0004c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f7f3a  00000000  00000000  0004dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fb  00000000  00000000  00145ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000e132  00000000  00000000  00146dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029cd7  00000000  00000000  00154f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ebde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  0017ec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006210 	.word	0x08006210

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08006210 	.word	0x08006210

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005f2:	e003      	b.n	80005fc <LoopCopyDataInit>

080005f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005fa:	3104      	adds	r1, #4

080005fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005fc:	480b      	ldr	r0, [pc, #44]	@ (800062c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000604:	d3f6      	bcc.n	80005f4 <CopyDataInit>
  ldr  r2, =_sbss
 8000606:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000608:	e002      	b.n	8000610 <LoopFillZerobss>

0800060a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800060a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800060c:	f842 3b04 	str.w	r3, [r2], #4

08000610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000614:	d3f9      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000616:	f001 f95f 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f005 fa3f 	bl	8005a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061e:	f000 f8ef 	bl	8000800 <main>
  bx  lr    
 8000622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000624:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000628:	0800a118 	.word	0x0800a118
  ldr  r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000630:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8000634:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8000638:	20001050 	.word	0x20001050

0800063c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC_IRQHandler>
	...

08000640 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000640:	4a0a      	ldr	r2, [pc, #40]	@ (800066c <_sbrk+0x2c>)
 8000642:	6811      	ldr	r1, [r2, #0]
{
 8000644:	b508      	push	{r3, lr}
 8000646:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000648:	b909      	cbnz	r1, 800064e <_sbrk+0xe>
		heap_end = &end;
 800064a:	4909      	ldr	r1, [pc, #36]	@ (8000670 <_sbrk+0x30>)
 800064c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800064e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000650:	4669      	mov	r1, sp
 8000652:	4403      	add	r3, r0
 8000654:	428b      	cmp	r3, r1
 8000656:	d906      	bls.n	8000666 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000658:	f005 fa1a 	bl	8005a90 <__errno>
 800065c:	230c      	movs	r3, #12
 800065e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000664:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000666:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8000668:	e7fc      	b.n	8000664 <_sbrk+0x24>
 800066a:	bf00      	nop
 800066c:	200000c0 	.word	0x200000c0
 8000670:	20001050 	.word	0x20001050

08000674 <Storage_OpenReadFile>:
  * @param  BufferAddress: A pointer to a buffer to copy the file to
  * @param  FileLen: the File length
  * @retval err: Error status (0=> success, 1=> fail)
  */
uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 8000674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000678:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800067c:	4606      	mov	r6, r0
  uint32_t index = 0, size = 0, i1 = 0;
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 800067e:	2201      	movs	r2, #1
{
 8000680:	460f      	mov	r7, r1
  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 8000682:	4668      	mov	r0, sp
 8000684:	f004 fdd2 	bl	800522c <f_open>
 8000688:	b100      	cbz	r0, 800068c <Storage_OpenReadFile+0x18>
  {
    while(1)
 800068a:	e7fe      	b.n	800068a <Storage_OpenReadFile+0x16>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 800068c:	4d1c      	ldr	r5, [pc, #112]	@ (8000700 <Storage_OpenReadFile+0x8c>)
 800068e:	221e      	movs	r2, #30
 8000690:	4668      	mov	r0, sp
 8000692:	1f2b      	subs	r3, r5, #4
 8000694:	4629      	mov	r1, r5
 8000696:	f004 fec7 	bl	8005428 <f_read>
 800069a:	b100      	cbz	r0, 800069e <Storage_OpenReadFile+0x2a>
  {
    while(1)
 800069c:	e7fe      	b.n	800069c <Storage_OpenReadFile+0x28>
  
  BmpAddress = (uint32_t)sector;

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 800069e:	88ab      	ldrh	r3, [r5, #4]
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
  
  f_close (&F1);
 80006a0:	4668      	mov	r0, sp
  size = *(uint16_t *) (BmpAddress + 2);
 80006a2:	886c      	ldrh	r4, [r5, #2]
    else
    {
      i1 = 256*2;
    }
    size -= i1;
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006a4:	f1a5 0804 	sub.w	r8, r5, #4
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 80006a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  f_close (&F1);
 80006ac:	f004 ffbd 	bl	800562a <f_close>
  f_open (&F1, (TCHAR const*)BmpName, FA_READ);
 80006b0:	2201      	movs	r2, #1
 80006b2:	4639      	mov	r1, r7
 80006b4:	4668      	mov	r0, sp
 80006b6:	f004 fdb9 	bl	800522c <f_open>
    if (size < 256*2)
 80006ba:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80006be:	4627      	mov	r7, r4
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006c0:	490f      	ldr	r1, [pc, #60]	@ (8000700 <Storage_OpenReadFile+0x8c>)
 80006c2:	4643      	mov	r3, r8
    if (size < 256*2)
 80006c4:	bf28      	it	cs
 80006c6:	f44f 7700 	movcs.w	r7, #512	@ 0x200
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006ca:	4668      	mov	r0, sp
 80006cc:	463a      	mov	r2, r7
    size -= i1;
 80006ce:	1be4      	subs	r4, r4, r7
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 80006d0:	f004 feaa 	bl	8005428 <f_read>

    for (index = 0; index < i1; index++)
 80006d4:	2100      	movs	r1, #0
 80006d6:	42b9      	cmp	r1, r7
 80006d8:	eb06 0201 	add.w	r2, r6, r1
 80006dc:	d10a      	bne.n	80006f4 <Storage_OpenReadFile+0x80>
 80006de:	4616      	mov	r6, r2
      Address++;
    }  
    
    BmpAddress = (uint32_t)sector;
  }
  while (size > 0);
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d1ea      	bne.n	80006ba <Storage_OpenReadFile+0x46>

  f_close (&F1);
 80006e4:	4668      	mov	r0, sp
 80006e6:	f004 ffa0 	bl	800562a <f_close>
  
  return 1;
}
 80006ea:	2001      	movs	r0, #1
 80006ec:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 80006f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 80006f4:	5c6a      	ldrb	r2, [r5, r1]
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	5472      	strb	r2, [r6, r1]
    for (index = 0; index < i1; index++)
 80006fa:	3101      	adds	r1, #1
 80006fc:	e7eb      	b.n	80006d6 <Storage_OpenReadFile+0x62>
 80006fe:	bf00      	nop
 8000700:	200002fc 	.word	0x200002fc

08000704 <Storage_GetDirectoryBitmapFiles>:
  * @brief  List up to 25 file on the root directory with extension .BMP
  * @param  None
  * @retval The number of the found files
  */
uint32_t Storage_GetDirectoryBitmapFiles (const char* DirName, char* Files[])
{
 8000704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FRESULT res;
  uint32_t index = 0;

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 8000708:	2200      	movs	r2, #0
{
 800070a:	4607      	mov	r7, r0
 800070c:	460e      	mov	r6, r1
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 800070e:	4817      	ldr	r0, [pc, #92]	@ (800076c <Storage_GetDirectoryBitmapFiles+0x68>)
 8000710:	4917      	ldr	r1, [pc, #92]	@ (8000770 <Storage_GetDirectoryBitmapFiles+0x6c>)
 8000712:	f004 fd5f 	bl	80051d4 <f_mount>
 8000716:	4d15      	ldr	r5, [pc, #84]	@ (800076c <Storage_GetDirectoryBitmapFiles+0x68>)
 8000718:	4604      	mov	r4, r0
 800071a:	bb20      	cbnz	r0, 8000766 <Storage_GetDirectoryBitmapFiles+0x62>
  {
    return 0;
  }

  /* Start to search for wave files */
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 800071c:	463a      	mov	r2, r7
      if(index < MAX_BMP_FILES)
      {
        sprintf (Files[index++], "%s", fno.fname);
      }
      /* Search for next item */
      res = f_findnext(&dir, &fno);
 800071e:	f205 4734 	addw	r7, r5, #1076	@ 0x434
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <Storage_GetDirectoryBitmapFiles+0x70>)
 8000724:	f205 4134 	addw	r1, r5, #1076	@ 0x434
 8000728:	f205 404c 	addw	r0, r5, #1100	@ 0x44c
 800072c:	f005 f81c 	bl	8005768 <f_findfirst>
  while (fno.fname[0])
 8000730:	f895 343d 	ldrb.w	r3, [r5, #1085]	@ 0x43d
 8000734:	b92b      	cbnz	r3, 8000742 <Storage_GetDirectoryBitmapFiles+0x3e>
      index = 0;
      break;
    }
  }

  f_closedir(&dir);
 8000736:	4810      	ldr	r0, [pc, #64]	@ (8000778 <Storage_GetDirectoryBitmapFiles+0x74>)
 8000738:	f004 ffc7 	bl	80056ca <f_closedir>

  return index;
}
 800073c:	4620      	mov	r0, r4
 800073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(res == FR_OK)
 8000742:	b970      	cbnz	r0, 8000762 <Storage_GetDirectoryBitmapFiles+0x5e>
      if(index < MAX_BMP_FILES)
 8000744:	2c18      	cmp	r4, #24
 8000746:	d807      	bhi.n	8000758 <Storage_GetDirectoryBitmapFiles+0x54>
        sprintf (Files[index++], "%s", fno.fname);
 8000748:	f104 0801 	add.w	r8, r4, #1
 800074c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8000750:	490a      	ldr	r1, [pc, #40]	@ (800077c <Storage_GetDirectoryBitmapFiles+0x78>)
 8000752:	4644      	mov	r4, r8
 8000754:	f005 f9c8 	bl	8005ae8 <strcpy>
      res = f_findnext(&dir, &fno);
 8000758:	4639      	mov	r1, r7
 800075a:	4807      	ldr	r0, [pc, #28]	@ (8000778 <Storage_GetDirectoryBitmapFiles+0x74>)
 800075c:	f004 ffec 	bl	8005738 <f_findnext>
 8000760:	e7e6      	b.n	8000730 <Storage_GetDirectoryBitmapFiles+0x2c>
      index = 0;
 8000762:	2400      	movs	r4, #0
 8000764:	e7e7      	b.n	8000736 <Storage_GetDirectoryBitmapFiles+0x32>
    return 0;
 8000766:	2400      	movs	r4, #0
 8000768:	e7e8      	b.n	800073c <Storage_GetDirectoryBitmapFiles+0x38>
 800076a:	bf00      	nop
 800076c:	200000c8 	.word	0x200000c8
 8000770:	0800a027 	.word	0x0800a027
 8000774:	08009ff8 	.word	0x08009ff8
 8000778:	20000514 	.word	0x20000514
 800077c:	20000505 	.word	0x20000505

08000780 <Buffercmp>:
  * @retval  0: pBuffer1 identical to pBuffer2
  *          1: pBuffer1 differs from pBuffer2
  */
uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 8000780:	3801      	subs	r0, #1
 8000782:	3901      	subs	r1, #1
{
 8000784:	b510      	push	{r4, lr}
  while (BufferLength--)
 8000786:	b90a      	cbnz	r2, 800078c <Buffercmp+0xc>

    pBuffer1++;
    pBuffer2++;
  }

  return 0;
 8000788:	4610      	mov	r0, r2
}
 800078a:	bd10      	pop	{r4, pc}
    if (*pBuffer1 != *pBuffer2)
 800078c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8000790:	3a01      	subs	r2, #1
 8000792:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000796:	b292      	uxth	r2, r2
 8000798:	429c      	cmp	r4, r3
 800079a:	d0f4      	beq.n	8000786 <Buffercmp+0x6>
      return 1;
 800079c:	2001      	movs	r0, #1
 800079e:	e7f4      	b.n	800078a <Buffercmp+0xa>

080007a0 <Storage_CheckBitmapFile>:
{
 80007a0:	b510      	push	{r4, lr}
  if(f_mount(&fs, (TCHAR const*)"",0))
 80007a2:	2200      	movs	r2, #0
{
 80007a4:	4604      	mov	r4, r0
  if(f_mount(&fs, (TCHAR const*)"",0))
 80007a6:	4910      	ldr	r1, [pc, #64]	@ (80007e8 <Storage_CheckBitmapFile+0x48>)
 80007a8:	4810      	ldr	r0, [pc, #64]	@ (80007ec <Storage_CheckBitmapFile+0x4c>)
 80007aa:	f004 fd13 	bl	80051d4 <f_mount>
 80007ae:	b9b0      	cbnz	r0, 80007de <Storage_CheckBitmapFile+0x3e>
  if(f_open (&F, (TCHAR const*)BmpName, FA_READ))
 80007b0:	2201      	movs	r2, #1
 80007b2:	4621      	mov	r1, r4
 80007b4:	480e      	ldr	r0, [pc, #56]	@ (80007f0 <Storage_CheckBitmapFile+0x50>)
 80007b6:	f004 fd39 	bl	800522c <f_open>
 80007ba:	b990      	cbnz	r0, 80007e2 <Storage_CheckBitmapFile+0x42>
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <Storage_CheckBitmapFile+0x54>)
 80007be:	2206      	movs	r2, #6
 80007c0:	1d19      	adds	r1, r3, #4
 80007c2:	f503 7014 	add.w	r0, r3, #592	@ 0x250
 80007c6:	f004 fe2f 	bl	8005428 <f_read>
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 80007ca:	2202      	movs	r2, #2
 80007cc:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <Storage_CheckBitmapFile+0x58>)
 80007ce:	480b      	ldr	r0, [pc, #44]	@ (80007fc <Storage_CheckBitmapFile+0x5c>)
 80007d0:	f7ff ffd6 	bl	8000780 <Buffercmp>
  return 0;
 80007d4:	2800      	cmp	r0, #0
 80007d6:	bf14      	ite	ne
 80007d8:	2003      	movne	r0, #3
 80007da:	2000      	moveq	r0, #0
}
 80007dc:	bd10      	pop	{r4, pc}
    return 1;
 80007de:	2001      	movs	r0, #1
 80007e0:	e7fc      	b.n	80007dc <Storage_CheckBitmapFile+0x3c>
    return 2;
 80007e2:	2002      	movs	r0, #2
 80007e4:	e7fa      	b.n	80007dc <Storage_CheckBitmapFile+0x3c>
 80007e6:	bf00      	nop
 80007e8:	0800a027 	.word	0x0800a027
 80007ec:	200000c8 	.word	0x200000c8
 80007f0:	20000548 	.word	0x20000548
 80007f4:	200002f8 	.word	0x200002f8
 80007f8:	200002fc 	.word	0x200002fc
 80007fc:	08006228 	.word	0x08006228

08000800 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t counter = 0, transparency = 0;
  uint8_t str[30];
  uwInternelBuffer = (uint8_t *)0xC0260000;
 8000804:	4bc5      	ldr	r3, [pc, #788]	@ (8000b1c <main+0x31c>)
{
 8000806:	b092      	sub	sp, #72	@ 0x48
  uwInternelBuffer = (uint8_t *)0xC0260000;
 8000808:	4dc5      	ldr	r5, [pc, #788]	@ (8000b20 <main+0x320>)
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800080a:	f240 1601 	movw	r6, #257	@ 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800080e:	2400      	movs	r4, #0
  uwInternelBuffer = (uint8_t *)0xC0260000;
 8000810:	602b      	str	r3, [r5, #0]
  HAL_MPU_Disable();
 8000812:	f001 f947 	bl	8001aa4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000816:	2301      	movs	r3, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000818:	a806      	add	r0, sp, #24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800081a:	9609      	str	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081c:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000820:	f248 731f 	movw	r3, #34591	@ 0x871f
 8000824:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000828:	f001 f95a 	bl	8001ae0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800082c:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8000830:	4bbc      	ldr	r3, [pc, #752]	@ (8000b24 <main+0x324>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000832:	f8ad 6018 	strh.w	r6, [sp, #24]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000836:	f04f 4620 	mov.w	r6, #2684354560	@ 0xa0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800083a:	e9cd 0307 	strd	r0, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800083e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000842:	a806      	add	r0, sp, #24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000844:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000846:	f001 f94b 	bl	8001ae0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800084a:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800084e:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000850:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8000854:	4bb4      	ldr	r3, [pc, #720]	@ (8000b28 <main+0x328>)
 8000856:	e9cd 6307 	strd	r6, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	4bb4      	ldr	r3, [pc, #720]	@ (8000b2c <main+0x32c>)
 800085c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085e:	f001 f93f 	bl	8001ae0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000862:	2004      	movs	r0, #4
 8000864:	f001 f92c 	bl	8001ac0 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800086c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000870:	4aaf      	ldr	r2, [pc, #700]	@ (8000b30 <main+0x330>)
 8000872:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800087e:	6953      	ldr	r3, [r2, #20]
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000886:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800088a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800088e:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000892:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000896:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800089a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800089e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008a2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008a6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a8:	ea03 0704 	and.w	r7, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ac:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ae:	ea47 7681 	orr.w	r6, r7, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b4:	f8c2 6260 	str.w	r6, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008b8:	d2f9      	bcs.n	80008ae <main+0xae>
    } while(sets-- != 0U);
 80008ba:	3b20      	subs	r3, #32
 80008bc:	f113 0f20 	cmn.w	r3, #32
 80008c0:	d1f2      	bne.n	80008a8 <main+0xa8>
 80008c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008c6:	6953      	ldr	r3, [r2, #20]
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80008d6:	f001 f849 	bl	800196c <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008da:	2701      	movs	r7, #1
 80008dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;  
 80008e2:	2119      	movs	r1, #25
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80008e4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e6:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	e9cd 7306 	strd	r7, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f0:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;  
 80008f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008f8:	e9cd 130e 	strd	r1, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008fc:	2308      	movs	r3, #8
 80008fe:	9311      	str	r3, [sp, #68]	@ 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000900:	f001 fe56 	bl	80025b0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000904:	b100      	cbz	r0, 8000908 <main+0x108>
    while(1) { ; }
 8000906:	e7fe      	b.n	8000906 <main+0x106>
  ret = HAL_PWREx_EnableOverDrive();
 8000908:	f001 fe1a 	bl	8002540 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800090c:	b100      	cbz	r0, 8000910 <main+0x110>
    while(1) { ; }
 800090e:	e7fe      	b.n	800090e <main+0x10e>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000910:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000916:	9003      	str	r0, [sp, #12]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8000918:	2106      	movs	r1, #6
 800091a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	e9cd 2304 	strd	r2, r3, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8000928:	f002 f82a 	bl	8002980 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800092c:	4604      	mov	r4, r0
 800092e:	b100      	cbz	r0, 8000932 <main+0x132>
    while(1) { ; }
 8000930:	e7fe      	b.n	8000930 <main+0x130>
  BSP_LED_Init(LED1);
 8000932:	f000 f94f 	bl	8000bd4 <BSP_LED_Init>
  BSP_LCD_Init();
 8000936:	f000 fcd3 	bl	80012e0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800093a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800093e:	4620      	mov	r0, r4
 8000940:	f000 fa2a 	bl	8000d98 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8000944:	f000 fa10 	bl	8000d68 <BSP_LCD_GetXSize>
 8000948:	4606      	mov	r6, r0
 800094a:	f000 fa19 	bl	8000d80 <BSP_LCD_GetYSize>
 800094e:	fb00 f106 	mul.w	r1, r0, r6
 8000952:	4638      	mov	r0, r7
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Please insert SD Card                  ");
 8000954:	4e77      	ldr	r6, [pc, #476]	@ (8000b34 <main+0x334>)
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8000956:	f101 5140 	add.w	r1, r1, #805306368	@ 0x30000000
 800095a:	0089      	lsls	r1, r1, #2
 800095c:	f000 fa1c 	bl	8000d98 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn(); 
 8000960:	f000 fbee 	bl	8001140 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8000964:	4620      	mov	r0, r4
 8000966:	f000 fa53 	bl	8000e10 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);  
 800096a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800096e:	f000 fa7f 	bl	8000e70 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8000972:	4638      	mov	r0, r7
 8000974:	f000 fa4c 	bl	8000e10 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000978:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800097c:	f000 fa78 	bl	8000e70 <BSP_LCD_Clear>
  BSP_LCD_SetTransparency(0, 0);
 8000980:	4621      	mov	r1, r4
 8000982:	4620      	mov	r0, r4
 8000984:	f000 fa4a 	bl	8000e1c <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 8000988:	2164      	movs	r1, #100	@ 0x64
 800098a:	4638      	mov	r0, r7
 800098c:	f000 fa46 	bl	8000e1c <BSP_LCD_SetTransparency>
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);   
 8000990:	4621      	mov	r1, r4
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000992:	4c69      	ldr	r4, [pc, #420]	@ (8000b38 <main+0x338>)
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);   
 8000994:	4638      	mov	r0, r7
 8000996:	f000 f94b 	bl	8000c30 <BSP_PB_Init>
  BSP_SD_Init();
 800099a:	f000 fe0d 	bl	80015b8 <BSP_SD_Init>
  while(BSP_SD_IsDetected() != SD_PRESENT)
 800099e:	f000 fcf7 	bl	8001390 <BSP_SD_IsDetected>
 80009a2:	2801      	cmp	r0, #1
 80009a4:	d11c      	bne.n	80009e0 <main+0x1e0>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009a6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80009aa:	f000 fa61 	bl	8000e70 <BSP_LCD_Clear>
  if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 80009ae:	4963      	ldr	r1, [pc, #396]	@ (8000b3c <main+0x33c>)
 80009b0:	4863      	ldr	r0, [pc, #396]	@ (8000b40 <main+0x340>)
 80009b2:	f004 ff0b 	bl	80057cc <FATFS_LinkDriver>
 80009b6:	4604      	mov	r4, r0
 80009b8:	2800      	cmp	r0, #0
 80009ba:	f040 80d9 	bne.w	8000b70 <main+0x370>
 80009be:	4e61      	ldr	r6, [pc, #388]	@ (8000b44 <main+0x344>)
 80009c0:	4637      	mov	r7, r6
      pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 80009c2:	200b      	movs	r0, #11
 80009c4:	f004 ff74 	bl	80058b0 <malloc>
 80009c8:	f847 0b04 	str.w	r0, [r7], #4
      if(pDirectoryFiles[counter] == NULL)
 80009cc:	b980      	cbnz	r0, 80009f0 <main+0x1f0>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80009ce:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 80009d2:	f000 fa29 	bl	8000e28 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Cannot allocate memory ");
 80009d6:	495c      	ldr	r1, [pc, #368]	@ (8000b48 <main+0x348>)
 80009d8:	2008      	movs	r0, #8
 80009da:	f000 fb35 	bl	8001048 <BSP_LCD_DisplayStringAtLine>
        while(1)
 80009de:	e7fe      	b.n	80009de <main+0x1de>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80009e0:	4620      	mov	r0, r4
 80009e2:	f000 fa21 	bl	8000e28 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Please insert SD Card                  ");
 80009e6:	4631      	mov	r1, r6
 80009e8:	2008      	movs	r0, #8
 80009ea:	f000 fb2d 	bl	8001048 <BSP_LCD_DisplayStringAtLine>
 80009ee:	e7d6      	b.n	800099e <main+0x19e>
    for (counter = 0; counter < MAX_BMP_FILES; counter++)
 80009f0:	3401      	adds	r4, #1
 80009f2:	2c19      	cmp	r4, #25
 80009f4:	d1e5      	bne.n	80009c2 <main+0x1c2>
    ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/Media", pDirectoryFiles);
 80009f6:	4953      	ldr	r1, [pc, #332]	@ (8000b44 <main+0x344>)
 80009f8:	4854      	ldr	r0, [pc, #336]	@ (8000b4c <main+0x34c>)
 80009fa:	f7ff fe83 	bl	8000704 <Storage_GetDirectoryBitmapFiles>
 80009fe:	b2c4      	uxtb	r4, r0
 8000a00:	f885 406c 	strb.w	r4, [r5, #108]	@ 0x6c
    if (ubNumberOfFiles == 0)
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	f000 80a7 	beq.w	8000b58 <main+0x358>
      sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000a0a:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8000b50 <main+0x350>
      if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0) 
 8000a0e:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 8000b54 <main+0x354>
    counter = 0;
 8000a12:	2600      	movs	r6, #0
    while ((counter) < ubNumberOfFiles)
 8000a14:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
 8000a18:	429e      	cmp	r6, r3
 8000a1a:	d2fa      	bcs.n	8000a12 <main+0x212>
      sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000a1c:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8000a20:	4641      	mov	r1, r8
 8000a22:	a806      	add	r0, sp, #24
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	f005 f801 	bl	8005a2c <siprintf>
      if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0) 
 8000a2a:	4649      	mov	r1, r9
 8000a2c:	a806      	add	r0, sp, #24
 8000a2e:	f7ff feb7 	bl	80007a0 <Storage_CheckBitmapFile>
 8000a32:	4604      	mov	r4, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d1ed      	bne.n	8000a14 <main+0x214>
        sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	a806      	add	r0, sp, #24
 8000a3e:	f004 fff5 	bl	8005a2c <siprintf>
        BSP_LCD_SelectLayer(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 f9e4 	bl	8000e10 <BSP_LCD_SelectLayer>
        Storage_OpenReadFile(uwInternelBuffer, (const char*)str);
 8000a48:	a906      	add	r1, sp, #24
 8000a4a:	6828      	ldr	r0, [r5, #0]
 8000a4c:	f7ff fe12 	bl	8000674 <Storage_OpenReadFile>
        BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);  
 8000a50:	682a      	ldr	r2, [r5, #0]
 8000a52:	4621      	mov	r1, r4
 8000a54:	4620      	mov	r0, r4
 8000a56:	f000 fb07 	bl	8001068 <BSP_LCD_DrawBitmap>
          BSP_LCD_SetTransparency(1, transparency);
 8000a5a:	b2e1      	uxtb	r1, r4
 8000a5c:	2001      	movs	r0, #1
        for (transparency = 0; transparency < 255; (transparency++))
 8000a5e:	3401      	adds	r4, #1
          BSP_LCD_SetTransparency(1, transparency);
 8000a60:	f000 f9dc 	bl	8000e1c <BSP_LCD_SetTransparency>
          HAL_Delay(2);
 8000a64:	2002      	movs	r0, #2
 8000a66:	f000 ffa5 	bl	80019b4 <HAL_Delay>
        for (transparency = 0; transparency < 255; (transparency++))
 8000a6a:	2cff      	cmp	r4, #255	@ 0xff
 8000a6c:	d1f5      	bne.n	8000a5a <main+0x25a>
        while (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 f930 	bl	8000cd4 <BSP_PB_GetState>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d0fa      	beq.n	8000a6e <main+0x26e>
          BSP_LCD_SetTransparency(1, transparency);
 8000a78:	b2e1      	uxtb	r1, r4
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f000 f9ce 	bl	8000e1c <BSP_LCD_SetTransparency>
          HAL_Delay(2);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f000 ff97 	bl	80019b4 <HAL_Delay>
        for (transparency = 255; transparency > 0; transparency--)
 8000a86:	3c01      	subs	r4, #1
 8000a88:	d1f6      	bne.n	8000a78 <main+0x278>
        counter++;
 8000a8a:	1c77      	adds	r7, r6, #1
        BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a8c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a90:	f000 f9ee 	bl	8000e70 <BSP_LCD_Clear>
        sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000a94:	4641      	mov	r1, r8
 8000a96:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8000a9a:	a806      	add	r0, sp, #24
 8000a9c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	f004 ffc3 	bl	8005a2c <siprintf>
        if ((Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0) || (counter < (ubNumberOfFiles)))
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	a806      	add	r0, sp, #24
 8000aaa:	f7ff fe79 	bl	80007a0 <Storage_CheckBitmapFile>
 8000aae:	b118      	cbz	r0, 8000ab8 <main+0x2b8>
 8000ab0:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
 8000ab4:	42bb      	cmp	r3, r7
 8000ab6:	d95f      	bls.n	8000b78 <main+0x378>
          sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000ab8:	44aa      	add	sl, r5
          BSP_LCD_SelectLayer(0);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f9a8 	bl	8000e10 <BSP_LCD_SelectLayer>
          sprintf ((char*)str, "Media/%-11.11s", pDirectoryFiles[counter]);
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	f8da 2008 	ldr.w	r2, [sl, #8]
 8000ac6:	a806      	add	r0, sp, #24
 8000ac8:	f004 ffb0 	bl	8005a2c <siprintf>
          Storage_OpenReadFile(uwInternelBuffer, (const char*)str);
 8000acc:	a906      	add	r1, sp, #24
 8000ace:	6828      	ldr	r0, [r5, #0]
 8000ad0:	f7ff fdd0 	bl	8000674 <Storage_OpenReadFile>
          BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	682a      	ldr	r2, [r5, #0]
 8000ad8:	4608      	mov	r0, r1
 8000ada:	f000 fac5 	bl	8001068 <BSP_LCD_DrawBitmap>
            BSP_LCD_SetTransparency(0, transparency);
 8000ade:	b2e1      	uxtb	r1, r4
 8000ae0:	2000      	movs	r0, #0
          for (transparency = 0; transparency < 255; (transparency++))
 8000ae2:	3401      	adds	r4, #1
            BSP_LCD_SetTransparency(0, transparency);
 8000ae4:	f000 f99a 	bl	8000e1c <BSP_LCD_SetTransparency>
            HAL_Delay(2);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f000 ff63 	bl	80019b4 <HAL_Delay>
          for (transparency = 0; transparency < 255; (transparency++))
 8000aee:	2cff      	cmp	r4, #255	@ 0xff
 8000af0:	d1f5      	bne.n	8000ade <main+0x2de>
          while (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 f8ee 	bl	8000cd4 <BSP_PB_GetState>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d0fa      	beq.n	8000af2 <main+0x2f2>
            BSP_LCD_SetTransparency(0, transparency);
 8000afc:	b2e1      	uxtb	r1, r4
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f98c 	bl	8000e1c <BSP_LCD_SetTransparency>
            HAL_Delay(2);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 ff55 	bl	80019b4 <HAL_Delay>
          for (transparency = 255; transparency > 0; transparency--)
 8000b0a:	3c01      	subs	r4, #1
 8000b0c:	d1f6      	bne.n	8000afc <main+0x2fc>
          counter++;   
 8000b0e:	1cb7      	adds	r7, r6, #2
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000b10:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000b14:	f000 f9ac 	bl	8000e70 <BSP_LCD_Clear>
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b18:	463e      	mov	r6, r7
 8000b1a:	e77b      	b.n	8000a14 <main+0x214>
 8000b1c:	c0260000 	.word	0xc0260000
 8000b20:	20000778 	.word	0x20000778
 8000b24:	03000018 	.word	0x03000018
 8000b28:	0300000c 	.word	0x0300000c
 8000b2c:	01000101 	.word	0x01000101
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	08009ffe 	.word	0x08009ffe
 8000b38:	ffff0000 	.word	0xffff0000
 8000b3c:	2000077c 	.word	0x2000077c
 8000b40:	08009fe4 	.word	0x08009fe4
 8000b44:	20000780 	.word	0x20000780
 8000b48:	0800a028 	.word	0x0800a028
 8000b4c:	0800a042 	.word	0x0800a042
 8000b50:	0800a064 	.word	0x0800a064
 8000b54:	200007e8 	.word	0x200007e8
 8000b58:	3401      	adds	r4, #1
        free(pDirectoryFiles[counter]);
 8000b5a:	f856 0b04 	ldr.w	r0, [r6], #4
 8000b5e:	f004 feaf 	bl	80058c0 <free>
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b62:	2c19      	cmp	r4, #25
 8000b64:	d1f8      	bne.n	8000b58 <main+0x358>
      BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  No Bitmap files...      ");
 8000b66:	490e      	ldr	r1, [pc, #56]	@ (8000ba0 <main+0x3a0>)
 8000b68:	2008      	movs	r0, #8
 8000b6a:	f000 fa6d 	bl	8001048 <BSP_LCD_DisplayStringAtLine>
      while(1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x36e>
  BSP_LED_On(LED1);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f853 	bl	8000c1c <BSP_LED_On>
  while(1)
 8000b76:	e7fe      	b.n	8000b76 <main+0x376>
        else if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 8000b78:	4649      	mov	r1, r9
 8000b7a:	a806      	add	r0, sp, #24
 8000b7c:	f7ff fe10 	bl	80007a0 <Storage_CheckBitmapFile>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1c9      	bne.n	8000b18 <main+0x318>
          BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8000b84:	f5a0 3080 	sub.w	r0, r0, #65536	@ 0x10000
 8000b88:	f000 f94e 	bl	8000e28 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAtLine(7, (uint8_t *) str);        
 8000b8c:	a906      	add	r1, sp, #24
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fa5a 	bl	8001048 <BSP_LCD_DisplayStringAtLine>
          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"    File type not supported. "); 
 8000b94:	4903      	ldr	r1, [pc, #12]	@ (8000ba4 <main+0x3a4>)
 8000b96:	2008      	movs	r0, #8
 8000b98:	f000 fa56 	bl	8001048 <BSP_LCD_DisplayStringAtLine>
          while(1)
 8000b9c:	e7fe      	b.n	8000b9c <main+0x39c>
 8000b9e:	bf00      	nop
 8000ba0:	0800a049 	.word	0x0800a049
 8000ba4:	0800a073 	.word	0x0800a073

08000ba8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000ba8:	4770      	bx	lr

08000baa <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler>

08000bac <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler>

08000bae <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler>

08000bb0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler>

08000bb2 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000bb8:	f000 beea 	b.w	8001990 <HAL_IncTick>

08000bbc <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_SDMMC_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 8000bbc:	4801      	ldr	r0, [pc, #4]	@ (8000bc4 <SDMMC1_IRQHandler+0x8>)
 8000bbe:	f002 bed5 	b.w	800396c <HAL_SD_IRQHandler>
 8000bc2:	bf00      	nop
 8000bc4:	20000ba4 	.word	0x20000ba4

08000bc8 <DMA2_Stream3_IRQHandler>:
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8000bc8:	4b01      	ldr	r3, [pc, #4]	@ (8000bd0 <DMA2_Stream3_IRQHandler+0x8>)
 8000bca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000bcc:	f001 b884 	b.w	8001cd8 <HAL_DMA_IRQHandler>
 8000bd0:	20000ba4 	.word	0x20000ba4

08000bd4 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000bd4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8000bd6:	4604      	mov	r4, r0
{
 8000bd8:	b087      	sub	sp, #28
  if (Led == LED1)
 8000bda:	b9c8      	cbnz	r0, 8000c10 <BSP_LED_Init+0x3c>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <BSP_LED_Init+0x40>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2502      	movs	r5, #2
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000be0:	a901      	add	r1, sp, #4
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8000be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8000bfc:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000c02:	f001 fa71 	bl	80020e8 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8000c06:	4622      	mov	r2, r4
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <BSP_LED_Init+0x44>)
 8000c0c:	f001 fb56 	bl	80022bc <HAL_GPIO_WritePin>
  }
}
 8000c10:	b007      	add	sp, #28
 8000c12:	bd30      	pop	{r4, r5, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40022000 	.word	0x40022000

08000c1c <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8000c1c:	b920      	cbnz	r0, 8000c28 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2102      	movs	r1, #2
 8000c22:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <BSP_LED_On+0x10>)
 8000c24:	f001 bb4a 	b.w	80022bc <HAL_GPIO_WritePin>
  }
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c30:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <BSP_PB_Init+0x98>)
 8000c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	4604      	mov	r4, r0
 8000c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c46:	b990      	cbnz	r0, 8000c6e <BSP_PB_Init+0x3e>
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c4c:	b9b9      	cbnz	r1, 8000c7e <BSP_PB_Init+0x4e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <BSP_PB_Init+0x9c>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000c50:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c52:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c56:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000c5a:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c5c:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000c5e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <BSP_PB_Init+0xa0>)
 8000c62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000c66:	f001 fa3f 	bl	80020e8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8000c6a:	b008      	add	sp, #32
 8000c6c:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	d102      	bne.n	8000c78 <BSP_PB_Init+0x48>
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	9b01      	ldr	r3, [sp, #4]
 8000c76:	e7e9      	b.n	8000c4c <BSP_PB_Init+0x1c>
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	9b02      	ldr	r3, [sp, #8]
 8000c7c:	e7e6      	b.n	8000c4c <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000c7e:	2901      	cmp	r1, #1
 8000c80:	d1f3      	bne.n	8000c6a <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c82:	4d12      	ldr	r5, [pc, #72]	@ (8000ccc <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000c84:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c86:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c88:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000c8c:	42b4      	cmp	r4, r6
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000c8e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000c92:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000c94:	f04f 0302 	mov.w	r3, #2
 8000c98:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000c9c:	bf0c      	ite	eq
 8000c9e:	f44f 1388 	moveq.w	r3, #1114112	@ 0x110000
 8000ca2:	f44f 1304 	movne.w	r3, #2162688	@ 0x210000
 8000ca6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <BSP_PB_Init+0xa0>)
 8000caa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000cae:	f001 fa1b 	bl	80020e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000cb2:	f995 4006 	ldrsb.w	r4, [r5, #6]
 8000cb6:	4632      	mov	r2, r6
 8000cb8:	210f      	movs	r1, #15
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 fe9e 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 fecd 	bl	8001a60 <HAL_NVIC_EnableIRQ>
}
 8000cc6:	e7d0      	b.n	8000c6a <BSP_PB_Init+0x3a>
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	0800622c 	.word	0x0800622c
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000cd4:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000cd6:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <BSP_PB_GetState+0x14>)
 8000cd8:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <BSP_PB_GetState+0x18>)
 8000cde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000ce2:	f001 fae5 	bl	80022b0 <HAL_GPIO_ReadPin>
}
 8000ce6:	bd08      	pop	{r3, pc}
 8000ce8:	0800622c 	.word	0x0800622c
 8000cec:	20000000 	.word	0x20000000

08000cf0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000cf0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000cf4:	4c1a      	ldr	r4, [pc, #104]	@ (8000d60 <LL_FillBuffer+0x70>)
{
 8000cf6:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000cf8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 8000cfc:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000cfe:	2234      	movs	r2, #52	@ 0x34
{
 8000d00:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000d02:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000d04:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d06:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 8000d0a:	460e      	mov	r6, r1
 8000d0c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d10:	fb02 4303 	mla	r3, r2, r3, r4
 8000d14:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8000d18:	1eab      	subs	r3, r5, #2
 8000d1a:	425d      	negs	r5, r3
 8000d1c:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000d1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000d20:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000d22:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <LL_FillBuffer+0x74>)
 8000d26:	60a5      	str	r5, [r4, #8]
 8000d28:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000d2a:	f001 f8d6 	bl	8001eda <HAL_DMA2D_Init>
 8000d2e:	b9a0      	cbnz	r0, 8000d5a <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000d30:	4649      	mov	r1, r9
 8000d32:	4620      	mov	r0, r4
 8000d34:	f001 f992 	bl	800205c <HAL_DMA2D_ConfigLayer>
 8000d38:	b978      	cbnz	r0, 8000d5a <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4632      	mov	r2, r6
 8000d3e:	4651      	mov	r1, sl
 8000d40:	4620      	mov	r0, r4
 8000d42:	f8cd 8000 	str.w	r8, [sp]
 8000d46:	f001 f8f2 	bl	8001f2e <HAL_DMA2D_Start>
 8000d4a:	b930      	cbnz	r0, 8000d5a <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000d4c:	210a      	movs	r1, #10
 8000d4e:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000d50:	b002      	add	sp, #8
 8000d52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000d56:	f001 b904 	b.w	8001f62 <HAL_DMA2D_PollForTransfer>
}
 8000d5a:	b002      	add	sp, #8
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	20000a1c 	.word	0x20000a1c
 8000d64:	4002b000 	.word	0x4002b000

08000d68 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <BSP_LCD_GetXSize+0x14>)
 8000d6a:	2134      	movs	r1, #52	@ 0x34
 8000d6c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000d70:	fb01 3302 	mla	r3, r1, r2, r3
}
 8000d74:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000a1c 	.word	0x20000a1c

08000d80 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <BSP_LCD_GetYSize+0x14>)
 8000d82:	2134      	movs	r1, #52	@ 0x34
 8000d84:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000d88:	fb01 3302 	mla	r3, r1, r2, r3
}
 8000d8c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000a1c 	.word	0x20000a1c

08000d98 <BSP_LCD_LayerDefaultInit>:
{     
 8000d98:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8000d9a:	2400      	movs	r4, #0
{     
 8000d9c:	b08e      	sub	sp, #56	@ 0x38
 8000d9e:	460e      	mov	r6, r1
 8000da0:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8000da2:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8000da4:	f7ff ffe0 	bl	8000d68 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8000da8:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000dac:	f7ff ffe8 	bl	8000d80 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8000db0:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000db2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 8000db6:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 8000dba:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8000dbe:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 8000dc0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000dc4:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000dc8:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000dca:	4c0f      	ldr	r4, [pc, #60]	@ (8000e08 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000dcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000dd0:	f7ff ffca 	bl	8000d68 <BSP_LCD_GetXSize>
 8000dd4:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000dd6:	f7ff ffd3 	bl	8000d80 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000dda:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000ddc:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000dde:	a901      	add	r1, sp, #4
 8000de0:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8000de4:	f001 fb5c 	bl	80024a0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000de8:	230c      	movs	r3, #12
 8000dea:	fb03 4005 	mla	r0, r3, r5, r4
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <BSP_LCD_LayerDefaultInit+0x74>)
 8000df8:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000dfc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8000e00:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 8000e04:	b00e      	add	sp, #56	@ 0x38
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	20000a1c 	.word	0x20000a1c
 8000e0c:	20000018 	.word	0x20000018

08000e10 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000e10:	4b01      	ldr	r3, [pc, #4]	@ (8000e18 <BSP_LCD_SelectLayer+0x8>)
 8000e12:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 8000e16:	4770      	bx	lr
 8000e18:	20000a1c 	.word	0x20000a1c

08000e1c <BSP_LCD_SetTransparency>:
{    
 8000e1c:	4602      	mov	r2, r0
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8000e1e:	4801      	ldr	r0, [pc, #4]	@ (8000e24 <BSP_LCD_SetTransparency+0x8>)
 8000e20:	f001 bb6b 	b.w	80024fa <HAL_LTDC_SetAlpha>
 8000e24:	20000a5c 	.word	0x20000a5c

08000e28 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <BSP_LCD_SetTextColor+0x14>)
 8000e2a:	210c      	movs	r1, #12
 8000e2c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000e30:	fb01 3302 	mla	r3, r1, r2, r3
 8000e34:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000a1c 	.word	0x20000a1c

08000e40 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <BSP_LCD_SetFont+0x14>)
 8000e42:	210c      	movs	r1, #12
 8000e44:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000e48:	fb01 3302 	mla	r3, r1, r2, r3
 8000e4c:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000a1c 	.word	0x20000a1c

08000e58 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <BSP_LCD_GetFont+0x14>)
 8000e5a:	210c      	movs	r1, #12
 8000e5c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000e60:	fb01 3302 	mla	r3, r1, r2, r3
}
 8000e64:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000a1c 	.word	0x20000a1c

08000e70 <BSP_LCD_Clear>:
{ 
 8000e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000e72:	4c0c      	ldr	r4, [pc, #48]	@ (8000ea4 <BSP_LCD_Clear+0x34>)
{ 
 8000e74:	4606      	mov	r6, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000e76:	f7ff ff77 	bl	8000d68 <BSP_LCD_GetXSize>
 8000e7a:	4605      	mov	r5, r0
 8000e7c:	f8d4 70e8 	ldr.w	r7, [r4, #232]	@ 0xe8
 8000e80:	f7ff ff7e 	bl	8000d80 <BSP_LCD_GetYSize>
 8000e84:	2234      	movs	r2, #52	@ 0x34
 8000e86:	4603      	mov	r3, r0
 8000e88:	9601      	str	r6, [sp, #4]
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	fb02 4407 	mla	r4, r2, r7, r4
 8000e90:	2200      	movs	r2, #0
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	462a      	mov	r2, r5
 8000e96:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8000e9a:	f7ff ff29 	bl	8000cf0 <LL_FillBuffer>
}
 8000e9e:	b003      	add	sp, #12
 8000ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000a1c 	.word	0x20000a1c

08000ea8 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <BSP_LCD_DrawPixel+0x3c>)
{
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	460e      	mov	r6, r1
 8000eb0:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000eb2:	2134      	movs	r1, #52	@ 0x34
 8000eb4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 8000eb8:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000eba:	fb01 3302 	mla	r3, r1, r2, r3
 8000ebe:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000ec2:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 8000ec6:	f7ff ff4f 	bl	8000d68 <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000eca:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000ece:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000ed2:	d104      	bne.n	8000ede <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000ed4:	b2a4      	uxth	r4, r4
 8000ed6:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 8000eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000ede:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 8000ee2:	e7fa      	b.n	8000eda <BSP_LCD_DrawPixel+0x32>
 8000ee4:	20000a1c 	.word	0x20000a1c

08000ee8 <BSP_LCD_DisplayChar>:
{
 8000ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eec:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000eee:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8000ef0:	f04f 0800 	mov.w	r8, #0
{
 8000ef4:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000ef8:	4928      	ldr	r1, [pc, #160]	@ (8000f9c <BSP_LCD_DisplayChar+0xb4>)
 8000efa:	200c      	movs	r0, #12
 8000efc:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 8000f00:	fb00 110b 	mla	r1, r0, fp, r1
 8000f04:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f08:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8000f0c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8000f10:	f109 0607 	add.w	r6, r9, #7
 8000f14:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000f16:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000f1a:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8000f1c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8000f20:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8000f24:	f109 32ff 	add.w	r2, r9, #4294967295
 8000f28:	fa52 f380 	uxtab	r3, r2, r0
 8000f2c:	9303      	str	r3, [sp, #12]
 8000f2e:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8000f30:	45d0      	cmp	r8, sl
 8000f32:	eb03 0208 	add.w	r2, r3, r8
 8000f36:	b293      	uxth	r3, r2
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	d302      	bcc.n	8000f42 <BSP_LCD_DisplayChar+0x5a>
}
 8000f3c:	b005      	add	sp, #20
 8000f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000f42:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8000f44:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8000f46:	d004      	beq.n	8000f52 <BSP_LCD_DisplayChar+0x6a>
 8000f48:	2e02      	cmp	r6, #2
 8000f4a:	d109      	bne.n	8000f60 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8000f4c:	882c      	ldrh	r4, [r5, #0]
 8000f4e:	ba64      	rev16	r4, r4
 8000f50:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8000f52:	2700      	movs	r7, #0
 8000f54:	45b9      	cmp	r9, r7
 8000f56:	d80a      	bhi.n	8000f6e <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8000f58:	f108 0801 	add.w	r8, r8, #1
 8000f5c:	4435      	add	r5, r6
 8000f5e:	e7e6      	b.n	8000f2e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000f60:	786a      	ldrb	r2, [r5, #1]
 8000f62:	0424      	lsls	r4, r4, #16
 8000f64:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8000f68:	78aa      	ldrb	r2, [r5, #2]
 8000f6a:	4314      	orrs	r4, r2
      break;
 8000f6c:	e7f1      	b.n	8000f52 <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f6e:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8000f70:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f72:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8000f74:	9b03      	ldr	r3, [sp, #12]
 8000f76:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <BSP_LCD_DisplayChar+0xb4>)
 8000f7a:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8000f7c:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8000f7e:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000f80:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 8000f82:	4222      	tst	r2, r4
 8000f84:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000f88:	fb02 320b 	mla	r2, r2, fp, r3
 8000f8c:	bf14      	ite	ne
 8000f8e:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000f92:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 8000f96:	f7ff ff87 	bl	8000ea8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000f9a:	e7db      	b.n	8000f54 <BSP_LCD_DisplayChar+0x6c>
 8000f9c:	20000a1c 	.word	0x20000a1c

08000fa0 <BSP_LCD_DisplayStringAt>:
{
 8000fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa4:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 8000fa6:	4610      	mov	r0, r2
{
 8000fa8:	469a      	mov	sl, r3
 8000faa:	460e      	mov	r6, r1
 8000fac:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8000fae:	f7ff f92f 	bl	8000210 <strlen>
 8000fb2:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000fb4:	f7ff fed8 	bl	8000d68 <BSP_LCD_GetXSize>
 8000fb8:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <BSP_LCD_DisplayStringAt+0xa4>)
 8000fba:	210c      	movs	r1, #12
  switch (Mode)
 8000fbc:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000fc0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000fc4:	fb01 3302 	mla	r3, r1, r2, r3
 8000fc8:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 8000fd2:	d01e      	beq.n	8001012 <BSP_LCD_DisplayStringAt+0x72>
 8000fd4:	f1ba 0f02 	cmp.w	sl, #2
 8000fd8:	d023      	beq.n	8001022 <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000fda:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 8000fde:	2400      	movs	r4, #0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bfd8      	it	le
 8000fe4:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000fe8:	f7ff febe 	bl	8000d68 <BSP_LCD_GetXSize>
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	b2a2      	uxth	r2, r4
 8000ff0:	f815 9004 	ldrb.w	r9, [r5, r4]
 8000ff4:	3401      	adds	r4, #1
 8000ff6:	fb03 0012 	mls	r0, r3, r2, r0
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	4298      	cmp	r0, r3
 8000ffe:	bf34      	ite	cc
 8001000:	2000      	movcc	r0, #0
 8001002:	2001      	movcs	r0, #1
 8001004:	f1b9 0f00 	cmp.w	r9, #0
 8001008:	bf08      	it	eq
 800100a:	2000      	moveq	r0, #0
 800100c:	b980      	cbnz	r0, 8001030 <BSP_LCD_DisplayStringAt+0x90>
}
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001012:	eba4 0409 	sub.w	r4, r4, r9
 8001016:	435c      	muls	r4, r3
 8001018:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800101c:	fa1f f880 	uxth.w	r8, r0
      break;
 8001020:	e7db      	b.n	8000fda <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001022:	eba4 0409 	sub.w	r4, r4, r9
 8001026:	fb14 f403 	smulbb	r4, r4, r3
 800102a:	eba4 0008 	sub.w	r0, r4, r8
 800102e:	e7f5      	b.n	800101c <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001030:	4640      	mov	r0, r8
 8001032:	464a      	mov	r2, r9
 8001034:	4631      	mov	r1, r6
 8001036:	f7ff ff57 	bl	8000ee8 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	4443      	add	r3, r8
 800103e:	fa1f f883 	uxth.w	r8, r3
    i++;
 8001042:	e7d1      	b.n	8000fe8 <BSP_LCD_DisplayStringAt+0x48>
 8001044:	20000a1c 	.word	0x20000a1c

08001048 <BSP_LCD_DisplayStringAtLine>:
{  
 8001048:	b570      	push	{r4, r5, r6, lr}
 800104a:	460c      	mov	r4, r1
 800104c:	4605      	mov	r5, r0
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800104e:	f7ff ff03 	bl	8000e58 <BSP_LCD_GetFont>
 8001052:	88c3      	ldrh	r3, [r0, #6]
 8001054:	4622      	mov	r2, r4
 8001056:	2000      	movs	r0, #0
 8001058:	fb13 f105 	smulbb	r1, r3, r5
 800105c:	2303      	movs	r3, #3
 800105e:	b289      	uxth	r1, r1
}
 8001060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001064:	f7ff bf9c 	b.w	8000fa0 <BSP_LCD_DisplayStringAt>

08001068 <BSP_LCD_DrawBitmap>:
{
 8001068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800106c:	4d32      	ldr	r5, [pc, #200]	@ (8001138 <BSP_LCD_DrawBitmap+0xd0>)
{
 800106e:	4614      	mov	r4, r2
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8001070:	8b97      	ldrh	r7, [r2, #28]
{
 8001072:	b085      	sub	sp, #20
 8001074:	f8d2 b00a 	ldr.w	fp, [r2, #10]
 8001078:	4681      	mov	r9, r0
 800107a:	f8d2 a012 	ldr.w	sl, [r2, #18]
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800107e:	f8d2 8016 	ldr.w	r8, [r2, #22]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001082:	2234      	movs	r2, #52	@ 0x34
 8001084:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
{
 8001088:	9103      	str	r1, [sp, #12]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800108a:	fb02 5303 	mla	r3, r2, r3, r5
 800108e:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8001092:	f7ff fe69 	bl	8000d68 <BSP_LCD_GetXSize>
 8001096:	9903      	ldr	r1, [sp, #12]
  if ((bit_pixel/8) == 4)
 8001098:	f1a7 0320 	sub.w	r3, r7, #32
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800109c:	fb01 9900 	mla	r9, r1, r0, r9
  if ((bit_pixel/8) == 4)
 80010a0:	2b07      	cmp	r3, #7
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80010a2:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  if ((bit_pixel/8) == 4)
 80010a6:	d919      	bls.n	80010dc <BSP_LCD_DrawBitmap+0x74>
  else if ((bit_pixel/8) == 2)
 80010a8:	f1a7 0310 	sub.w	r3, r7, #16
    input_color_mode = CM_RGB565;   
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	bf8c      	ite	hi
 80010b0:	f04f 0901 	movhi.w	r9, #1
 80010b4:	f04f 0902 	movls.w	r9, #2
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80010b8:	08ff      	lsrs	r7, r7, #3
 80010ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80010be:	fb0a f707 	mul.w	r7, sl, r7
 80010c2:	fb07 bb03 	mla	fp, r7, r3, fp
    pbmp -= width*(bit_pixel/8);
 80010c6:	427b      	negs	r3, r7
  for(index=0; index < height; index++)
 80010c8:	2700      	movs	r7, #0
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80010ca:	445c      	add	r4, fp
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
  
  hDma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010cc:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8001138 <BSP_LCD_DrawBitmap+0xd0>
    pbmp -= width*(bit_pixel/8);
 80010d0:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
 80010d2:	45b8      	cmp	r8, r7
 80010d4:	d105      	bne.n	80010e2 <BSP_LCD_DrawBitmap+0x7a>
}
 80010d6:	b005      	add	sp, #20
 80010d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = CM_ARGB8888;
 80010dc:	f04f 0900 	mov.w	r9, #0
 80010e0:	e7ea      	b.n	80010b8 <BSP_LCD_DrawBitmap+0x50>
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010e8:	4658      	mov	r0, fp
  hDma2dHandler.Init.OutputOffset = 0;     
 80010ea:	60eb      	str	r3, [r5, #12]
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010ec:	632b      	str	r3, [r5, #48]	@ 0x30
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80010ee:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80010f2:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80010f6:	22ff      	movs	r2, #255	@ 0xff
  hDma2dHandler.Instance = DMA2D; 
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <BSP_LCD_DrawBitmap+0xd4>)
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80010fa:	636a      	str	r2, [r5, #52]	@ 0x34
  hDma2dHandler.Instance = DMA2D; 
 80010fc:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010fe:	f000 feec 	bl	8001eda <HAL_DMA2D_Init>
 8001102:	b988      	cbnz	r0, 8001128 <BSP_LCD_DrawBitmap+0xc0>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8001104:	2101      	movs	r1, #1
 8001106:	4658      	mov	r0, fp
 8001108:	f000 ffa8 	bl	800205c <HAL_DMA2D_ConfigLayer>
 800110c:	b960      	cbnz	r0, 8001128 <BSP_LCD_DrawBitmap+0xc0>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800110e:	2301      	movs	r3, #1
 8001110:	4632      	mov	r2, r6
 8001112:	4621      	mov	r1, r4
 8001114:	4808      	ldr	r0, [pc, #32]	@ (8001138 <BSP_LCD_DrawBitmap+0xd0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	4653      	mov	r3, sl
 800111a:	f000 ff08 	bl	8001f2e <HAL_DMA2D_Start>
 800111e:	b918      	cbnz	r0, 8001128 <BSP_LCD_DrawBitmap+0xc0>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001120:	210a      	movs	r1, #10
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <BSP_LCD_DrawBitmap+0xd0>)
 8001124:	f000 ff1d 	bl	8001f62 <HAL_DMA2D_PollForTransfer>
    address+=  (BSP_LCD_GetXSize()*4);
 8001128:	f7ff fe1e 	bl	8000d68 <BSP_LCD_GetXSize>
    pbmp -= width*(bit_pixel/8);
 800112c:	9b03      	ldr	r3, [sp, #12]
    address+=  (BSP_LCD_GetXSize()*4);
 800112e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
  for(index=0; index < height; index++)
 8001132:	3701      	adds	r7, #1
    pbmp -= width*(bit_pixel/8);
 8001134:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 8001136:	e7cc      	b.n	80010d2 <BSP_LCD_DrawBitmap+0x6a>
 8001138:	20000a1c 	.word	0x20000a1c
 800113c:	4002b000 	.word	0x4002b000

08001140 <BSP_LCD_DisplayOn>:
{
 8001140:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001144:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800114a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114c:	6993      	ldr	r3, [r2, #24]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001154:	2201      	movs	r2, #1
 8001156:	f001 f8b1 	bl	80022bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800115a:	2201      	movs	r2, #1
 800115c:	2108      	movs	r1, #8
 800115e:	4804      	ldr	r0, [pc, #16]	@ (8001170 <BSP_LCD_DisplayOn+0x30>)
}
 8001160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001164:	f001 b8aa 	b.w	80022bc <HAL_GPIO_WritePin>
 8001168:	20000a1c 	.word	0x20000a1c
 800116c:	40022000 	.word	0x40022000
 8001170:	40022800 	.word	0x40022800

08001174 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001174:	4b4b      	ldr	r3, [pc, #300]	@ (80012a4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001176:	484c      	ldr	r0, [pc, #304]	@ (80012a8 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800117a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 800117e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001180:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001182:	645a      	str	r2, [r3, #68]	@ 0x44
 8001184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001186:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001188:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800118a:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 800118c:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001190:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001194:	4e45      	ldr	r6, [pc, #276]	@ (80012ac <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800119a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800119c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80011a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011a4:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ae:	f042 0210 	orr.w	r2, r2, #16
 80011b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80011b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011b6:	f002 0210 	and.w	r2, r2, #16
 80011ba:	9202      	str	r2, [sp, #8]
 80011bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80011cc:	9203      	str	r2, [sp, #12]
 80011ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011da:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80011de:	9204      	str	r2, [sp, #16]
 80011e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ec:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80011f0:	9205      	str	r2, [sp, #20]
 80011f2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80011fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80011fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011fe:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001202:	9206      	str	r2, [sp, #24]
 8001204:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800120c:	631a      	str	r2, [r3, #48]	@ 0x30
 800120e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001210:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001214:	9207      	str	r2, [sp, #28]
 8001216:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800121a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800121e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001222:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001228:	9308      	str	r3, [sp, #32]
 800122a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800122c:	2310      	movs	r3, #16
 800122e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001234:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001238:	f000 ff56 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800123c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800123e:	a909      	add	r1, sp, #36	@ 0x24
 8001240:	481b      	ldr	r0, [pc, #108]	@ (80012b0 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001242:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001244:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001248:	f000 ff4e 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800124c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001250:	a909      	add	r1, sp, #36	@ 0x24
 8001252:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001254:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001256:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800125a:	f000 ff45 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800125e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001262:	a909      	add	r1, sp, #36	@ 0x24
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001266:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001268:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800126c:	f000 ff3c 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001270:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001272:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001274:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001276:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001278:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800127c:	4c0e      	ldr	r4, [pc, #56]	@ (80012b8 <BSP_LCD_MspInit+0x144>)
 800127e:	4620      	mov	r0, r4
 8001280:	f000 ff32 	bl	80020e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001284:	a909      	add	r1, sp, #36	@ 0x24
 8001286:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001288:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800128a:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800128c:	f000 ff2c 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001290:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001292:	a909      	add	r1, sp, #36	@ 0x24
 8001294:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001296:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800129a:	f000 ff25 	bl	80020e8 <HAL_GPIO_Init>
}
 800129e:	b00f      	add	sp, #60	@ 0x3c
 80012a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40022000 	.word	0x40022000
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40022400 	.word	0x40022400
 80012b8:	40022800 	.word	0x40022800

080012bc <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012bc:	4807      	ldr	r0, [pc, #28]	@ (80012dc <BSP_LCD_ClockConfig+0x20>)
 80012be:	2308      	movs	r3, #8
 80012c0:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80012c4:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80012c6:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80012ca:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80012cc:	2305      	movs	r3, #5
 80012ce:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80012d6:	f001 bbf1 	b.w	8002abc <HAL_RCCEx_PeriphCLKConfig>
 80012da:	bf00      	nop
 80012dc:	20000a1c 	.word	0x20000a1c

080012e0 <BSP_LCD_Init>:
{    
 80012e0:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80012e2:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80012e4:	4c24      	ldr	r4, [pc, #144]	@ (8001378 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80012e6:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80012e8:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80012ea:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80012ee:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80012f2:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80012f6:	230b      	movs	r3, #11
 80012f8:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80012fc:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001300:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001302:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001306:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800130a:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800130e:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001312:	f7ff ffd3 	bl	80012bc <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001316:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 800131a:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 800131e:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001320:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 800132a:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800132e:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001332:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <BSP_LCD_Init+0x9c>)
 8001338:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800133c:	f001 f8fd 	bl	800253a <HAL_LTDC_GetState>
 8001340:	4601      	mov	r1, r0
 8001342:	b918      	cbnz	r0, 800134c <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001344:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8001348:	f7ff ff14 	bl	8001174 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <BSP_LCD_Init+0xa0>)
 800134e:	f001 f83b 	bl	80023c8 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001358:	480a      	ldr	r0, [pc, #40]	@ (8001384 <BSP_LCD_Init+0xa4>)
 800135a:	f000 ffaf 	bl	80022bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2108      	movs	r1, #8
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <BSP_LCD_Init+0xa8>)
 8001364:	f000 ffaa 	bl	80022bc <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001368:	f000 fa78 	bl	800185c <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <BSP_LCD_Init+0xac>)
 800136e:	f7ff fd67 	bl	8000e40 <BSP_LCD_SetFont>
}
 8001372:	2000      	movs	r0, #0
 8001374:	bd10      	pop	{r4, pc}
 8001376:	bf00      	nop
 8001378:	20000a1c 	.word	0x20000a1c
 800137c:	40016800 	.word	0x40016800
 8001380:	20000a5c 	.word	0x20000a5c
 8001384:	40022000 	.word	0x40022000
 8001388:	40022800 	.word	0x40022800
 800138c:	20000018 	.word	0x20000018

08001390 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8001390:	2301      	movs	r3, #1
{
 8001392:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	4807      	ldr	r0, [pc, #28]	@ (80013b8 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 800139a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800139e:	f000 ff87 	bl	80022b0 <HAL_GPIO_ReadPin>
 80013a2:	2801      	cmp	r0, #1
 80013a4:	d102      	bne.n	80013ac <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 80013ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80013b0:	b003      	add	sp, #12
 80013b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b6:	bf00      	nop
 80013b8:	40020800 	.word	0x40020800

080013bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80013bc:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	460a      	mov	r2, r1
 80013c4:	4601      	mov	r1, r0
 80013c6:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <BSP_SD_ReadBlocks+0x1c>)
 80013c8:	f001 fe6a 	bl	80030a0 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80013cc:	3800      	subs	r0, #0
 80013ce:	bf18      	it	ne
 80013d0:	2001      	movne	r0, #1
 80013d2:	b003      	add	sp, #12
 80013d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013d8:	20000ba4 	.word	0x20000ba4

080013dc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80013dc:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4613      	mov	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	4601      	mov	r1, r0
 80013e6:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <BSP_SD_WriteBlocks+0x1c>)
 80013e8:	f001 ff52 	bl	8003290 <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 80013ec:	3800      	subs	r0, #0
 80013ee:	bf18      	it	ne
 80013f0:	2001      	movne	r0, #1
 80013f2:	b003      	add	sp, #12
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f8:	20000ba4 	.word	0x20000ba4

080013fc <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <BSP_SD_MspInit+0x164>)
 80013fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
{
 8001404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001408:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800140a:	645a      	str	r2, [r3, #68]	@ 0x44
 800140c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800140e:	f04f 0803 	mov.w	r8, #3
{
 8001412:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8001414:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001418:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800141c:	a905      	add	r1, sp, #20
 800141e:	4851      	ldr	r0, [pc, #324]	@ (8001564 <BSP_SD_MspInit+0x168>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001420:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001422:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8001424:	f44f 4b80 	mov.w	fp, #16384	@ 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001428:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800142a:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 800142e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8001430:	4c4d      	ldr	r4, [pc, #308]	@ (8001568 <BSP_SD_MspInit+0x16c>)
  __DMAx_TxRx_CLK_ENABLE();
 8001432:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8001436:	4627      	mov	r7, r4
  __DMAx_TxRx_CLK_ENABLE();
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30
 800143a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143c:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8001440:	9202      	str	r2, [sp, #8]
 8001442:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	631a      	str	r2, [r3, #48]	@ 0x30
 800144c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800144e:	f002 0204 	and.w	r2, r2, #4
 8001452:	9203      	str	r2, [sp, #12]
 8001454:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800145e:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	9304      	str	r3, [sp, #16]
 8001468:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8001470:	230c      	movs	r3, #12
 8001472:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001476:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800147a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800147c:	f000 fe34 	bl	80020e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001480:	a905      	add	r1, sp, #20
 8001482:	483a      	ldr	r0, [pc, #232]	@ (800156c <BSP_SD_MspInit+0x170>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8001484:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001488:	f000 fe2e 	bl	80020e8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	210e      	movs	r1, #14
 8001490:	2031      	movs	r0, #49	@ 0x31
 8001492:	f000 fab3 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001496:	2031      	movs	r0, #49	@ 0x31
 8001498:	f000 fae2 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800149c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80014a4:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80014a8:	4831      	ldr	r0, [pc, #196]	@ (8001570 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80014aa:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80014ae:	f847 0f84 	str.w	r0, [r7, #132]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80014b2:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80014b4:	642f      	str	r7, [r5, #64]	@ 0x40
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80014b6:	f8c4 80ac 	str.w	r8, [r4, #172]	@ 0xac
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80014ba:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014be:	e9c4 2325 	strd	r2, r3, [r4, #148]	@ 0x94
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80014c2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80014c6:	e9c4 1622 	strd	r1, r6, [r4, #136]	@ 0x88
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80014ca:	e9c4 3929 	strd	r3, r9, [r4, #164]	@ 0xa4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80014ce:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80014d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80014d6:	e9c4 ba27 	strd	fp, sl, [r4, #156]	@ 0x9c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80014da:	e9c4 132c 	strd	r1, r3, [r4, #176]	@ 0xb0
  HAL_DMA_DeInit(&dma_rx_handle);
 80014de:	f000 fbbf 	bl	8001c60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80014e2:	4638      	mov	r0, r7
 80014e4:	f000 fb3e 	bl	8001b64 <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80014f0:	f44f 0700 	mov.w	r7, #8388608	@ 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80014f4:	2140      	movs	r1, #64	@ 0x40
 80014f6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80014fa:	f8c4 60f0 	str.w	r6, [r4, #240]	@ 0xf0
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80014fe:	f8c4 810c 	str.w	r8, [r4, #268]	@ 0x10c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8001502:	f8c4 511c 	str.w	r5, [r4, #284]	@ 0x11c
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001506:	e9c4 233d 	strd	r2, r3, [r4, #244]	@ 0xf4
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800150a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800150e:	e9c4 3941 	strd	r3, r9, [r4, #260]	@ 0x104
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001512:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001516:	e9c4 7344 	strd	r7, r3, [r4, #272]	@ 0x110
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <BSP_SD_MspInit+0x178>)
 800151c:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800151e:	e9c4 013a 	strd	r0, r1, [r4, #232]	@ 0xe8
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8001522:	f847 3fe4 	str.w	r3, [r7, #228]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8001526:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8001528:	63ef      	str	r7, [r5, #60]	@ 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 800152a:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	@ 0xfc
  HAL_DMA_DeInit(&dma_tx_handle);
 800152e:	f000 fb97 	bl	8001c60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8001532:	4638      	mov	r0, r7
 8001534:	f000 fb16 	bl	8001b64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8001538:	4632      	mov	r2, r6
 800153a:	210f      	movs	r1, #15
 800153c:	203b      	movs	r0, #59	@ 0x3b
 800153e:	f000 fa5d 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8001542:	203b      	movs	r0, #59	@ 0x3b
 8001544:	f000 fa8c 	bl	8001a60 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8001548:	4632      	mov	r2, r6
 800154a:	210f      	movs	r1, #15
 800154c:	2045      	movs	r0, #69	@ 0x45
 800154e:	f000 fa55 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8001552:	2045      	movs	r0, #69	@ 0x45
 8001554:	f000 fa84 	bl	8001a60 <HAL_NVIC_EnableIRQ>
}
 8001558:	b00b      	add	sp, #44	@ 0x2c
 800155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40020800 	.word	0x40020800
 8001568:	20000ba4 	.word	0x20000ba4
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40026458 	.word	0x40026458
 8001574:	400264a0 	.word	0x400264a0

08001578 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800157c:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8001580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001582:	f042 0204 	orr.w	r2, r2, #4
 8001586:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80015a2:	a901      	add	r1, sp, #4
 80015a4:	f000 fda0 	bl	80020e8 <HAL_GPIO_Init>
}
 80015a8:	b007      	add	sp, #28
 80015aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020800 	.word	0x40020800

080015b8 <BSP_SD_Init>:
{ 
 80015b8:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 80015ba:	4c13      	ldr	r4, [pc, #76]	@ (8001608 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80015bc:	2600      	movs	r6, #0
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80015c0:	4631      	mov	r1, r6
 80015c2:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80015c4:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80015c6:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015ca:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015ce:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80015d2:	f7ff ffd1 	bl	8001578 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80015d6:	f7ff fedb 	bl	8001390 <BSP_SD_IsDetected>
 80015da:	2801      	cmp	r0, #1
 80015dc:	4605      	mov	r5, r0
 80015de:	d111      	bne.n	8001604 <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 80015e0:	4620      	mov	r0, r4
 80015e2:	4631      	mov	r1, r6
 80015e4:	f7ff ff0a 	bl	80013fc <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80015e8:	4620      	mov	r0, r4
 80015ea:	f002 f8d3 	bl	8003794 <HAL_SD_Init>
 80015ee:	b938      	cbnz	r0, 8001600 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80015f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015f4:	4620      	mov	r0, r4
 80015f6:	f002 f8fb 	bl	80037f0 <HAL_SD_ConfigWideBusOperation>
 80015fa:	1b85      	subs	r5, r0, r6
 80015fc:	bf18      	it	ne
 80015fe:	2501      	movne	r5, #1
}
 8001600:	4628      	mov	r0, r5
 8001602:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8001604:	2502      	movs	r5, #2
 8001606:	e7fb      	b.n	8001600 <BSP_SD_Init+0x48>
 8001608:	20000ba4 	.word	0x20000ba4
 800160c:	40012c00 	.word	0x40012c00

08001610 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8001610:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001612:	4803      	ldr	r0, [pc, #12]	@ (8001620 <BSP_SD_GetCardState+0x10>)
 8001614:	f002 f976 	bl	8003904 <HAL_SD_GetCardState>
}
 8001618:	3804      	subs	r0, #4
 800161a:	bf18      	it	ne
 800161c:	2001      	movne	r0, #1
 800161e:	bd08      	pop	{r3, pc}
 8001620:	20000ba4 	.word	0x20000ba4

08001624 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8001624:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8001626:	4801      	ldr	r0, [pc, #4]	@ (800162c <BSP_SD_GetCardInfo+0x8>)
 8001628:	f002 b8cf 	b.w	80037ca <HAL_SD_GetCardInfo>
 800162c:	20000ba4 	.word	0x20000ba4

08001630 <BSP_SD_AbortCallback>:
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{

}
 8001630:	4770      	bx	lr

08001632 <HAL_SD_AbortCallback>:
{
 8001632:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8001634:	f7ff fffc 	bl	8001630 <BSP_SD_AbortCallback>
}
 8001638:	bd08      	pop	{r3, pc}

0800163a <BSP_SD_WriteCpltCallback>:

/**
  * @brief BSP Tx Transfer completed callbacks
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
 800163a:	4770      	bx	lr

0800163c <HAL_SD_TxCpltCallback>:
{
 800163c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800163e:	f7ff fffc 	bl	800163a <BSP_SD_WriteCpltCallback>
}
 8001642:	bd08      	pop	{r3, pc}

08001644 <BSP_SD_ReadCpltCallback>:

/**
  * @brief BSP Rx Transfer completed callbacks
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
 8001644:	4770      	bx	lr

08001646 <HAL_SD_RxCpltCallback>:
{
 8001646:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8001648:	f7ff fffc 	bl	8001644 <BSP_SD_ReadCpltCallback>
}
 800164c:	bd08      	pop	{r3, pc}
	...

08001650 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001654:	4c21      	ldr	r4, [pc, #132]	@ (80016dc <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001656:	2710      	movs	r7, #16
 8001658:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 800165a:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800165e:	19e5      	adds	r5, r4, r7
 8001660:	4621      	mov	r1, r4
{
 8001662:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001664:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001668:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 800166a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800166e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001672:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001676:	f002 fa9c 	bl	8003bb2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800167a:	4630      	mov	r0, r6
 800167c:	f000 f99a 	bl	80019b4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001680:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001682:	4621      	mov	r1, r4
 8001684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001688:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800168a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800168e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001692:	f002 fa8e 	bl	8003bb2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001696:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001698:	4621      	mov	r1, r4
 800169a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80016a0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80016a4:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80016a6:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80016aa:	f002 fa82 	bl	8003bb2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80016ae:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80016b2:	4621      	mov	r1, r4
 80016b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80016b8:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80016ba:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80016bc:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80016be:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80016c0:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80016c8:	f002 fa73 	bl	8003bb2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80016cc:	4649      	mov	r1, r9
 80016ce:	4628      	mov	r0, r5
}
 80016d0:	b003      	add	sp, #12
 80016d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80016d6:	f002 ba8b 	b.w	8003bf0 <HAL_SDRAM_ProgramRefreshRate>
 80016da:	bf00      	nop
 80016dc:	20000da8 	.word	0x20000da8

080016e0 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016e0:	4b55      	ldr	r3, [pc, #340]	@ (8001838 <BSP_SDRAM_MspInit+0x158>)
 80016e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016e4:	f042 0201 	orr.w	r2, r2, #1
{  
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 80016f0:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80016f2:	a909      	add	r1, sp, #36	@ 0x24
 80016f4:	4851      	ldr	r0, [pc, #324]	@ (800183c <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80016f6:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80016fa:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80016fc:	9201      	str	r2, [sp, #4]
 80016fe:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001702:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001706:	631a      	str	r2, [r3, #48]	@ 0x30
 8001708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800170a:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001714:	f042 0204 	orr.w	r2, r2, #4
 8001718:	631a      	str	r2, [r3, #48]	@ 0x30
 800171a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800171c:	f002 0204 	and.w	r2, r2, #4
 8001720:	9203      	str	r2, [sp, #12]
 8001722:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001726:	f042 0208 	orr.w	r2, r2, #8
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
 800172c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800172e:	f002 0208 	and.w	r2, r2, #8
 8001732:	9204      	str	r2, [sp, #16]
 8001734:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001738:	f042 0210 	orr.w	r2, r2, #16
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
 800173e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001740:	f002 0210 	and.w	r2, r2, #16
 8001744:	9205      	str	r2, [sp, #20]
 8001746:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001752:	f002 0220 	and.w	r2, r2, #32
 8001756:	9206      	str	r2, [sp, #24]
 8001758:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800175c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
 8001762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001764:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001768:	9207      	str	r2, [sp, #28]
 800176a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800176e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001772:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001774:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177c:	9308      	str	r3, [sp, #32]
 800177e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001780:	2302      	movs	r3, #2
 8001782:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001786:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001788:	230c      	movs	r3, #12
 800178a:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800178c:	2308      	movs	r3, #8
 800178e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001790:	f000 fcaa 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001794:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001798:	a909      	add	r1, sp, #36	@ 0x24
 800179a:	4829      	ldr	r0, [pc, #164]	@ (8001840 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800179c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800179e:	f000 fca3 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80017a2:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80017a6:	a909      	add	r1, sp, #36	@ 0x24
 80017a8:	4826      	ldr	r0, [pc, #152]	@ (8001844 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80017aa:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80017ac:	f000 fc9c 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80017b0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80017b4:	a909      	add	r1, sp, #36	@ 0x24
 80017b6:	4824      	ldr	r0, [pc, #144]	@ (8001848 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80017b8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80017ba:	f000 fc95 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80017be:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80017c2:	a909      	add	r1, sp, #36	@ 0x24
 80017c4:	4821      	ldr	r0, [pc, #132]	@ (800184c <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80017c6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80017c8:	f000 fc8e 	bl	80020e8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80017cc:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80017ce:	a909      	add	r1, sp, #36	@ 0x24
 80017d0:	481f      	ldr	r0, [pc, #124]	@ (8001850 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80017d2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80017d4:	f000 fc88 	bl	80020e8 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80017da:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80017dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80017e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80017e4:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80017e6:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 80017e8:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80017ea:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80017ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f2:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80017f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017fa:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80017fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001802:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001806:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001808:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <BSP_SDRAM_MspInit+0x178>)
 800180e:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001812:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001814:	6335      	str	r5, [r6, #48]	@ 0x30
 8001816:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8001818:	f000 fa22 	bl	8001c60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800181c:	4628      	mov	r0, r5
 800181e:	f000 f9a1 	bl	8001b64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001822:	4622      	mov	r2, r4
 8001824:	210f      	movs	r1, #15
 8001826:	2038      	movs	r0, #56	@ 0x38
 8001828:	f000 f8e8 	bl	80019fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800182c:	2038      	movs	r0, #56	@ 0x38
 800182e:	f000 f917 	bl	8001a60 <HAL_NVIC_EnableIRQ>
}
 8001832:	b00e      	add	sp, #56	@ 0x38
 8001834:	bd70      	pop	{r4, r5, r6, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40021400 	.word	0x40021400
 800184c:	40021800 	.word	0x40021800
 8001850:	40021c00 	.word	0x40021c00
 8001854:	20000da8 	.word	0x20000da8
 8001858:	40026410 	.word	0x40026410

0800185c <BSP_SDRAM_Init>:
{ 
 800185c:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800185e:	4c1b      	ldr	r4, [pc, #108]	@ (80018cc <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8001860:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8001864:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001866:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001868:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800186c:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 800186e:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001870:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8001872:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8001876:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 800187a:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800187e:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 8001880:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001884:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001888:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800188a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800188e:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001896:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001898:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800189c:	f104 0510 	add.w	r5, r4, #16
 80018a0:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018a2:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80018a6:	f7ff ff1b 	bl	80016e0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80018aa:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 80018ae:	4628      	mov	r0, r5
 80018b0:	4c08      	ldr	r4, [pc, #32]	@ (80018d4 <BSP_SDRAM_Init+0x78>)
 80018b2:	f002 f95e 	bl	8003b72 <HAL_SDRAM_Init>
 80018b6:	3800      	subs	r0, #0
 80018b8:	bf18      	it	ne
 80018ba:	2001      	movne	r0, #1
 80018bc:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80018be:	f240 6003 	movw	r0, #1539	@ 0x603
 80018c2:	f7ff fec5 	bl	8001650 <BSP_SDRAM_Initialization_sequence>
}
 80018c6:	7820      	ldrb	r0, [r4, #0]
 80018c8:	bd38      	pop	{r3, r4, r5, pc}
 80018ca:	bf00      	nop
 80018cc:	20000da8 	.word	0x20000da8
 80018d0:	a0000140 	.word	0xa0000140
 80018d4:	20000040 	.word	0x20000040

080018d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	490f      	ldr	r1, [pc, #60]	@ (8001918 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018da:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <SystemInit+0x44>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 80018fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <SystemInit+0x48>)
 8001902:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800190a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800190c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800190e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001912:	608b      	str	r3, [r1, #8]
#endif
}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	40023800 	.word	0x40023800
 8001920:	24003010 	.word	0x24003010

08001924 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192a:	4e0e      	ldr	r6, [pc, #56]	@ (8001964 <HAL_InitTick+0x3c>)
 800192c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8001930:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001932:	7832      	ldrb	r2, [r6, #0]
 8001934:	fbb3 f3f2 	udiv	r3, r3, r2
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_InitTick+0x40>)
 800193a:	6810      	ldr	r0, [r2, #0]
 800193c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001940:	f000 f89c 	bl	8001a7c <HAL_SYSTICK_Config>
 8001944:	4604      	mov	r4, r0
 8001946:	b950      	cbnz	r0, 800195e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001948:	2d0f      	cmp	r5, #15
 800194a:	d808      	bhi.n	800195e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	4602      	mov	r2, r0
 800194e:	4629      	mov	r1, r5
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 f852 	bl	80019fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4620      	mov	r0, r4
 800195a:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800195c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
 8001960:	e7fc      	b.n	800195c <HAL_InitTick+0x34>
 8001962:	bf00      	nop
 8001964:	20000048 	.word	0x20000048
 8001968:	20000044 	.word	0x20000044

0800196c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196e:	2003      	movs	r0, #3
{
 8001970:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001978:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197a:	f000 f82d 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f7ff ffd2 	bl	8001928 <HAL_InitTick>
  HAL_MspInit();
 8001984:	f7ff ffce 	bl	8001924 <HAL_MspInit>
}
 8001988:	2000      	movs	r0, #0
 800198a:	bd08      	pop	{r3, pc}
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001990:	4a03      	ldr	r2, [pc, #12]	@ (80019a0 <HAL_IncTick+0x10>)
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_IncTick+0x14>)
 8001994:	6811      	ldr	r1, [r2, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	440b      	add	r3, r1
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000ec8 	.word	0x20000ec8
 80019a4:	20000048 	.word	0x20000048

080019a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019a8:	4b01      	ldr	r3, [pc, #4]	@ (80019b0 <HAL_GetTick+0x8>)
 80019aa:	6818      	ldr	r0, [r3, #0]
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000ec8 	.word	0x20000ec8

080019b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b4:	b538      	push	{r3, r4, r5, lr}
 80019b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff fff6 	bl	80019a8 <HAL_GetTick>
 80019bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80019c0:	bf1e      	ittt	ne
 80019c2:	4b04      	ldrne	r3, [pc, #16]	@ (80019d4 <HAL_Delay+0x20>)
 80019c4:	781b      	ldrbne	r3, [r3, #0]
 80019c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	1b43      	subs	r3, r0, r5
 80019ce:	42a3      	cmp	r3, r4
 80019d0:	d3fa      	bcc.n	80019c8 <HAL_Delay+0x14>
  {
  }
}
 80019d2:	bd38      	pop	{r3, r4, r5, pc}
 80019d4:	20000048 	.word	0x20000048

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4907      	ldr	r1, [pc, #28]	@ (80019f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019e6:	0412      	lsls	r2, r2, #16
 80019e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80019f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b530      	push	{r4, r5, lr}
 8001a00:	68dc      	ldr	r4, [r3, #12]
 8001a02:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a06:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	bf28      	it	cs
 8001a10:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a18:	bf8c      	ite	hi
 8001a1a:	3c03      	subhi	r4, #3
 8001a1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8001a22:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	fa03 f304 	lsl.w	r3, r3, r4
 8001a34:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001a3c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	db06      	blt.n	8001a4e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a44:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a48:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a4c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	f000 000f 	and.w	r0, r0, #15
 8001a52:	4a02      	ldr	r2, [pc, #8]	@ (8001a5c <HAL_NVIC_SetPriority+0x60>)
 8001a54:	5413      	strb	r3, [r2, r0]
 8001a56:	e7f9      	b.n	8001a4c <HAL_NVIC_SetPriority+0x50>
 8001a58:	e000ed00 	.word	0xe000ed00
 8001a5c:	e000ed14 	.word	0xe000ed14

08001a60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	db07      	blt.n	8001a74 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a64:	0941      	lsrs	r1, r0, #5
 8001a66:	2301      	movs	r3, #1
 8001a68:	f000 001f 	and.w	r0, r0, #31
 8001a6c:	4a02      	ldr	r2, [pc, #8]	@ (8001a78 <HAL_NVIC_EnableIRQ+0x18>)
 8001a6e:	4083      	lsls	r3, r0
 8001a70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	3801      	subs	r0, #1
 8001a7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001a82:	d20b      	bcs.n	8001a9c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <HAL_SYSTICK_Config+0x24>)
 8001a8a:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a94:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a96:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a98:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a9c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001aa4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <HAL_MPU_Disable+0x18>)
 8001aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MPU_Enable+0x1c>)
 8001ac2:	f040 0001 	orr.w	r0, r0, #1
 8001ac6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001acc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ad6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ae0:	7843      	ldrb	r3, [r0, #1]
 8001ae2:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <HAL_MPU_ConfigRegion+0x54>)
 8001ae4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001ae8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001af4:	6843      	ldr	r3, [r0, #4]
 8001af6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001afa:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001afc:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001afe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b00:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b04:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b06:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b08:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b0a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b0e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b10:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b14:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b16:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b1a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b20:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b26:	7a01      	ldrb	r1, [r0, #8]
 8001b28:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b2c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b38:	6803      	ldr	r3, [r0, #0]
{
 8001b3a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b3c:	2018      	movs	r0, #24
 8001b3e:	b2d9      	uxtb	r1, r3
 8001b40:	3910      	subs	r1, #16
 8001b42:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8001b46:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b48:	4c05      	ldr	r4, [pc, #20]	@ (8001b60 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001b4a:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b4c:	5c20      	ldrb	r0, [r4, r0]
 8001b4e:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b50:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8001b54:	f020 0003 	bic.w	r0, r0, #3
 8001b58:	bf88      	it	hi
 8001b5a:	3004      	addhi	r0, #4
 8001b5c:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	08009f38 	.word	0x08009f38

08001b64 <HAL_DMA_Init>:
{
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff ff1e 	bl	80019a8 <HAL_GetTick>
 8001b6c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d060      	beq.n	8001c34 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b72:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8001b74:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b76:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001b80:	6813      	ldr	r3, [r2, #0]
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	07d8      	lsls	r0, r3, #31
 8001b8e:	d42e      	bmi.n	8001bee <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8001b90:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b92:	4832      	ldr	r0, [pc, #200]	@ (8001c5c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b96:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b98:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001b9c:	432b      	orrs	r3, r5
 8001b9e:	68e5      	ldr	r5, [r4, #12]
 8001ba0:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	6925      	ldr	r5, [r4, #16]
 8001ba4:	432b      	orrs	r3, r5
 8001ba6:	6965      	ldr	r5, [r4, #20]
 8001ba8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	69e5      	ldr	r5, [r4, #28]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb0:	6a25      	ldr	r5, [r4, #32]
 8001bb2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb4:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001bb8:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bba:	bf02      	ittt	eq
 8001bbc:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8001bc0:	4335      	orreq	r5, r6
 8001bc2:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc4:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8001bc6:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8001bc8:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bca:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001bce:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd2:	d135      	bne.n	8001c40 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8001bd4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001bd8:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bda:	b38d      	cbz	r5, 8001c40 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bdc:	b991      	cbnz	r1, 8001c04 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8001bde:	2801      	cmp	r0, #1
 8001be0:	d020      	beq.n	8001c24 <HAL_DMA_Init+0xc0>
 8001be2:	f030 0102 	bics.w	r1, r0, #2
 8001be6:	d12b      	bne.n	8001c40 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be8:	01e9      	lsls	r1, r5, #7
 8001bea:	d529      	bpl.n	8001c40 <HAL_DMA_Init+0xdc>
 8001bec:	e01d      	b.n	8001c2a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff fedb 	bl	80019a8 <HAL_GetTick>
 8001bf2:	1b40      	subs	r0, r0, r5
 8001bf4:	2805      	cmp	r0, #5
 8001bf6:	d9c7      	bls.n	8001b88 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c04:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8001c08:	d116      	bne.n	8001c38 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8001c0a:	2803      	cmp	r0, #3
 8001c0c:	d818      	bhi.n	8001c40 <HAL_DMA_Init+0xdc>
 8001c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8001c14 <HAL_DMA_Init+0xb0>)
 8001c10:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8001c14:	08001c2b 	.word	0x08001c2b
 8001c18:	08001be9 	.word	0x08001be9
 8001c1c:	08001c2b 	.word	0x08001c2b
 8001c20:	08001c25 	.word	0x08001c25
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c24:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001c28:	d10a      	bne.n	8001c40 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c2a:	2340      	movs	r3, #64	@ 0x40
 8001c2c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e7e4      	b.n	8001c02 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8001c38:	2802      	cmp	r0, #2
 8001c3a:	d9f6      	bls.n	8001c2a <HAL_DMA_Init+0xc6>
 8001c3c:	2803      	cmp	r0, #3
 8001c3e:	d0d3      	beq.n	8001be8 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8001c40:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff ff78 	bl	8001b38 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c48:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c4a:	233f      	movs	r3, #63	@ 0x3f
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001c52:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c54:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001c5a:	e7d2      	b.n	8001c02 <HAL_DMA_Init+0x9e>
 8001c5c:	f010803f 	.word	0xf010803f

08001c60 <HAL_DMA_DeInit>:
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001c62:	4605      	mov	r5, r0
 8001c64:	b320      	cbz	r0, 8001cb0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c66:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	b2dc      	uxtb	r4, r3
 8001c6e:	d01d      	beq.n	8001cac <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001c70:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8001c72:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001c7c:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8001c7e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001c80:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001c82:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001c84:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001c86:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001c88:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c8a:	f7ff ff55 	bl	8001b38 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c8e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001c90:	233f      	movs	r3, #63	@ 0x3f
 8001c92:	4093      	lsls	r3, r2
 8001c94:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c96:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8001c98:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001c9c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8001ca0:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001ca4:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8001ca8:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001cb0:	2401      	movs	r4, #1
 8001cb2:	e7fb      	b.n	8001cac <HAL_DMA_DeInit+0x4c>

08001cb4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001cc4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 8001ccc:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8001cd8:	2300      	movs	r3, #0
{
 8001cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8001cdc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cde:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_DMA_IRQHandler+0x178>)
{
 8001ce2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001ce6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8001cea:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cec:	409a      	lsls	r2, r3
 8001cee:	4232      	tst	r2, r6
 8001cf0:	d00c      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cf2:	6801      	ldr	r1, [r0, #0]
 8001cf4:	6808      	ldr	r0, [r1, #0]
 8001cf6:	0740      	lsls	r0, r0, #29
 8001cf8:	d508      	bpl.n	8001d0c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cfa:	6808      	ldr	r0, [r1, #0]
 8001cfc:	f020 0004 	bic.w	r0, r0, #4
 8001d00:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d02:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	4232      	tst	r2, r6
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d14:	6821      	ldr	r1, [r4, #0]
 8001d16:	6949      	ldr	r1, [r1, #20]
 8001d18:	0609      	lsls	r1, r1, #24
 8001d1a:	d504      	bpl.n	8001d26 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d1c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d20:	f042 0202 	orr.w	r2, r2, #2
 8001d24:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	2204      	movs	r2, #4
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	4232      	tst	r2, r6
 8001d2c:	d008      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	6809      	ldr	r1, [r1, #0]
 8001d32:	0788      	lsls	r0, r1, #30
 8001d34:	d504      	bpl.n	8001d40 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d36:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d3a:	f042 0204 	orr.w	r2, r2, #4
 8001d3e:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	2210      	movs	r2, #16
 8001d42:	409a      	lsls	r2, r3
 8001d44:	4232      	tst	r2, r6
 8001d46:	d010      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	0709      	lsls	r1, r1, #28
 8001d4e:	d50c      	bpl.n	8001d6a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d50:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	0350      	lsls	r0, r2, #13
 8001d56:	d537      	bpl.n	8001dc8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	0319      	lsls	r1, r3, #12
 8001d5c:	d401      	bmi.n	8001d62 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001d5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d60:	e000      	b.n	8001d64 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d62:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001d64:	b10b      	cbz	r3, 8001d6a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001d66:	4620      	mov	r0, r4
 8001d68:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	408a      	lsls	r2, r1
 8001d70:	4232      	tst	r2, r6
 8001d72:	d03a      	beq.n	8001dea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	06c6      	lsls	r6, r0, #27
 8001d7a:	d536      	bpl.n	8001dea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d7c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8001d82:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d84:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d86:	d127      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d88:	f022 0216 	bic.w	r2, r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d94:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001d98:	b90a      	cbnz	r2, 8001d9e <HAL_DMA_IRQHandler+0xc6>
 8001d9a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001d9c:	b11a      	cbz	r2, 8001da6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	f022 0208 	bic.w	r2, r2, #8
 8001da4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da6:	233f      	movs	r3, #63	@ 0x3f
 8001da8:	408b      	lsls	r3, r1
 8001daa:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001db2:	2300      	movs	r3, #0
 8001db4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8001db8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001dbe:	4620      	mov	r0, r4
}
 8001dc0:	b003      	add	sp, #12
 8001dc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001dc6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	05d2      	lsls	r2, r2, #23
 8001dcc:	d4c7      	bmi.n	8001d5e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	f022 0208 	bic.w	r2, r2, #8
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e7c2      	b.n	8001d5e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dd8:	0350      	lsls	r0, r2, #13
 8001dda:	d527      	bpl.n	8001e2c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0319      	lsls	r1, r3, #12
 8001de0:	d431      	bmi.n	8001e46 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001de2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8001de4:	b10b      	cbz	r3, 8001dea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001de6:	4620      	mov	r0, r4
 8001de8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dec:	b36b      	cbz	r3, 8001e4a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001df0:	07da      	lsls	r2, r3, #31
 8001df2:	d519      	bpl.n	8001e28 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8001df4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8001df8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dfa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8001e04:	6813      	ldr	r3, [r2, #0]
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001e0c:	9b01      	ldr	r3, [sp, #4]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	42bb      	cmp	r3, r7
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	d802      	bhi.n	8001e1c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	07db      	lsls	r3, r3, #31
 8001e1a:	d4f7      	bmi.n	8001e0c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8001e22:	2300      	movs	r3, #0
 8001e24:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8001e28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001e2a:	e7c6      	b.n	8001dba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8001e32:	d108      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e34:	6819      	ldr	r1, [r3, #0]
 8001e36:	f021 0110 	bic.w	r1, r1, #16
 8001e3a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001e3c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001e3e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001e42:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8001e46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001e48:	e7cc      	b.n	8001de4 <HAL_DMA_IRQHandler+0x10c>
}
 8001e4a:	b003      	add	sp, #12
 8001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000044 	.word	0x20000044

08001e54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e56:	6804      	ldr	r4, [r0, #0]
 8001e58:	9d05      	ldr	r5, [sp, #20]
 8001e5a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001e5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e60:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e62:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e6a:	ea45 0506 	orr.w	r5, r5, r6
 8001e6e:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e70:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e72:	d12f      	bne.n	8001ed4 <DMA2D_SetConfig+0x80>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e74:	6880      	ldr	r0, [r0, #8]
 8001e76:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e7a:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e7e:	f401 427f 	and.w	r2, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001e82:	b2cd      	uxtb	r5, r1

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001e84:	2803      	cmp	r0, #3
 8001e86:	d81a      	bhi.n	8001ebe <DMA2D_SetConfig+0x6a>
 8001e88:	e8df f000 	tbb	[pc, r0]
 8001e8c:	0e060204 	.word	0x0e060204
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001e90:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e94:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp2 = (tmp2 >> 19U);
 8001e98:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001e9a:	0a92      	lsrs	r2, r2, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001e9c:	02c9      	lsls	r1, r1, #11
 8001e9e:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8001ea2:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
 8001ea6:	e7f5      	b.n	8001e94 <DMA2D_SetConfig+0x40>
      tmp2 = (tmp2 >> 19U);
 8001ea8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001eaa:	0ad2      	lsrs	r2, r2, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001eac:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8001eae:	0ff1      	lsrs	r1, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001eb0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001eb4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
 8001eb8:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001ebc:	e7ea      	b.n	8001e94 <DMA2D_SetConfig+0x40>
      tmp2 = (tmp2 >> 20U);
 8001ebe:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001ec0:	0b12      	lsrs	r2, r2, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001ec2:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8001ec4:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001ec6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001eca:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8001ece:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
 8001ed2:	e7df      	b.n	8001e94 <DMA2D_SetConfig+0x40>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001ed4:	60e1      	str	r1, [r4, #12]
}
 8001ed6:	e7de      	b.n	8001e96 <DMA2D_SetConfig+0x42>

08001ed8 <HAL_DMA2D_MspInit>:
}
 8001ed8:	4770      	bx	lr

08001eda <HAL_DMA2D_Init>:
{
 8001eda:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8001edc:	4604      	mov	r4, r0
 8001ede:	b320      	cbz	r0, 8001f2a <HAL_DMA2D_Init+0x50>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ee0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8001ee4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001ee8:	b91b      	cbnz	r3, 8001ef2 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8001eea:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001eee:	f7ff fff3 	bl	8001ed8 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ef2:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ef4:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ef6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ef8:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001f04:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f06:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001f08:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f0c:	f022 0207 	bic.w	r2, r2, #7
 8001f10:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001f12:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f14:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f18:	f36f 020d 	bfc	r2, #0, #14
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f20:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001f22:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001f24:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8001f28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	e7fc      	b.n	8001f28 <HAL_DMA2D_Init+0x4e>

08001f2e <HAL_DMA2D_Start>:
{
 8001f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001f30:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 8001f34:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8001f36:	2d01      	cmp	r5, #1
 8001f38:	f04f 0502 	mov.w	r5, #2
 8001f3c:	d00f      	beq.n	8001f5e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f3e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 8001f42:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f44:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001f46:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f4a:	9500      	str	r5, [sp, #0]
 8001f4c:	f7ff ff82 	bl	8001e54 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f50:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8001f52:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	4333      	orrs	r3, r6
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	e7fb      	b.n	8001f5a <HAL_DMA2D_Start+0x2c>

08001f62 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8001f62:	2300      	movs	r3, #0
{
 8001f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8001f66:	9301      	str	r3, [sp, #4]
{
 8001f68:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f6a:	6803      	ldr	r3, [r0, #0]
{
 8001f6c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	07db      	lsls	r3, r3, #31
 8001f72:	d418      	bmi.n	8001fa6 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f7a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8001f7c:	069e      	lsls	r6, r3, #26
 8001f7e:	d506      	bpl.n	8001f8e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8001f80:	f7ff fd12 	bl	80019a8 <HAL_GetTick>
 8001f84:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	06d2      	lsls	r2, r2, #27
 8001f8c:	d53f      	bpl.n	800200e <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	2212      	movs	r2, #18
  return HAL_OK;
 8001f92:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001f94:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001fa6:	f7ff fcff 	bl	80019a8 <HAL_GetTick>
 8001faa:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	0792      	lsls	r2, r2, #30
 8001fb2:	d4df      	bmi.n	8001f74 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001fb8:	9a01      	ldr	r2, [sp, #4]
 8001fba:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8001fbe:	d014      	beq.n	8001fea <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001fc0:	9a01      	ldr	r2, [sp, #4]
 8001fc2:	0695      	lsls	r5, r2, #26
 8001fc4:	d503      	bpl.n	8001fce <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001fc6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001fc8:	f042 0202 	orr.w	r2, r2, #2
 8001fcc:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001fce:	9a01      	ldr	r2, [sp, #4]
 8001fd0:	07d0      	lsls	r0, r2, #31
 8001fd2:	d503      	bpl.n	8001fdc <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001fd4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fdc:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fde:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fe0:	2304      	movs	r3, #4
        return HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001fe4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8001fe8:	e7d8      	b.n	8001f9c <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 8001fea:	1c69      	adds	r1, r5, #1
 8001fec:	d0df      	beq.n	8001fae <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7ff fcdb 	bl	80019a8 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	42a8      	cmp	r0, r5
 8001ff6:	d801      	bhi.n	8001ffc <HAL_DMA2D_PollForTransfer+0x9a>
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	d1d7      	bne.n	8001fac <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ffc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002000:	f043 0320 	orr.w	r3, r3, #32
 8002004:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 800200c:	e7c6      	b.n	8001f9c <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002012:	9a01      	ldr	r2, [sp, #4]
 8002014:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8002018:	d016      	beq.n	8002048 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800201a:	9a01      	ldr	r2, [sp, #4]
 800201c:	0716      	lsls	r6, r2, #28
 800201e:	d503      	bpl.n	8002028 <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002020:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002022:	f042 0204 	orr.w	r2, r2, #4
 8002026:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002028:	9a01      	ldr	r2, [sp, #4]
 800202a:	0695      	lsls	r5, r2, #26
 800202c:	d503      	bpl.n	8002036 <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800202e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002030:	f042 0202 	orr.w	r2, r2, #2
 8002034:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002036:	9a01      	ldr	r2, [sp, #4]
 8002038:	07d0      	lsls	r0, r2, #31
 800203a:	d503      	bpl.n	8002044 <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800203c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002044:	2229      	movs	r2, #41	@ 0x29
 8002046:	e7ca      	b.n	8001fde <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 8002048:	1c69      	adds	r1, r5, #1
 800204a:	d09d      	beq.n	8001f88 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800204c:	f7ff fcac 	bl	80019a8 <HAL_GetTick>
 8002050:	1b80      	subs	r0, r0, r6
 8002052:	42a8      	cmp	r0, r5
 8002054:	d8d2      	bhi.n	8001ffc <HAL_DMA2D_PollForTransfer+0x9a>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d195      	bne.n	8001f86 <HAL_DMA2D_PollForTransfer+0x24>
 800205a:	e7cf      	b.n	8001ffc <HAL_DMA2D_PollForTransfer+0x9a>

0800205c <HAL_DMA2D_ConfigLayer>:
{
 800205c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800205e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 8002062:	4603      	mov	r3, r0
 8002064:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 8002066:	2a01      	cmp	r2, #1
 8002068:	d02b      	beq.n	80020c2 <HAL_DMA2D_ConfigLayer+0x66>
 800206a:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800206c:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002070:	010e      	lsls	r6, r1, #4
 8002072:	4f1c      	ldr	r7, [pc, #112]	@ (80020e4 <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 8002074:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002078:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 800207c:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8002080:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8002082:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002086:	3c09      	subs	r4, #9
 8002088:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800208a:	bf96      	itet	ls
 800208c:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002090:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002094:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002096:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002098:	b9a1      	cbnz	r1, 80020c4 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800209a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800209c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800209e:	ea01 0107 	and.w	r1, r1, r7
 80020a2:	ea41 0100 	orr.w	r1, r1, r0
 80020a6:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020a8:	6999      	ldr	r1, [r3, #24]
 80020aa:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020ac:	d803      	bhi.n	80020b6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80020ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020b0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80020b4:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020b6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 80020b8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 80020be:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020c4:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020c6:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80020c8:	ea01 0107 	and.w	r1, r1, r7
 80020cc:	ea41 0100 	orr.w	r1, r1, r0
 80020d0:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80020d2:	eb03 0106 	add.w	r1, r3, r6
 80020d6:	6989      	ldr	r1, [r1, #24]
 80020d8:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020da:	d8ec      	bhi.n	80020b6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80020dc:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80020e0:	6215      	str	r5, [r2, #32]
 80020e2:	e7e8      	b.n	80020b6 <HAL_DMA2D_ConfigLayer+0x5a>
 80020e4:	00fcfff0 	.word	0x00fcfff0

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80022ac <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4a6c      	ldr	r2, [pc, #432]	@ (80022a4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80020f4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80020f8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 80020fe:	43ac      	bics	r4, r5
 8002100:	f040 80b7 	bne.w	8002272 <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002106:	2703      	movs	r7, #3
 8002108:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800210c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002110:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002114:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002116:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211a:	2f01      	cmp	r7, #1
 800211c:	d834      	bhi.n	8002188 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 800211e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002120:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8002124:	68cf      	ldr	r7, [r1, #12]
 8002126:	fa07 f70e 	lsl.w	r7, r7, lr
 800212a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800212e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002130:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002132:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800213a:	409f      	lsls	r7, r3
 800213c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002140:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002142:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002146:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800214a:	688f      	ldr	r7, [r1, #8]
 800214c:	fa07 f70e 	lsl.w	r7, r7, lr
 8002150:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8002154:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	d119      	bne.n	800218c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8002158:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800215c:	f003 0a07 	and.w	sl, r3, #7
 8002160:	f04f 0b0f 	mov.w	fp, #15
 8002164:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002168:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800216c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002170:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002174:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002178:	690f      	ldr	r7, [r1, #16]
 800217a:	fa07 f70a 	lsl.w	r7, r7, sl
 800217e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8002182:	f8c8 7020 	str.w	r7, [r8, #32]
 8002186:	e001      	b.n	800218c <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	2c03      	cmp	r4, #3
 800218a:	d1da      	bne.n	8002142 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800218c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800218e:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002192:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002196:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800219a:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800219e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a0:	d067      	beq.n	8002272 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80021a6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021aa:	f003 0c03 	and.w	ip, r3, #3
 80021ae:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80021b6:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80021c2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80021c6:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021ca:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80021d2:	9401      	str	r4, [sp, #4]
 80021d4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80021d6:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021d8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021dc:	4c32      	ldr	r4, [pc, #200]	@ (80022a8 <HAL_GPIO_Init+0x1c0>)
 80021de:	42a0      	cmp	r0, r4
 80021e0:	d04e      	beq.n	8002280 <HAL_GPIO_Init+0x198>
 80021e2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021e6:	42a0      	cmp	r0, r4
 80021e8:	d04c      	beq.n	8002284 <HAL_GPIO_Init+0x19c>
 80021ea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021ee:	42a0      	cmp	r0, r4
 80021f0:	d04a      	beq.n	8002288 <HAL_GPIO_Init+0x1a0>
 80021f2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021f6:	42a0      	cmp	r0, r4
 80021f8:	d048      	beq.n	800228c <HAL_GPIO_Init+0x1a4>
 80021fa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021fe:	42a0      	cmp	r0, r4
 8002200:	d046      	beq.n	8002290 <HAL_GPIO_Init+0x1a8>
 8002202:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002206:	42a0      	cmp	r0, r4
 8002208:	d044      	beq.n	8002294 <HAL_GPIO_Init+0x1ac>
 800220a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800220e:	42a0      	cmp	r0, r4
 8002210:	d042      	beq.n	8002298 <HAL_GPIO_Init+0x1b0>
 8002212:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002216:	42a0      	cmp	r0, r4
 8002218:	d040      	beq.n	800229c <HAL_GPIO_Init+0x1b4>
 800221a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800221e:	42a0      	cmp	r0, r4
 8002220:	d03e      	beq.n	80022a0 <HAL_GPIO_Init+0x1b8>
 8002222:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002226:	42a0      	cmp	r0, r4
 8002228:	bf14      	ite	ne
 800222a:	240a      	movne	r4, #10
 800222c:	2409      	moveq	r4, #9
 800222e:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002232:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002236:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800223a:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800223c:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8002240:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002242:	bf0c      	ite	eq
 8002244:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002246:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002248:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 800224c:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800224e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002250:	bf0c      	ite	eq
 8002252:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002254:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002256:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 800225a:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800225c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800225e:	bf0c      	ite	eq
 8002260:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002262:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002264:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002266:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002268:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800226a:	bf54      	ite	pl
 800226c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800226e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8002270:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002272:	3301      	adds	r3, #1
 8002274:	2b10      	cmp	r3, #16
 8002276:	f47f af3d 	bne.w	80020f4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800227a:	b003      	add	sp, #12
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002280:	2400      	movs	r4, #0
 8002282:	e7d4      	b.n	800222e <HAL_GPIO_Init+0x146>
 8002284:	2401      	movs	r4, #1
 8002286:	e7d2      	b.n	800222e <HAL_GPIO_Init+0x146>
 8002288:	2402      	movs	r4, #2
 800228a:	e7d0      	b.n	800222e <HAL_GPIO_Init+0x146>
 800228c:	2403      	movs	r4, #3
 800228e:	e7ce      	b.n	800222e <HAL_GPIO_Init+0x146>
 8002290:	2404      	movs	r4, #4
 8002292:	e7cc      	b.n	800222e <HAL_GPIO_Init+0x146>
 8002294:	2405      	movs	r4, #5
 8002296:	e7ca      	b.n	800222e <HAL_GPIO_Init+0x146>
 8002298:	2406      	movs	r4, #6
 800229a:	e7c8      	b.n	800222e <HAL_GPIO_Init+0x146>
 800229c:	2407      	movs	r4, #7
 800229e:	e7c6      	b.n	800222e <HAL_GPIO_Init+0x146>
 80022a0:	2408      	movs	r4, #8
 80022a2:	e7c4      	b.n	800222e <HAL_GPIO_Init+0x146>
 80022a4:	40013c00 	.word	0x40013c00
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022b0:	6903      	ldr	r3, [r0, #16]
 80022b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80022b4:	bf14      	ite	ne
 80022b6:	2001      	movne	r0, #1
 80022b8:	2000      	moveq	r0, #0
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022bc:	b10a      	cbz	r2, 80022c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022be:	6181      	str	r1, [r0, #24]
  }
}
 80022c0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022c2:	0409      	lsls	r1, r1, #16
 80022c4:	e7fb      	b.n	80022be <HAL_GPIO_WritePin+0x2>
	...

080022c8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022c8:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022ca:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80022cc:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022d0:	3284      	adds	r2, #132	@ 0x84
 80022d2:	1883      	adds	r3, r0, r2
{
 80022d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022d8:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80022da:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022de:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80022e0:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022e4:	684c      	ldr	r4, [r1, #4]
 80022e6:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022ea:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80022ee:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022f2:	4426      	add	r6, r4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80022f4:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022f8:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80022fa:	68c5      	ldr	r5, [r0, #12]
 80022fc:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8002300:	443d      	add	r5, r7
 8002302:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002306:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002308:	68c6      	ldr	r6, [r0, #12]
 800230a:	68cd      	ldr	r5, [r1, #12]
 800230c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002310:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002312:	689d      	ldr	r5, [r3, #8]
 8002314:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8002318:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800231a:	688d      	ldr	r5, [r1, #8]
 800231c:	68c7      	ldr	r7, [r0, #12]
 800231e:	3501      	adds	r5, #1
 8002320:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8002324:	443d      	add	r5, r7
 8002326:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800232a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800232c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800232e:	2e07      	cmp	r6, #7
 8002330:	691d      	ldr	r5, [r3, #16]
 8002332:	f025 0507 	bic.w	r5, r5, #7
 8002336:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002338:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800233a:	bf88      	it	hi
 800233c:	2601      	movhi	r6, #1
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800233e:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002342:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002344:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002348:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800234c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8002350:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002354:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002358:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800235c:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800235e:	695d      	ldr	r5, [r3, #20]
 8002360:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8002364:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002366:	694d      	ldr	r5, [r1, #20]
 8002368:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800236a:	69dd      	ldr	r5, [r3, #28]
 800236c:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8002370:	f025 0507 	bic.w	r5, r5, #7
 8002374:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002376:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800237a:	ea45 0507 	orr.w	r5, r5, r7
 800237e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002380:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002382:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002384:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002388:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800238a:	bf9c      	itt	ls
 800238c:	4d0c      	ldrls	r5, [pc, #48]	@ (80023c0 <LTDC_SetConfig+0xf8>)
 800238e:	5dae      	ldrbls	r6, [r5, r6]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002390:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002392:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002394:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002398:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800239a:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800239c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800239e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80023a0:	4375      	muls	r5, r6
 80023a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80023a6:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80023a8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80023aa:	f36f 040a 	bfc	r4, #0, #11
 80023ae:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80023b0:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80023b2:	5883      	ldr	r3, [r0, r2]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	5083      	str	r3, [r0, r2]
}
 80023ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023be:	bf00      	nop
 80023c0:	08009f40 	.word	0x08009f40

080023c4 <HAL_LTDC_MspInit>:
}
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_LTDC_Init>:
{
 80023c8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80023ca:	4604      	mov	r4, r0
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d063      	beq.n	8002498 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80023d0:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80023d4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023d8:	b91b      	cbnz	r3, 80023e2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80023da:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80023de:	f7ff fff1 	bl	80023c4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80023f0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023f2:	6999      	ldr	r1, [r3, #24]
 80023f4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80023f8:	4302      	orrs	r2, r0
 80023fa:	68e0      	ldr	r0, [r4, #12]
 80023fc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80023fe:	6920      	ldr	r0, [r4, #16]
 8002400:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002402:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002404:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002406:	4925      	ldr	r1, [pc, #148]	@ (800249c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002408:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	400a      	ands	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002416:	69a0      	ldr	r0, [r4, #24]
 8002418:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800241a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800241c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	400a      	ands	r2, r1
 8002422:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800242a:	6a20      	ldr	r0, [r4, #32]
 800242c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800242e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002430:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	400a      	ands	r2, r1
 8002436:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800243e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002440:	4302      	orrs	r2, r0
 8002442:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002448:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800244a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002452:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800245a:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800245e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002462:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002468:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800246a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800246e:	432a      	orrs	r2, r5
 8002470:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002474:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002476:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800247c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247e:	f042 0206 	orr.w	r2, r2, #6
 8002482:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800248c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800248e:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002492:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8002496:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002498:	2001      	movs	r0, #1
 800249a:	e7fc      	b.n	8002496 <HAL_LTDC_Init+0xce>
 800249c:	f000f800 	.word	0xf000f800

080024a0 <HAL_LTDC_ConfigLayer>:
{
 80024a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80024a4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 80024a8:	4606      	mov	r6, r0
 80024aa:	460f      	mov	r7, r1
 80024ac:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f04f 0002 	mov.w	r0, #2
 80024b4:	d01f      	beq.n	80024f6 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024b6:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80024b8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024bc:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024be:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024c2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80024c6:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024ca:	3438      	adds	r4, #56	@ 0x38
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024da:	4630      	mov	r0, r6
 80024dc:	4662      	mov	r2, ip
 80024de:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024e0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024e2:	f7ff fef1 	bl	80022c8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024e6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80024e8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024ea:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80024ee:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80024f2:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024fa <HAL_LTDC_SetAlpha>:
{
 80024fa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 80024fc:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8002500:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8002502:	2b01      	cmp	r3, #1
 8002504:	f04f 0302 	mov.w	r3, #2
 8002508:	d015      	beq.n	8002536 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800250a:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pLayerCfg->Alpha = Alpha;
 800250e:	2334      	movs	r3, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8002510:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
 8002512:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8002514:	f880 60a0 	strb.w	r6, [r0, #160]	@ 0xa0
  pLayerCfg->Alpha = Alpha;
 8002518:	18c5      	adds	r5, r0, r3
 800251a:	64e9      	str	r1, [r5, #76]	@ 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800251c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002520:	4401      	add	r1, r0
 8002522:	f7ff fed1 	bl	80022c8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002526:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8002528:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800252a:	625e      	str	r6, [r3, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800252c:	f884 60a1 	strb.w	r6, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8002530:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8002534:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8002536:	4618      	mov	r0, r3
 8002538:	e7fc      	b.n	8002534 <HAL_LTDC_SetAlpha+0x3a>

0800253a <HAL_LTDC_GetState>:
  return hltdc->State;
 800253a:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 800253e:	4770      	bx	lr

08002540 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002542:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002546:	4c19      	ldr	r4, [pc, #100]	@ (80025ac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7ff fa22 	bl	80019a8 <HAL_GetTick>
 8002564:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002566:	6863      	ldr	r3, [r4, #4]
 8002568:	03da      	lsls	r2, r3, #15
 800256a:	d50c      	bpl.n	8002586 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800256c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256e:	4d0f      	ldr	r5, [pc, #60]	@ (80025ac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002574:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002576:	f7ff fa17 	bl	80019a8 <HAL_GetTick>
 800257a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800257c:	686b      	ldr	r3, [r5, #4]
 800257e:	039b      	lsls	r3, r3, #14
 8002580:	d50a      	bpl.n	8002598 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e006      	b.n	8002594 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002586:	f7ff fa0f 	bl	80019a8 <HAL_GetTick>
 800258a:	1b40      	subs	r0, r0, r5
 800258c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002590:	d9e9      	bls.n	8002566 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002592:	2003      	movs	r0, #3
}
 8002594:	b003      	add	sp, #12
 8002596:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002598:	f7ff fa06 	bl	80019a8 <HAL_GetTick>
 800259c:	1b00      	subs	r0, r0, r4
 800259e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80025a2:	d9eb      	bls.n	800257c <HAL_PWREx_EnableOverDrive+0x3c>
 80025a4:	e7f5      	b.n	8002592 <HAL_PWREx_EnableOverDrive+0x52>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b4:	4604      	mov	r4, r0
 80025b6:	b340      	cbz	r0, 800260a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b8:	6803      	ldr	r3, [r0, #0]
 80025ba:	07de      	lsls	r6, r3, #31
 80025bc:	d410      	bmi.n	80025e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	079d      	lsls	r5, r3, #30
 80025c2:	d461      	bmi.n	8002688 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	0719      	lsls	r1, r3, #28
 80025c8:	f100 80a6 	bmi.w	8002718 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	075a      	lsls	r2, r3, #29
 80025d0:	f100 80c7 	bmi.w	8002762 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d4:	69a2      	ldr	r2, [r4, #24]
 80025d6:	2a00      	cmp	r2, #0
 80025d8:	f040 8130 	bne.w	800283c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	e02c      	b.n	800263a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b94      	ldr	r3, [pc, #592]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	f002 020c 	and.w	r2, r2, #12
 80025e8:	2a04      	cmp	r2, #4
 80025ea:	d007      	beq.n	80025fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	f002 020c 	and.w	r2, r2, #12
 80025f2:	2a08      	cmp	r2, #8
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x5e>
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0259      	lsls	r1, r3, #9
 80025fa:	d508      	bpl.n	800260e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	039a      	lsls	r2, r3, #14
 8002602:	d5dc      	bpl.n	80025be <HAL_RCC_OscConfig+0xe>
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1d9      	bne.n	80025be <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	6863      	ldr	r3, [r4, #4]
 8002610:	4d88      	ldr	r5, [pc, #544]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002616:	d113      	bne.n	8002640 <HAL_RCC_OscConfig+0x90>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002620:	f7ff f9c2 	bl	80019a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002624:	4e83      	ldr	r6, [pc, #524]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8002626:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	039b      	lsls	r3, r3, #14
 800262c:	d4c7      	bmi.n	80025be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262e:	f7ff f9bb 	bl	80019a8 <HAL_GetTick>
 8002632:	1b40      	subs	r0, r0, r5
 8002634:	2864      	cmp	r0, #100	@ 0x64
 8002636:	d9f7      	bls.n	8002628 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
}
 800263a:	b002      	add	sp, #8
 800263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002640:	b99b      	cbnz	r3, 800266a <HAL_RCC_OscConfig+0xba>
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002650:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002652:	f7ff f9a9 	bl	80019a8 <HAL_GetTick>
 8002656:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	039f      	lsls	r7, r3, #14
 800265c:	d5af      	bpl.n	80025be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800265e:	f7ff f9a3 	bl	80019a8 <HAL_GetTick>
 8002662:	1b80      	subs	r0, r0, r6
 8002664:	2864      	cmp	r0, #100	@ 0x64
 8002666:	d9f7      	bls.n	8002658 <HAL_RCC_OscConfig+0xa8>
 8002668:	e7e6      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	d103      	bne.n	800267a <HAL_RCC_OscConfig+0xca>
 8002672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	e7ce      	b.n	8002618 <HAL_RCC_OscConfig+0x68>
 800267a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002686:	e7ca      	b.n	800261e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	f012 0f0c 	tst.w	r2, #12
 8002690:	d007      	beq.n	80026a2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	f002 020c 	and.w	r2, r2, #12
 8002698:	2a08      	cmp	r2, #8
 800269a:	d111      	bne.n	80026c0 <HAL_RCC_OscConfig+0x110>
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	025d      	lsls	r5, r3, #9
 80026a0:	d40e      	bmi.n	80026c0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4a64      	ldr	r2, [pc, #400]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 80026a4:	6813      	ldr	r3, [r2, #0]
 80026a6:	0799      	lsls	r1, r3, #30
 80026a8:	d502      	bpl.n	80026b0 <HAL_RCC_OscConfig+0x100>
 80026aa:	68e3      	ldr	r3, [r4, #12]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d1ac      	bne.n	800260a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	6921      	ldr	r1, [r4, #16]
 80026b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80026b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026bc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e781      	b.n	80025c4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026c0:	68e3      	ldr	r3, [r4, #12]
 80026c2:	4d5c      	ldr	r5, [pc, #368]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 80026c4:	b1bb      	cbz	r3, 80026f6 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026ce:	f7ff f96b 	bl	80019a8 <HAL_GetTick>
 80026d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d507      	bpl.n	80026ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	682b      	ldr	r3, [r5, #0]
 80026dc:	6922      	ldr	r2, [r4, #16]
 80026de:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80026e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	e76c      	b.n	80025c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff f95d 	bl	80019a8 <HAL_GetTick>
 80026ee:	1b80      	subs	r0, r0, r6
 80026f0:	2802      	cmp	r0, #2
 80026f2:	d9ef      	bls.n	80026d4 <HAL_RCC_OscConfig+0x124>
 80026f4:	e7a0      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80026f6:	682b      	ldr	r3, [r5, #0]
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026fe:	f7ff f953 	bl	80019a8 <HAL_GetTick>
 8002702:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	079f      	lsls	r7, r3, #30
 8002708:	f57f af5c 	bpl.w	80025c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff f94c 	bl	80019a8 <HAL_GetTick>
 8002710:	1b80      	subs	r0, r0, r6
 8002712:	2802      	cmp	r0, #2
 8002714:	d9f6      	bls.n	8002704 <HAL_RCC_OscConfig+0x154>
 8002716:	e78f      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002718:	6963      	ldr	r3, [r4, #20]
 800271a:	4d46      	ldr	r5, [pc, #280]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 800271c:	b183      	cbz	r3, 8002740 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800271e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002726:	f7ff f93f 	bl	80019a8 <HAL_GetTick>
 800272a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800272e:	079b      	lsls	r3, r3, #30
 8002730:	f53f af4c 	bmi.w	80025cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff f938 	bl	80019a8 <HAL_GetTick>
 8002738:	1b80      	subs	r0, r0, r6
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f6      	bls.n	800272c <HAL_RCC_OscConfig+0x17c>
 800273e:	e77b      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002740:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002748:	f7ff f92e 	bl	80019a8 <HAL_GetTick>
 800274c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002750:	079f      	lsls	r7, r3, #30
 8002752:	f57f af3b 	bpl.w	80025cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff f927 	bl	80019a8 <HAL_GetTick>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	2802      	cmp	r0, #2
 800275e:	d9f6      	bls.n	800274e <HAL_RCC_OscConfig+0x19e>
 8002760:	e76a      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 8002764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002766:	00d5      	lsls	r5, r2, #3
 8002768:	d427      	bmi.n	80027ba <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 800276c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4d2e      	ldr	r5, [pc, #184]	@ (8002838 <HAL_RCC_OscConfig+0x288>)
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	05d8      	lsls	r0, r3, #23
 8002784:	d51b      	bpl.n	80027be <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002786:	68a3      	ldr	r3, [r4, #8]
 8002788:	4d2a      	ldr	r5, [pc, #168]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 800278a:	2b01      	cmp	r3, #1
 800278c:	d127      	bne.n	80027de <HAL_RCC_OscConfig+0x22e>
 800278e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800279a:	f7ff f905 	bl	80019a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4e25      	ldr	r6, [pc, #148]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80027a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80027a4:	079a      	lsls	r2, r3, #30
 80027a6:	d53f      	bpl.n	8002828 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80027a8:	2f00      	cmp	r7, #0
 80027aa:	f43f af13 	beq.w	80025d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ae:	4a21      	ldr	r2, [pc, #132]	@ (8002834 <HAL_RCC_OscConfig+0x284>)
 80027b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027b8:	e70c      	b.n	80025d4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80027ba:	2700      	movs	r7, #0
 80027bc:	e7df      	b.n	800277e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027c6:	f7ff f8ef 	bl	80019a8 <HAL_GetTick>
 80027ca:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	05d9      	lsls	r1, r3, #23
 80027d0:	d4d9      	bmi.n	8002786 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff f8e9 	bl	80019a8 <HAL_GetTick>
 80027d6:	1b80      	subs	r0, r0, r6
 80027d8:	2864      	cmp	r0, #100	@ 0x64
 80027da:	d9f7      	bls.n	80027cc <HAL_RCC_OscConfig+0x21c>
 80027dc:	e72c      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	b9ab      	cbnz	r3, 800280c <HAL_RCC_OscConfig+0x25c>
 80027e0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	672b      	str	r3, [r5, #112]	@ 0x70
 80027ec:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80027f4:	f7ff f8d8 	bl	80019a8 <HAL_GetTick>
 80027f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80027fc:	079b      	lsls	r3, r3, #30
 80027fe:	d5d3      	bpl.n	80027a8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7ff f8d2 	bl	80019a8 <HAL_GetTick>
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	4540      	cmp	r0, r8
 8002808:	d9f7      	bls.n	80027fa <HAL_RCC_OscConfig+0x24a>
 800280a:	e715      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	2b05      	cmp	r3, #5
 800280e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002810:	d103      	bne.n	800281a <HAL_RCC_OscConfig+0x26a>
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	672b      	str	r3, [r5, #112]	@ 0x70
 8002818:	e7b9      	b.n	800278e <HAL_RCC_OscConfig+0x1de>
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	672b      	str	r3, [r5, #112]	@ 0x70
 8002820:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	e7b5      	b.n	8002794 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7ff f8be 	bl	80019a8 <HAL_GetTick>
 800282c:	1b40      	subs	r0, r0, r5
 800282e:	4540      	cmp	r0, r8
 8002830:	d9b7      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1f2>
 8002832:	e701      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283c:	4d38      	ldr	r5, [pc, #224]	@ (8002920 <HAL_RCC_OscConfig+0x370>)
 800283e:	68ab      	ldr	r3, [r5, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d041      	beq.n	80028cc <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8002848:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800284c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002850:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	d12e      	bne.n	80028b2 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8002854:	f7ff f8a8 	bl	80019a8 <HAL_GetTick>
 8002858:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	682b      	ldr	r3, [r5, #0]
 800285c:	0199      	lsls	r1, r3, #6
 800285e:	d422      	bmi.n	80028a6 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800286a:	430b      	orrs	r3, r1
 800286c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002870:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002872:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002876:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002878:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800287c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002880:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800288a:	f7ff f88d 	bl	80019a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4d24      	ldr	r5, [pc, #144]	@ (8002920 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8002890:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	682b      	ldr	r3, [r5, #0]
 8002894:	019a      	lsls	r2, r3, #6
 8002896:	f53f aea1 	bmi.w	80025dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff f885 	bl	80019a8 <HAL_GetTick>
 800289e:	1b00      	subs	r0, r0, r4
 80028a0:	2802      	cmp	r0, #2
 80028a2:	d9f6      	bls.n	8002892 <HAL_RCC_OscConfig+0x2e2>
 80028a4:	e6c8      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff f87f 	bl	80019a8 <HAL_GetTick>
 80028aa:	1b80      	subs	r0, r0, r6
 80028ac:	2802      	cmp	r0, #2
 80028ae:	d9d4      	bls.n	800285a <HAL_RCC_OscConfig+0x2aa>
 80028b0:	e6c2      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80028b2:	f7ff f879 	bl	80019a8 <HAL_GetTick>
 80028b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	019b      	lsls	r3, r3, #6
 80028bc:	f57f ae8e 	bpl.w	80025dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7ff f872 	bl	80019a8 <HAL_GetTick>
 80028c4:	1b00      	subs	r0, r0, r4
 80028c6:	2802      	cmp	r0, #2
 80028c8:	d9f6      	bls.n	80028b8 <HAL_RCC_OscConfig+0x308>
 80028ca:	e6b5      	b.n	8002638 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028cc:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80028ce:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	f43f ae9b 	beq.w	800260a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d8:	69e1      	ldr	r1, [r4, #28]
 80028da:	428a      	cmp	r2, r1
 80028dc:	f47f ae95 	bne.w	800260a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e4:	6a21      	ldr	r1, [r4, #32]
 80028e6:	428a      	cmp	r2, r1
 80028e8:	f47f ae8f 	bne.w	800260a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ec:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f2:	401a      	ands	r2, r3
 80028f4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80028f8:	f47f ae87 	bne.w	800260a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028fe:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002902:	0852      	lsrs	r2, r2, #1
 8002904:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002906:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800290a:	f47f ae7e 	bne.w	800260a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002910:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002914:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002918:	bf14      	ite	ne
 800291a:	2001      	movne	r0, #1
 800291c:	2000      	moveq	r0, #0
 800291e:	e68c      	b.n	800263a <HAL_RCC_OscConfig+0x8a>
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002924:	4913      	ldr	r1, [pc, #76]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002926:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002928:	688b      	ldr	r3, [r1, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d01b      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x46>
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11b      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002936:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002938:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800293c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002940:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002944:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002948:	bf1a      	itte	ne
 800294a:	480b      	ldrne	r0, [pc, #44]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x54>)
 800294c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	480b      	ldreq	r0, [pc, #44]	@ (800297c <HAL_RCC_GetSysClockFreq+0x58>)
 8002950:	fba1 0100 	umull	r0, r1, r1, r0
 8002954:	f7fd fcb4 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x50>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002960:	3301      	adds	r3, #1
 8002962:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002964:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002968:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296a:	4803      	ldr	r0, [pc, #12]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x54>)
 800296c:	e7fc      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800296e:	4803      	ldr	r0, [pc, #12]	@ (800297c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002970:	e7fa      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x44>
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	017d7840 	.word	0x017d7840
 800297c:	00f42400 	.word	0x00f42400

08002980 <HAL_RCC_ClockConfig>:
{
 8002980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002984:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002986:	4604      	mov	r4, r0
 8002988:	b910      	cbnz	r0, 8002990 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800298a:	2001      	movs	r0, #1
}
 800298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4a45      	ldr	r2, [pc, #276]	@ (8002aa8 <HAL_RCC_ClockConfig+0x128>)
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	428b      	cmp	r3, r1
 800299a:	d328      	bcc.n	80029ee <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	6821      	ldr	r1, [r4, #0]
 800299e:	078f      	lsls	r7, r1, #30
 80029a0:	d430      	bmi.n	8002a04 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	07c8      	lsls	r0, r1, #31
 80029a4:	d443      	bmi.n	8002a2e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a6:	4a40      	ldr	r2, [pc, #256]	@ (8002aa8 <HAL_RCC_ClockConfig+0x128>)
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	42ab      	cmp	r3, r5
 80029b0:	d866      	bhi.n	8002a80 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	0751      	lsls	r1, r2, #29
 80029b6:	d46f      	bmi.n	8002a98 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	0713      	lsls	r3, r2, #28
 80029ba:	d507      	bpl.n	80029cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029bc:	4a3b      	ldr	r2, [pc, #236]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
 80029be:	6921      	ldr	r1, [r4, #16]
 80029c0:	6893      	ldr	r3, [r2, #8]
 80029c2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80029c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029cc:	f7ff ffaa 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80029d0:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
 80029d2:	4a37      	ldr	r2, [pc, #220]	@ (8002ab0 <HAL_RCC_ClockConfig+0x130>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029da:	5cd3      	ldrb	r3, [r2, r3]
 80029dc:	40d8      	lsrs	r0, r3
 80029de:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <HAL_RCC_ClockConfig+0x134>)
 80029e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029e2:	4b35      	ldr	r3, [pc, #212]	@ (8002ab8 <HAL_RCC_ClockConfig+0x138>)
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f7fe ff9f 	bl	8001928 <HAL_InitTick>
  return HAL_OK;
 80029ea:	2000      	movs	r0, #0
 80029ec:	e7ce      	b.n	800298c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f023 030f 	bic.w	r3, r3, #15
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	428b      	cmp	r3, r1
 8002a00:	d1c3      	bne.n	800298a <HAL_RCC_ClockConfig+0xa>
 8002a02:	e7cb      	b.n	800299c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	f011 0f04 	tst.w	r1, #4
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
 8002a0a:	d003      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002a12:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	070e      	lsls	r6, r1, #28
 8002a16:	d503      	bpl.n	8002a20 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002a1e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68a0      	ldr	r0, [r4, #8]
 8002a24:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	e7b9      	b.n	80029a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	6861      	ldr	r1, [r4, #4]
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
 8002a32:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a34:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	d11b      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a38:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	d0a5      	beq.n	800298a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a44:	4f19      	ldr	r7, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	f022 0203 	bic.w	r2, r2, #3
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a4e:	f7fe ffab 	bl	80019a8 <HAL_GetTick>
 8002a52:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	6862      	ldr	r2, [r4, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a60:	d0a1      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a62:	f7fe ffa1 	bl	80019a8 <HAL_GetTick>
 8002a66:	1b80      	subs	r0, r0, r6
 8002a68:	4540      	cmp	r0, r8
 8002a6a:	d9f3      	bls.n	8002a54 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	e78d      	b.n	800298c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a70:	2902      	cmp	r1, #2
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002a78:	e7e0      	b.n	8002a3c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	f012 0f02 	tst.w	r2, #2
 8002a7e:	e7dd      	b.n	8002a3c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f023 030f 	bic.w	r3, r3, #15
 8002a86:	432b      	orrs	r3, r5
 8002a88:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	42ab      	cmp	r3, r5
 8002a92:	f47f af7a 	bne.w	800298a <HAL_RCC_ClockConfig+0xa>
 8002a96:	e78c      	b.n	80029b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4904      	ldr	r1, [pc, #16]	@ (8002aac <HAL_RCC_ClockConfig+0x12c>)
 8002a9a:	68e0      	ldr	r0, [r4, #12]
 8002a9c:	688b      	ldr	r3, [r1, #8]
 8002a9e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002aa2:	4303      	orrs	r3, r0
 8002aa4:	608b      	str	r3, [r1, #8]
 8002aa6:	e787      	b.n	80029b8 <HAL_RCC_ClockConfig+0x38>
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08009f20 	.word	0x08009f20
 8002ab4:	20000044 	.word	0x20000044
 8002ab8:	2000004c 	.word	0x2000004c

08002abc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002abc:	6803      	ldr	r3, [r0, #0]
{
 8002abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac2:	f013 0601 	ands.w	r6, r3, #1
{
 8002ac6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aca:	4aad      	ldr	r2, [pc, #692]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002acc:	6891      	ldr	r1, [r2, #8]
 8002ace:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8002ad2:	6091      	str	r1, [r2, #8]
 8002ad4:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8002ad6:	6891      	ldr	r1, [r2, #8]
 8002ad8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ada:	fab6 f686 	clz	r6, r6
 8002ade:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ae2:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8002ae6:	d012      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae8:	49a5      	ldr	r1, [pc, #660]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aea:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8002aec:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002af0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af4:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 8002af8:	bf08      	it	eq
 8002afa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002afc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b00:	bf16      	itet	ne
 8002b02:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002b06:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b08:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b0e:	02d8      	lsls	r0, r3, #11
 8002b10:	d510      	bpl.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b12:	489b      	ldr	r0, [pc, #620]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b14:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002b16:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b1e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002b22:	ea42 0201 	orr.w	r2, r2, r1
 8002b26:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b2a:	f000 8186 	beq.w	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	bf08      	it	eq
 8002b32:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002b34:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002b38:	bf18      	it	ne
 8002b3a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b3c:	0699      	lsls	r1, r3, #26
 8002b3e:	d532      	bpl.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b8f      	ldr	r3, [pc, #572]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b42:	4f90      	ldr	r7, [pc, #576]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fe ff23 	bl	80019a8 <HAL_GetTick>
 8002b62:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	05da      	lsls	r2, r3, #23
 8002b68:	f140 8169 	bpl.w	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6c:	4f84      	ldr	r7, [pc, #528]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b72:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002b76:	f040 816d 	bne.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002b7c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002b80:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002b84:	4a7e      	ldr	r2, [pc, #504]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b86:	f040 818a 	bne.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002b8a:	6891      	ldr	r1, [r2, #8]
 8002b8c:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8002b90:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8002b94:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8002b98:	4301      	orrs	r1, r0
 8002b9a:	6091      	str	r1, [r2, #8]
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	06d9      	lsls	r1, r3, #27
 8002baa:	d50c      	bpl.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bac:	4a74      	ldr	r2, [pc, #464]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bae:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002bb2:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8002bb6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8002bba:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002bbe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002bc0:	4301      	orrs	r1, r0
 8002bc2:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc6:	045a      	lsls	r2, r3, #17
 8002bc8:	d508      	bpl.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bca:	496d      	ldr	r1, [pc, #436]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bcc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002bce:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002bd2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002bd6:	4302      	orrs	r2, r0
 8002bd8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bdc:	041f      	lsls	r7, r3, #16
 8002bde:	d508      	bpl.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be0:	4967      	ldr	r1, [pc, #412]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002be4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002be8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002bec:	4302      	orrs	r2, r0
 8002bee:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf2:	03d8      	lsls	r0, r3, #15
 8002bf4:	d508      	bpl.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf6:	4962      	ldr	r1, [pc, #392]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bf8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002bfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002bfe:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002c02:	4302      	orrs	r2, r0
 8002c04:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c08:	0399      	lsls	r1, r3, #14
 8002c0a:	d508      	bpl.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c0c:	495c      	ldr	r1, [pc, #368]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c0e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002c10:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c14:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002c18:	4302      	orrs	r2, r0
 8002c1a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1e:	065a      	lsls	r2, r3, #25
 8002c20:	d508      	bpl.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c22:	4957      	ldr	r1, [pc, #348]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c24:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002c26:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c2a:	f022 0203 	bic.w	r2, r2, #3
 8002c2e:	4302      	orrs	r2, r0
 8002c30:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	061f      	lsls	r7, r3, #24
 8002c36:	d508      	bpl.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c38:	4951      	ldr	r1, [pc, #324]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c3a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002c3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c40:	f022 020c 	bic.w	r2, r2, #12
 8002c44:	4302      	orrs	r2, r0
 8002c46:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4a:	05d8      	lsls	r0, r3, #23
 8002c4c:	d508      	bpl.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4e:	494c      	ldr	r1, [pc, #304]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c50:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002c52:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c56:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002c5a:	4302      	orrs	r2, r0
 8002c5c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c60:	0599      	lsls	r1, r3, #22
 8002c62:	d508      	bpl.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c64:	4946      	ldr	r1, [pc, #280]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c66:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002c68:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c6c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002c70:	4302      	orrs	r2, r0
 8002c72:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c76:	055a      	lsls	r2, r3, #21
 8002c78:	d508      	bpl.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c7a:	4941      	ldr	r1, [pc, #260]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c7c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002c7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c86:	4302      	orrs	r2, r0
 8002c88:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c8c:	051f      	lsls	r7, r3, #20
 8002c8e:	d508      	bpl.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c90:	493b      	ldr	r1, [pc, #236]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c94:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c9c:	4302      	orrs	r2, r0
 8002c9e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ca2:	04d8      	lsls	r0, r3, #19
 8002ca4:	d508      	bpl.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ca6:	4936      	ldr	r1, [pc, #216]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ca8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002caa:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002cae:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cb8:	0499      	lsls	r1, r3, #18
 8002cba:	d508      	bpl.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002cbc:	4930      	ldr	r1, [pc, #192]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cbe:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002cc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002cc4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002cc8:	4302      	orrs	r2, r0
 8002cca:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cce:	025a      	lsls	r2, r3, #9
 8002cd0:	d508      	bpl.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cd2:	492b      	ldr	r1, [pc, #172]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cd4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002cd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002cda:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002cde:	4302      	orrs	r2, r0
 8002ce0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ce4:	029f      	lsls	r7, r3, #10
 8002ce6:	d50c      	bpl.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ce8:	4825      	ldr	r0, [pc, #148]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cea:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002cec:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002cf0:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cf4:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8002cf8:	bf08      	it	eq
 8002cfa:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002d02:	f013 0f08 	tst.w	r3, #8
 8002d06:	bf18      	it	ne
 8002d08:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0a:	0358      	lsls	r0, r3, #13
 8002d0c:	d508      	bpl.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d0e:	491c      	ldr	r1, [pc, #112]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d10:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002d12:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002d16:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d1a:	4302      	orrs	r2, r0
 8002d1c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d20:	0219      	lsls	r1, r3, #8
 8002d22:	d509      	bpl.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d24:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d26:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8002d2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002d2e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002d32:	4302      	orrs	r2, r0
 8002d34:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d38:	2e01      	cmp	r6, #1
 8002d3a:	f000 80b4 	beq.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	f100 80b1 	bmi.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d44:	2d01      	cmp	r5, #1
 8002d46:	d176      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d48:	4d0d      	ldr	r5, [pc, #52]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d52:	f7fe fe29 	bl	80019a8 <HAL_GetTick>
 8002d56:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	009f      	lsls	r7, r3, #2
 8002d5c:	f100 8127 	bmi.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d60:	6821      	ldr	r1, [r4, #0]
 8002d62:	030e      	lsls	r6, r1, #12
 8002d64:	d501      	bpl.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8002d66:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002d68:	b11b      	cbz	r3, 8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8002d6a:	02cd      	lsls	r5, r1, #11
 8002d6c:	d523      	bpl.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d70:	bb0b      	cbnz	r3, 8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d72:	4a03      	ldr	r2, [pc, #12]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002d74:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d78:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8002d7c:	e004      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002d90:	4303      	orrs	r3, r0
 8002d92:	6960      	ldr	r0, [r4, #20]
 8002d94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d98:	69a0      	ldr	r0, [r4, #24]
 8002d9a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002da2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002da6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002da8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002dac:	3801      	subs	r0, #1
 8002dae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002db2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002db6:	0288      	lsls	r0, r1, #10
 8002db8:	d515      	bpl.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002dba:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8002dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc0:	d111      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dc2:	4a82      	ldr	r2, [pc, #520]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002dc4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc8:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dcc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002dd0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002dd4:	4303      	orrs	r3, r0
 8002dd6:	6960      	ldr	r0, [r4, #20]
 8002dd8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ddc:	6a20      	ldr	r0, [r4, #32]
 8002dde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002de2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002de6:	070a      	lsls	r2, r1, #28
 8002de8:	d519      	bpl.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dea:	4a78      	ldr	r2, [pc, #480]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002dec:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002df4:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6961      	ldr	r1, [r4, #20]
 8002e00:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002e04:	69e1      	ldr	r1, [r4, #28]
 8002e06:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002e0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002e12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002e14:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e1e:	4c6b      	ldr	r4, [pc, #428]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fe fdbe 	bl	80019a8 <HAL_GetTick>
 8002e2c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f140 80c3 	bpl.w	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e009      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8002e3a:	2601      	movs	r6, #1
 8002e3c:	e67a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe fdb3 	bl	80019a8 <HAL_GetTick>
 8002e42:	eba0 0008 	sub.w	r0, r0, r8
 8002e46:	2864      	cmp	r0, #100	@ 0x64
 8002e48:	f67f ae8c 	bls.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002e4c:	2003      	movs	r0, #3
}
 8002e4e:	b003      	add	sp, #12
 8002e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e54:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f43f ae8e 	beq.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e60:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e6a:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002e6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e72:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8002e74:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	f57f ae7e 	bpl.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fd93 	bl	80019a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002e86:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e8a:	0798      	lsls	r0, r3, #30
 8002e8c:	f53f ae75 	bmi.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fd8a 	bl	80019a8 <HAL_GetTick>
 8002e94:	eba0 0008 	sub.w	r0, r0, r8
 8002e98:	4548      	cmp	r0, r9
 8002e9a:	d9f5      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002e9c:	e7d6      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9e:	6891      	ldr	r1, [r2, #8]
 8002ea0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8002ea4:	e679      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8002ea6:	4e49      	ldr	r6, [pc, #292]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002ea8:	6833      	ldr	r3, [r6, #0]
 8002eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002eb0:	f7fe fd7a 	bl	80019a8 <HAL_GetTick>
 8002eb4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	d472      	bmi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	07d7      	lsls	r7, r2, #31
 8002ec0:	d512      	bpl.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002ec2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ec4:	b983      	cbnz	r3, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec6:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eca:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ece:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed2:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6861      	ldr	r1, [r4, #4]
 8002eda:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002ede:	68a1      	ldr	r1, [r4, #8]
 8002ee0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ee4:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ee8:	0316      	lsls	r6, r2, #12
 8002eea:	d503      	bpl.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002eec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002ef4:	02d0      	lsls	r0, r2, #11
 8002ef6:	d51e      	bpl.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efe:	d11a      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f00:	4932      	ldr	r1, [pc, #200]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f02:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f06:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002f12:	4303      	orrs	r3, r0
 8002f14:	6860      	ldr	r0, [r4, #4]
 8002f16:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f1a:	68e0      	ldr	r0, [r4, #12]
 8002f1c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002f20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f24:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8002f28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f2a:	f020 001f 	bic.w	r0, r0, #31
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4303      	orrs	r3, r0
 8002f32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f36:	01d1      	lsls	r1, r2, #7
 8002f38:	d511      	bpl.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f3a:	4924      	ldr	r1, [pc, #144]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f3c:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f40:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f44:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002f48:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002f4c:	4303      	orrs	r3, r0
 8002f4e:	6860      	ldr	r0, [r4, #4]
 8002f50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002f54:	6920      	ldr	r0, [r4, #16]
 8002f56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002f5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f5e:	0192      	lsls	r2, r2, #6
 8002f60:	d50d      	bpl.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f62:	6923      	ldr	r3, [r4, #16]
 8002f64:	6862      	ldr	r2, [r4, #4]
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f6c:	68e2      	ldr	r2, [r4, #12]
 8002f6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f72:	68a2      	ldr	r2, [r4, #8]
 8002f74:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f7e:	4e13      	ldr	r6, [pc, #76]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002f80:	6833      	ldr	r3, [r6, #0]
 8002f82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f86:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002f88:	f7fe fd0e 	bl	80019a8 <HAL_GetTick>
 8002f8c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f8e:	6833      	ldr	r3, [r6, #0]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	f53f aed7 	bmi.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7fe fd07 	bl	80019a8 <HAL_GetTick>
 8002f9a:	1bc0      	subs	r0, r0, r7
 8002f9c:	2864      	cmp	r0, #100	@ 0x64
 8002f9e:	d9f6      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fa0:	e754      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa2:	f7fe fd01 	bl	80019a8 <HAL_GetTick>
 8002fa6:	1bc0      	subs	r0, r0, r7
 8002fa8:	2864      	cmp	r0, #100	@ 0x64
 8002faa:	d984      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002fac:	e74e      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fae:	f7fe fcfb 	bl	80019a8 <HAL_GetTick>
 8002fb2:	1b80      	subs	r0, r0, r6
 8002fb4:	2864      	cmp	r0, #100	@ 0x64
 8002fb6:	f67f aecf 	bls.w	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002fba:	e747      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fbc:	f7fe fcf4 	bl	80019a8 <HAL_GetTick>
 8002fc0:	1b40      	subs	r0, r0, r5
 8002fc2:	2864      	cmp	r0, #100	@ 0x64
 8002fc4:	f67f af33 	bls.w	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002fc8:	e740      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	b089      	sub	sp, #36	@ 0x24
 8002fd6:	460e      	mov	r6, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7fe fce6 	bl	80019a8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8002fdc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8002fde:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002fe0:	2108      	movs	r1, #8
 8002fe2:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8002fe4:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002fe8:	f000 ffa8 	bl	8003f3c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fec:	4604      	mov	r4, r0
 8002fee:	b9d8      	cbnz	r0, 8003028 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002ff0:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8002ff2:	6828      	ldr	r0, [r5, #0]
 8002ff4:	0409      	lsls	r1, r1, #16
 8002ff6:	f001 f852 	bl	800409e <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	b9a0      	cbnz	r0, 8003028 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8003002:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003004:	2130      	movs	r1, #48	@ 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003006:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003008:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800300a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800300e:	2302      	movs	r3, #2
 8003010:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003014:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003016:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003018:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800301a:	f000 fec7 	bl	8003dac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800301e:	6828      	ldr	r0, [r5, #0]
 8003020:	f001 f86f 	bl	8004102 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003024:	4604      	mov	r4, r0
 8003026:	b190      	cbz	r0, 800304e <SD_FindSCR.constprop.0+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8003028:	4620      	mov	r0, r4
 800302a:	b009      	add	sp, #36	@ 0x24
 800302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800302e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	d512      	bpl.n	800305a <SD_FindSCR.constprop.0+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003034:	f000 fe96 	bl	8003d64 <SDMMC_ReadFIFO>
 8003038:	ab08      	add	r3, sp, #32
 800303a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 800303e:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003040:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003044:	f7fe fcb0 	bl	80019a8 <HAL_GetTick>
 8003048:	1bc0      	subs	r0, r0, r7
 800304a:	3001      	adds	r0, #1
 800304c:	d023      	beq.n	8003096 <SD_FindSCR.constprop.0+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800304e:	6828      	ldr	r0, [r5, #0]
 8003050:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003052:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8003056:	d0ea      	beq.n	800302e <SD_FindSCR.constprop.0+0x5e>
 8003058:	e002      	b.n	8003060 <SD_FindSCR.constprop.0+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800305a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800305c:	0499      	lsls	r1, r3, #18
 800305e:	d4f1      	bmi.n	8003044 <SD_FindSCR.constprop.0+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003060:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003062:	071a      	lsls	r2, r3, #28
 8003064:	d502      	bpl.n	800306c <SD_FindSCR.constprop.0+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003066:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003068:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800306a:	e7dd      	b.n	8003028 <SD_FindSCR.constprop.0+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800306c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800306e:	079b      	lsls	r3, r3, #30
 8003070:	d501      	bpl.n	8003076 <SD_FindSCR.constprop.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8003072:	2402      	movs	r4, #2
 8003074:	e7f8      	b.n	8003068 <SD_FindSCR.constprop.0+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003076:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003078:	f014 0420 	ands.w	r4, r4, #32
 800307c:	d001      	beq.n	8003082 <SD_FindSCR.constprop.0+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800307e:	2420      	movs	r4, #32
 8003080:	e7f2      	b.n	8003068 <SD_FindSCR.constprop.0+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003082:	f240 533a 	movw	r3, #1338	@ 0x53a
 8003086:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003088:	9b01      	ldr	r3, [sp, #4]
 800308a:	ba1b      	rev	r3, r3
 800308c:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800308e:	9b00      	ldr	r3, [sp, #0]
 8003090:	ba1b      	rev	r3, r3
 8003092:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8003094:	e7c8      	b.n	8003028 <SD_FindSCR.constprop.0+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8003096:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800309a:	e7c5      	b.n	8003028 <SD_FindSCR.constprop.0+0x58>

0800309c <HAL_SD_MspInit>:
}
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_SD_ReadBlocks>:
{
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	460d      	mov	r5, r1
 80030a6:	b087      	sub	sp, #28
 80030a8:	4604      	mov	r4, r0
 80030aa:	4616      	mov	r6, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80030b2:	f7fe fc79 	bl	80019a8 <HAL_GetTick>
 80030b6:	4607      	mov	r7, r0
  if(NULL == pData)
 80030b8:	b93d      	cbnz	r5, 80030ca <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030c0:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	b007      	add	sp, #28
 80030c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80030ca:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	f040 80d7 	bne.w	8003282 <HAL_SD_ReadBlocks+0x1e2>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030d4:	eb06 0309 	add.w	r3, r6, r9
 80030d8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030da:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030dc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030de:	63a1      	str	r1, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030e0:	d903      	bls.n	80030ea <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	e7ea      	b.n	80030c0 <HAL_SD_ReadBlocks+0x20>
    hsd->State = HAL_SD_STATE_BUSY;
 80030ea:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80030ec:	f04f 0b02 	mov.w	fp, #2
    hsd->Instance->DCTRL = 0U;
 80030f0:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80030f2:	f04f 0a01 	mov.w	sl, #1
    hsd->State = HAL_SD_STATE_BUSY;
 80030f6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hsd->Instance->DCTRL = 0U;
 80030fc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030fe:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003100:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003108:	ea4f 2349 	mov.w	r3, r9, lsl #9
      add *= 512U;
 800310c:	bf18      	it	ne
 800310e:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003110:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003112:	2390      	movs	r3, #144	@ 0x90
 8003114:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	e9cd 3a04 	strd	r3, sl, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800311e:	f000 fe45 	bl	8003dac <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8003122:	45d1      	cmp	r9, sl
 8003124:	d912      	bls.n	800314c <HAL_SD_ReadBlocks+0xac>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003126:	4631      	mov	r1, r6
 8003128:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800312a:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800312e:	f000 ff37 	bl	8003fa0 <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003132:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003134:	b188      	cbz	r0, 800315a <HAL_SD_ReadBlocks+0xba>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003136:	4a55      	ldr	r2, [pc, #340]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800313a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800313c:	4303      	orrs	r3, r0
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800313e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003140:	2301      	movs	r3, #1
 8003142:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003146:	2300      	movs	r3, #0
 8003148:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 800314a:	e7ba      	b.n	80030c2 <HAL_SD_ReadBlocks+0x22>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800314c:	4631      	mov	r1, r6
 800314e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003150:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003154:	f000 ff0b 	bl	8003f6e <SDMMC_CmdReadSingleBlock>
 8003158:	e7eb      	b.n	8003132 <HAL_SD_ReadBlocks+0x92>
    dataremaining = config.DataLength;
 800315a:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003160:	f413 7f95 	tst.w	r3, #298	@ 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003164:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003166:	d00c      	beq.n	8003182 <HAL_SD_ReadBlocks+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003168:	05db      	lsls	r3, r3, #23
 800316a:	d538      	bpl.n	80031de <HAL_SD_ReadBlocks+0x13e>
 800316c:	f1b9 0f01 	cmp.w	r9, #1
 8003170:	d935      	bls.n	80031de <HAL_SD_ReadBlocks+0x13e>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003172:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003174:	2b03      	cmp	r3, #3
 8003176:	d032      	beq.n	80031de <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003178:	f000 ff5e 	bl	8004038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800317c:	b378      	cbz	r0, 80031de <HAL_SD_ReadBlocks+0x13e>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	e7d9      	b.n	8003136 <HAL_SD_ReadBlocks+0x96>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003182:	041a      	lsls	r2, r3, #16
 8003184:	d518      	bpl.n	80031b8 <HAL_SD_ReadBlocks+0x118>
 8003186:	b1be      	cbz	r6, 80031b8 <HAL_SD_ReadBlocks+0x118>
 8003188:	f105 0a04 	add.w	sl, r5, #4
 800318c:	f105 0b24 	add.w	fp, r5, #36	@ 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003190:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8003192:	f10a 0a04 	add.w	sl, sl, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8003196:	f000 fde5 	bl	8003d64 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800319a:	f80a 0c08 	strb.w	r0, [sl, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800319e:	0a03      	lsrs	r3, r0, #8
 80031a0:	f80a 3c07 	strb.w	r3, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80031a4:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031a6:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80031a8:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80031ac:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 80031b0:	45da      	cmp	sl, fp
 80031b2:	d1ed      	bne.n	8003190 <HAL_SD_ReadBlocks+0xf0>
 80031b4:	3520      	adds	r5, #32
 80031b6:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80031b8:	f7fe fbf6 	bl	80019a8 <HAL_GetTick>
 80031bc:	1bc0      	subs	r0, r0, r7
 80031be:	4540      	cmp	r0, r8
 80031c0:	d3cc      	bcc.n	800315c <HAL_SD_ReadBlocks+0xbc>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031c2:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80031c4:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031c6:	4a31      	ldr	r2, [pc, #196]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031d0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031d8:	2300      	movs	r3, #0
 80031da:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_TIMEOUT;
 80031dc:	e772      	b.n	80030c4 <HAL_SD_ReadBlocks+0x24>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031e2:	f011 0108 	ands.w	r1, r1, #8
 80031e6:	d005      	beq.n	80031f4 <HAL_SD_ReadBlocks+0x154>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031e8:	4a28      	ldr	r2, [pc, #160]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031ee:	f043 0308 	orr.w	r3, r3, #8
 80031f2:	e7a4      	b.n	800313e <HAL_SD_ReadBlocks+0x9e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80031f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f6:	f012 0202 	ands.w	r2, r2, #2
 80031fa:	d00a      	beq.n	8003212 <HAL_SD_ReadBlocks+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031fc:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003200:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003208:	2301      	movs	r3, #1
 800320a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800320e:	6321      	str	r1, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8003210:	e757      	b.n	80030c2 <HAL_SD_ReadBlocks+0x22>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003212:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003214:	0689      	lsls	r1, r1, #26
 8003216:	d525      	bpl.n	8003264 <HAL_SD_ReadBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003218:	491c      	ldr	r1, [pc, #112]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 800321a:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800321c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800321e:	f043 0320 	orr.w	r3, r3, #32
 8003222:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003224:	2301      	movs	r3, #1
 8003226:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800322a:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 800322c:	e749      	b.n	80030c2 <HAL_SD_ReadBlocks+0x22>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800322e:	f000 fd99 	bl	8003d64 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003232:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003236:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 8003238:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800323a:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800323c:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003240:	0c03      	lsrs	r3, r0, #16
 8003242:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003246:	0e03      	lsrs	r3, r0, #24
 8003248:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800324c:	f7fe fbac 	bl	80019a8 <HAL_GetTick>
 8003250:	1bc0      	subs	r0, r0, r7
 8003252:	4540      	cmp	r0, r8
 8003254:	d307      	bcc.n	8003266 <HAL_SD_ReadBlocks+0x1c6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4a0c      	ldr	r2, [pc, #48]	@ (800328c <HAL_SD_ReadBlocks+0x1ec>)
 800325a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800325c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800325e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003262:	e76c      	b.n	800313e <HAL_SD_ReadBlocks+0x9e>
 8003264:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800326a:	029b      	lsls	r3, r3, #10
 800326c:	d501      	bpl.n	8003272 <HAL_SD_ReadBlocks+0x1d2>
 800326e:	2e00      	cmp	r6, #0
 8003270:	d1dd      	bne.n	800322e <HAL_SD_ReadBlocks+0x18e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003272:	f240 533a 	movw	r3, #1338	@ 0x53a
 8003276:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003278:	2301      	movs	r3, #1
    return HAL_OK;
 800327a:	2000      	movs	r0, #0
    hsd->State = HAL_SD_STATE_READY;
 800327c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 8003280:	e720      	b.n	80030c4 <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003282:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003288:	e71a      	b.n	80030c0 <HAL_SD_ReadBlocks+0x20>
 800328a:	bf00      	nop
 800328c:	004005ff 	.word	0x004005ff

08003290 <HAL_SD_WriteBlocks>:
{
 8003290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003294:	460d      	mov	r5, r1
 8003296:	b088      	sub	sp, #32
 8003298:	4604      	mov	r4, r0
 800329a:	4691      	mov	r9, r2
 800329c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800329e:	f7fe fb83 	bl	80019a8 <HAL_GetTick>
 80032a2:	4680      	mov	r8, r0
  if(NULL == pData)
 80032a4:	b93d      	cbnz	r5, 80032b6 <HAL_SD_WriteBlocks+0x26>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032ac:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
}
 80032b0:	b008      	add	sp, #32
 80032b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80032b6:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	f040 80a6 	bne.w	800340c <HAL_SD_WriteBlocks+0x17c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032c0:	eb09 0307 	add.w	r3, r9, r7
 80032c4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032c6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032c8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032ca:	63a1      	str	r1, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032cc:	d903      	bls.n	80032d6 <HAL_SD_WriteBlocks+0x46>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80032d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	e7ea      	b.n	80032ac <HAL_SD_WriteBlocks+0x1c>
    hsd->State = HAL_SD_STATE_BUSY;
 80032d6:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 80032d8:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80032da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hsd->Instance->DCTRL = 0U;
 80032e0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032e2:	2190      	movs	r1, #144	@ 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80032e4:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032ec:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 80032f0:	bf18      	it	ne
 80032f2:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032f6:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80032fe:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003300:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003302:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003304:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003306:	f000 fd51 	bl	8003dac <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800330a:	2f01      	cmp	r7, #1
 800330c:	d912      	bls.n	8003334 <HAL_SD_WriteBlocks+0xa4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800330e:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003310:	4649      	mov	r1, r9
 8003312:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003314:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003316:	f000 fe75 	bl	8004004 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800331a:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 800331c:	b188      	cbz	r0, 8003342 <HAL_SD_WriteBlocks+0xb2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800331e:	4a3d      	ldr	r2, [pc, #244]	@ (8003414 <HAL_SD_WriteBlocks+0x184>)
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003322:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003324:	4303      	orrs	r3, r0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003326:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003328:	2301      	movs	r3, #1
 800332a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8003332:	e7bc      	b.n	80032ae <HAL_SD_WriteBlocks+0x1e>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003334:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003336:	4649      	mov	r1, r9
 8003338:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800333a:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800333c:	f000 fe49 	bl	8003fd2 <SDMMC_CmdWriteSingleBlock>
 8003340:	e7eb      	b.n	800331a <HAL_SD_WriteBlocks+0x8a>
    dataremaining = config.DataLength;
 8003342:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003348:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800334c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800334e:	d00b      	beq.n	8003368 <HAL_SD_WriteBlocks+0xd8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	d52b      	bpl.n	80033ac <HAL_SD_WriteBlocks+0x11c>
 8003354:	2f01      	cmp	r7, #1
 8003356:	d929      	bls.n	80033ac <HAL_SD_WriteBlocks+0x11c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003358:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800335a:	2b03      	cmp	r3, #3
 800335c:	d026      	beq.n	80033ac <HAL_SD_WriteBlocks+0x11c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800335e:	f000 fe6b 	bl	8004038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003362:	b318      	cbz	r0, 80033ac <HAL_SD_WriteBlocks+0x11c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	e7da      	b.n	800331e <HAL_SD_WriteBlocks+0x8e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003368:	045a      	lsls	r2, r3, #17
 800336a:	d50c      	bpl.n	8003386 <HAL_SD_WriteBlocks+0xf6>
 800336c:	b15e      	cbz	r6, 8003386 <HAL_SD_WriteBlocks+0xf6>
 800336e:	f105 0a20 	add.w	sl, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003376:	a901      	add	r1, sp, #4
 8003378:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800337a:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800337c:	f000 fcf5 	bl	8003d6a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003380:	45aa      	cmp	sl, r5
 8003382:	d1f6      	bne.n	8003372 <HAL_SD_WriteBlocks+0xe2>
 8003384:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003386:	f7fe fb0f 	bl	80019a8 <HAL_GetTick>
 800338a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800338c:	eba0 0008 	sub.w	r0, r0, r8
 8003390:	4298      	cmp	r0, r3
 8003392:	d3d7      	bcc.n	8003344 <HAL_SD_WriteBlocks+0xb4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003394:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003396:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003398:	4a1e      	ldr	r2, [pc, #120]	@ (8003414 <HAL_SD_WriteBlocks+0x184>)
 800339a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800339c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800339e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_TIMEOUT;
 80033aa:	e781      	b.n	80032b0 <HAL_SD_WriteBlocks+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033b0:	f011 0108 	ands.w	r1, r1, #8
 80033b4:	d005      	beq.n	80033c2 <HAL_SD_WriteBlocks+0x132>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033b6:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <HAL_SD_WriteBlocks+0x184>)
 80033b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033ba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	e7b1      	b.n	8003326 <HAL_SD_WriteBlocks+0x96>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80033c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c4:	f012 0202 	ands.w	r2, r2, #2
 80033c8:	d00a      	beq.n	80033e0 <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033ca:	4a12      	ldr	r2, [pc, #72]	@ (8003414 <HAL_SD_WriteBlocks+0x184>)
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033dc:	6321      	str	r1, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80033de:	e766      	b.n	80032ae <HAL_SD_WriteBlocks+0x1e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80033e0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80033e2:	f010 0010 	ands.w	r0, r0, #16
 80033e6:	d00a      	beq.n	80033fe <HAL_SD_WriteBlocks+0x16e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033e8:	490a      	ldr	r1, [pc, #40]	@ (8003414 <HAL_SD_WriteBlocks+0x184>)
 80033ea:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80033ee:	f043 0310 	orr.w	r3, r3, #16
 80033f2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033fa:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 80033fc:	e757      	b.n	80032ae <HAL_SD_WriteBlocks+0x1e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80033fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 800340a:	e751      	b.n	80032b0 <HAL_SD_WriteBlocks+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800340c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800340e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003412:	e74b      	b.n	80032ac <HAL_SD_WriteBlocks+0x1c>
 8003414:	004005ff 	.word	0x004005ff

08003418 <HAL_SD_ErrorCallback>:
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
 8003418:	4770      	bx	lr
	...

0800341c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800341c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
{
 800341e:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003420:	0f90      	lsrs	r0, r2, #30
{
 8003422:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003424:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003426:	f3c2 6083 	ubfx	r0, r2, #26, #4
 800342a:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800342c:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8003430:	7088      	strb	r0, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003432:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8003436:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003438:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800343c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800343e:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003440:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003442:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003444:	0d10      	lsrs	r0, r2, #20
 8003446:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003448:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800344c:	7208      	strb	r0, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800344e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003452:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003454:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8003458:	7288      	strb	r0, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800345a:	f3c2 3040 	ubfx	r0, r2, #13, #1
 800345e:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003460:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8003464:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003466:	2000      	movs	r0, #0
 8003468:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800346a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800346c:	2800      	cmp	r0, #0
 800346e:	d16b      	bne.n	8003548 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003470:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8003474:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003476:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 800347a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800347e:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003480:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 8003484:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003486:	f3c0 6202 	ubfx	r2, r0, #24, #3
 800348a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800348c:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8003490:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003492:	f3c0 4282 	ubfx	r2, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003496:	f3c0 30c2 	ubfx	r0, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800349a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800349c:	7608      	strb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800349e:	6908      	ldr	r0, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034a0:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034a2:	3001      	adds	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034a4:	f002 0207 	and.w	r2, r2, #7
 80034a8:	3202      	adds	r2, #2
 80034aa:	4090      	lsls	r0, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034ac:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034ae:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034b0:	7a0c      	ldrb	r4, [r1, #8]
 80034b2:	f004 040f 	and.w	r4, r4, #15
 80034b6:	40a2      	lsls	r2, r4
 80034b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034ba:	0a52      	lsrs	r2, r2, #9
 80034bc:	4342      	muls	r2, r0
 80034be:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034c4:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80034c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034c8:	f3c2 3080 	ubfx	r0, r2, #14, #1
 80034cc:	7648      	strb	r0, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80034ce:	f3c2 10c6 	ubfx	r0, r2, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80034d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80034d6:	7688      	strb	r0, [r1, #26]
  pCSD->Reserved3 = 0;
 80034d8:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80034da:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	0fda      	lsrs	r2, r3, #31
 80034e0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80034e2:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80034e6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80034e8:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80034ec:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80034ee:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80034f2:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80034f4:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80034f8:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80034fc:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8003500:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003504:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003508:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800350c:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003510:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8003514:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003518:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800351c:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003520:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8003524:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003528:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800352c:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003530:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003534:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003538:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800353c:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8003540:	2301      	movs	r3, #1
 8003542:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
  return HAL_OK;
 8003546:	e01b      	b.n	8003580 <HAL_SD_GetCardCSD+0x164>
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003548:	2801      	cmp	r0, #1
 800354a:	d10f      	bne.n	800356c <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800354c:	0412      	lsls	r2, r2, #16
 800354e:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
 8003552:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8003556:	4302      	orrs	r2, r0
 8003558:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800355a:	690a      	ldr	r2, [r1, #16]
 800355c:	3201      	adds	r2, #1
 800355e:	0292      	lsls	r2, r2, #10
 8003560:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800356a:	e7a9      	b.n	80034c0 <HAL_SD_GetCardCSD+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800356c:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 800356e:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003570:	4904      	ldr	r1, [pc, #16]	@ (8003584 <HAL_SD_GetCardCSD+0x168>)
 8003572:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003576:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800357c:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 8003580:	bd10      	pop	{r4, pc}
 8003582:	bf00      	nop
 8003584:	004005ff 	.word	0x004005ff

08003588 <HAL_SD_InitCard>:
{
 8003588:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800358a:	2300      	movs	r3, #0
{
 800358c:	b099      	sub	sp, #100	@ 0x64
 800358e:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003590:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003592:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003596:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800359a:	2376      	movs	r3, #118	@ 0x76
 800359c:	930c      	str	r3, [sp, #48]	@ 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 800359e:	ab0a      	add	r3, sp, #40	@ 0x28
 80035a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035a4:	ab07      	add	r3, sp, #28
 80035a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80035aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ac:	6820      	ldr	r0, [r4, #0]
 80035ae:	f000 fbbd 	bl	8003d2c <SDMMC_Init>
  if(status != HAL_OK)
 80035b2:	4605      	mov	r5, r0
 80035b4:	bb70      	cbnz	r0, 8003614 <HAL_SD_InitCard+0x8c>
  __HAL_SD_DISABLE(hsd);
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	6843      	ldr	r3, [r0, #4]
 80035ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035be:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80035c0:	f000 fbd8 	bl	8003d74 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80035c4:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 80035c6:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 80035c8:	6853      	ldr	r3, [r2, #4]
 80035ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ce:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 80035d0:	f7fe f9f0 	bl	80019b4 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035d4:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80035d6:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035d8:	f000 fbfc 	bl	8003dd4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035dc:	4605      	mov	r5, r0
 80035de:	b998      	cbnz	r0, 8003608 <HAL_SD_InitCard+0x80>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	f000 fed3 	bl	800438c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e6:	b130      	cbz	r0, 80035f6 <HAL_SD_InitCard+0x6e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035e8:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 80035ea:	64a5      	str	r5, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035ec:	f000 fbf2 	bl	8003dd4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80035f0:	b1a0      	cbz	r0, 800361c <HAL_SD_InitCard+0x94>
      return errorstate;
 80035f2:	4605      	mov	r5, r0
 80035f4:	e008      	b.n	8003608 <HAL_SD_InitCard+0x80>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80035f6:	2301      	movs	r3, #1
 80035f8:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035fa:	2100      	movs	r1, #0
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	f000 fd4e 	bl	800409e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003602:	b170      	cbz	r0, 8003622 <HAL_SD_InitCard+0x9a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003604:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8003608:	2301      	movs	r3, #1
 800360a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800360e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003610:	432b      	orrs	r3, r5
 8003612:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8003614:	2501      	movs	r5, #1
}
 8003616:	4628      	mov	r0, r5
 8003618:	b019      	add	sp, #100	@ 0x64
 800361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800361c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800361e:	2b01      	cmp	r3, #1
 8003620:	d0eb      	beq.n	80035fa <HAL_SD_InitCard+0x72>
{
 8003622:	2100      	movs	r1, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003624:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003628:	4f58      	ldr	r7, [pc, #352]	@ (800378c <HAL_SD_InitCard+0x204>)
 800362a:	e014      	b.n	8003656 <HAL_SD_InitCard+0xce>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	f000 fd36 	bl	800409e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003632:	4605      	mov	r5, r0
 8003634:	2800      	cmp	r0, #0
 8003636:	d1e7      	bne.n	8003608 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003638:	4639      	mov	r1, r7
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	f000 fe08 	bl	8004250 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003640:	2800      	cmp	r0, #0
 8003642:	d1df      	bne.n	8003604 <HAL_SD_InitCard+0x7c>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003644:	4629      	mov	r1, r5
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	f000 fbad 	bl	8003da6 <SDMMC_GetResponse>
    count++;
 800364c:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800364e:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003650:	0fc1      	lsrs	r1, r0, #31
    count++;
 8003652:	3301      	adds	r3, #1
 8003654:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003656:	9b06      	ldr	r3, [sp, #24]
 8003658:	42b3      	cmp	r3, r6
 800365a:	d801      	bhi.n	8003660 <HAL_SD_InitCard+0xd8>
 800365c:	2900      	cmp	r1, #0
 800365e:	d0e5      	beq.n	800362c <HAL_SD_InitCard+0xa4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003660:	9b06      	ldr	r3, [sp, #24]
 8003662:	42b3      	cmp	r3, r6
 8003664:	d811      	bhi.n	800368a <HAL_SD_InitCard+0x102>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003666:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 800366a:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8003670:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003674:	f000 fb82 	bl	8003d7c <SDMMC_GetPowerState>
 8003678:	b950      	cbnz	r0, 8003690 <HAL_SD_InitCard+0x108>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800367a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800367e:	2301      	movs	r3, #1
 8003680:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003684:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003686:	430b      	orrs	r3, r1
 8003688:	e7c3      	b.n	8003612 <HAL_SD_InitCard+0x8a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800368a:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 800368e:	e7bb      	b.n	8003608 <HAL_SD_InitCard+0x80>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003690:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003692:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003694:	2b03      	cmp	r3, #3
 8003696:	d043      	beq.n	8003720 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003698:	f000 fd8c 	bl	80041b4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800369c:	4601      	mov	r1, r0
 800369e:	2800      	cmp	r0, #0
 80036a0:	d1ed      	bne.n	800367e <HAL_SD_InitCard+0xf6>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	f000 fb7f 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80036a8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036aa:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	f000 fb7a 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80036b2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80036b4:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80036b6:	6820      	ldr	r0, [r4, #0]
 80036b8:	f000 fb75 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80036bc:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80036be:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	f000 fb70 	bl	8003da6 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80036c8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d027      	beq.n	8003720 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036d0:	f10d 0116 	add.w	r1, sp, #22
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	f000 fe15 	bl	8004304 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036da:	4601      	mov	r1, r0
 80036dc:	2800      	cmp	r0, #0
 80036de:	d1ce      	bne.n	800367e <HAL_SD_InitCard+0xf6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036e2:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d01b      	beq.n	8003720 <HAL_SD_InitCard+0x198>
    hsd->SdCard.RelCardAdd = sd_rca;
 80036e8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80036ec:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036ee:	0409      	lsls	r1, r1, #16
 80036f0:	f000 fd76 	bl	80041e0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036f4:	4601      	mov	r1, r0
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d1c1      	bne.n	800367e <HAL_SD_InitCard+0xf6>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	f000 fb53 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003700:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003702:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	f000 fb4e 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800370a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800370c:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	f000 fb49 	bl	8003da6 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003714:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003716:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003718:	6820      	ldr	r0, [r4, #0]
 800371a:	f000 fb44 	bl	8003da6 <SDMMC_GetResponse>
 800371e:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003720:	2104      	movs	r1, #4
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	f000 fb3f 	bl	8003da6 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003728:	a90d      	add	r1, sp, #52	@ 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800372a:	0d00      	lsrs	r0, r0, #20
 800372c:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff fe74 	bl	800341c <HAL_SD_GetCardCSD>
 8003734:	4605      	mov	r5, r0
 8003736:	bb28      	cbnz	r0, 8003784 <HAL_SD_InitCard+0x1fc>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003738:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800373a:	4603      	mov	r3, r0
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	0412      	lsls	r2, r2, #16
 8003740:	f000 fc94 	bl	800406c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003744:	4601      	mov	r1, r0
 8003746:	2800      	cmp	r0, #0
 8003748:	d199      	bne.n	800367e <HAL_SD_InitCard+0xf6>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800374a:	f104 0310 	add.w	r3, r4, #16
 800374e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003752:	1d23      	adds	r3, r4, #4
 8003754:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	f000 fae6 	bl	8003d2c <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	f000 fbe9 	bl	8003f3c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800376a:	2800      	cmp	r0, #0
 800376c:	f43f af53 	beq.w	8003616 <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	4a07      	ldr	r2, [pc, #28]	@ (8003790 <HAL_SD_InitCard+0x208>)
 8003774:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003776:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003778:	4303      	orrs	r3, r0
 800377a:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800377c:	2301      	movs	r3, #1
 800377e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003782:	e747      	b.n	8003614 <HAL_SD_InitCard+0x8c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003784:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8003788:	e779      	b.n	800367e <HAL_SD_InitCard+0xf6>
 800378a:	bf00      	nop
 800378c:	c1100000 	.word	0xc1100000
 8003790:	004005ff 	.word	0x004005ff

08003794 <HAL_SD_Init>:
{
 8003794:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8003796:	4604      	mov	r4, r0
 8003798:	b908      	cbnz	r0, 800379e <HAL_SD_Init+0xa>
    return HAL_ERROR;
 800379a:	2001      	movs	r0, #1
}
 800379c:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800379e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80037a2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037a6:	b913      	cbnz	r3, 80037ae <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80037a8:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80037aa:	f7ff fc77 	bl	800309c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80037ae:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80037b0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80037b2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80037b6:	f7ff fee7 	bl	8003588 <HAL_SD_InitCard>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d1ed      	bne.n	800379a <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80037be:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037c0:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80037c2:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 80037c4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 80037c8:	e7e8      	b.n	800379c <HAL_SD_Init+0x8>

080037ca <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037ca:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80037cc:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037ce:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80037d0:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037d2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80037d4:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037d6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80037d8:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80037dc:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80037de:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80037e0:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80037e2:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80037e4:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037e6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
}
 80037e8:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037ea:	61cb      	str	r3, [r1, #28]
}
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_SD_ConfigWideBusOperation>:
{
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80037f2:	2303      	movs	r3, #3
{
 80037f4:	4604      	mov	r4, r0
 80037f6:	b08b      	sub	sp, #44	@ 0x2c
 80037f8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80037fa:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80037fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003800:	6800      	ldr	r0, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003802:	2b03      	cmp	r3, #3
 8003804:	d002      	beq.n	800380c <HAL_SD_ConfigWideBusOperation+0x1c>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003806:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800380a:	d103      	bne.n	8003814 <HAL_SD_ConfigWideBusOperation+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800380c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003812:	e01d      	b.n	8003850 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003814:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003818:	d137      	bne.n	800388a <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 800381a:	2100      	movs	r1, #0
 800381c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003820:	f000 fac1 	bl	8003da6 <SDMMC_GetResponse>
 8003824:	0180      	lsls	r0, r0, #6
 8003826:	d449      	bmi.n	80038bc <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003828:	a904      	add	r1, sp, #16
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fbd0 	bl	8002fd0 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003830:	b960      	cbnz	r0, 800384c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003832:	9b05      	ldr	r3, [sp, #20]
 8003834:	0359      	lsls	r1, r3, #13
 8003836:	d544      	bpl.n	80038c2 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003838:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800383a:	6820      	ldr	r0, [r4, #0]
 800383c:	0409      	lsls	r1, r1, #16
 800383e:	f000 fc2e 	bl	800409e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003842:	b918      	cbnz	r0, 800384c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003844:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	f000 fc42 	bl	80040d0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800384c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800384e:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003850:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003852:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003854:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003856:	2e00      	cmp	r6, #0
 8003858:	d03a      	beq.n	80038d0 <HAL_SD_ConfigWideBusOperation+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800385a:	4b29      	ldr	r3, [pc, #164]	@ (8003900 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 800385c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003860:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003864:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f000 fb67 	bl	8003f3c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800386e:	b130      	cbz	r0, 800387e <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003870:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8003872:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003874:	4a22      	ldr	r2, [pc, #136]	@ (8003900 <HAL_SD_ConfigWideBusOperation+0x110>)
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003878:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800387a:	4303      	orrs	r3, r0
 800387c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 800387e:	2301      	movs	r3, #1
}
 8003880:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003882:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003886:	b00b      	add	sp, #44	@ 0x2c
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800388a:	b9e9      	cbnz	r1, 80038c8 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 800388c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003890:	f000 fa89 	bl	8003da6 <SDMMC_GetResponse>
 8003894:	0182      	lsls	r2, r0, #6
 8003896:	d411      	bmi.n	80038bc <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8003898:	a904      	add	r1, sp, #16
 800389a:	4620      	mov	r0, r4
 800389c:	f7ff fb98 	bl	8002fd0 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1d3      	bne.n	800384c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80038a4:	9b05      	ldr	r3, [sp, #20]
 80038a6:	03db      	lsls	r3, r3, #15
 80038a8:	d50b      	bpl.n	80038c2 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80038aa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80038ac:	6820      	ldr	r0, [r4, #0]
 80038ae:	0409      	lsls	r1, r1, #16
 80038b0:	f000 fbf5 	bl	800409e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d1c9      	bne.n	800384c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80038b8:	4601      	mov	r1, r0
 80038ba:	e7c4      	b.n	8003846 <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80038bc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80038c0:	e7c4      	b.n	800384c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038c2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80038c6:	e7c1      	b.n	800384c <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80038ce:	e7bf      	b.n	8003850 <HAL_SD_ConfigWideBusOperation+0x60>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80038d0:	6863      	ldr	r3, [r4, #4]
 80038d2:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038d4:	68a3      	ldr	r3, [r4, #8]
 80038d6:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038d8:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80038da:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038de:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038e2:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038e4:	69a3      	ldr	r3, [r4, #24]
 80038e6:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 80038e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80038ea:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80038ee:	ab04      	add	r3, sp, #16
 80038f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038f4:	4638      	mov	r0, r7
 80038f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f8:	f000 fa18 	bl	8003d2c <SDMMC_Init>
 80038fc:	e7b2      	b.n	8003864 <HAL_SD_ConfigWideBusOperation+0x74>
 80038fe:	bf00      	nop
 8003900:	004005ff 	.word	0x004005ff

08003904 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003904:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 8003906:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003908:	0409      	lsls	r1, r1, #16
{
 800390a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f000 fc11 	bl	8004134 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003912:	4601      	mov	r1, r0
 8003914:	b928      	cbnz	r0, 8003922 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	f000 fa45 	bl	8003da6 <SDMMC_GetResponse>
}
 800391c:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8003920:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003922:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003924:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 8003926:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8003928:	63a3      	str	r3, [r4, #56]	@ 0x38
 800392a:	e7f7      	b.n	800391c <HAL_SD_GetCardState+0x18>

0800392c <SD_DMATxAbort>:
{
 800392c:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800392e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003930:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003934:	6823      	ldr	r3, [r4, #0]
  CardState = HAL_SD_GetCardState(hsd);
 8003936:	4620      	mov	r0, r4
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38
  CardState = HAL_SD_GetCardState(hsd);
 800393a:	f7ff ffe3 	bl	8003904 <HAL_SD_GetCardState>
  hsd->State = HAL_SD_STATE_READY;
 800393e:	2301      	movs	r3, #1
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003940:	3805      	subs	r0, #5
  hsd->State = HAL_SD_STATE_READY;
 8003942:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003946:	2300      	movs	r3, #0
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003948:	2801      	cmp	r0, #1
  hsd->Context = SD_CONTEXT_NONE;
 800394a:	6323      	str	r3, [r4, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800394c:	d805      	bhi.n	800395a <SD_DMATxAbort+0x2e>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	f000 fb72 	bl	8004038 <SDMMC_CmdStopTransfer>
 8003954:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003956:	4303      	orrs	r3, r0
 8003958:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800395a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    HAL_SD_AbortCallback(hsd);
 800395c:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800395e:	b913      	cbnz	r3, 8003966 <SD_DMATxAbort+0x3a>
    HAL_SD_AbortCallback(hsd);
 8003960:	f7fd fe67 	bl	8001632 <HAL_SD_AbortCallback>
}
 8003964:	bd10      	pop	{r4, pc}
    HAL_SD_ErrorCallback(hsd);
 8003966:	f7ff fd57 	bl	8003418 <HAL_SD_ErrorCallback>
}
 800396a:	e7fb      	b.n	8003964 <SD_DMATxAbort+0x38>

0800396c <HAL_SD_IRQHandler>:
{
 800396c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t context = hsd->Context;
 8003970:	6b05      	ldr	r5, [r0, #48]	@ 0x30
{
 8003972:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003974:	6800      	ldr	r0, [r0, #0]
 8003976:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003978:	041f      	lsls	r7, r3, #16
 800397a:	d51f      	bpl.n	80039bc <HAL_SD_IRQHandler+0x50>
 800397c:	072e      	lsls	r6, r5, #28
 800397e:	d51d      	bpl.n	80039bc <HAL_SD_IRQHandler+0x50>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
  dataremaining = hsd->RxXferSize;
 8003980:	e9d4 670a 	ldrd	r6, r7, [r4, #40]	@ 0x28

  if (dataremaining > 0U)
 8003984:	b1bf      	cbz	r7, 80039b6 <HAL_SD_IRQHandler+0x4a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003986:	1d35      	adds	r5, r6, #4
 8003988:	f106 0824 	add.w	r8, r6, #36	@ 0x24
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800398c:	6820      	ldr	r0, [r4, #0]
    for(count = 0U; count < 8U; count++)
 800398e:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 8003990:	f000 f9e8 	bl	8003d64 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8003994:	f805 0c08 	strb.w	r0, [r5, #-8]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003998:	0a03      	lsrs	r3, r0, #8
 800399a:	f805 3c07 	strb.w	r3, [r5, #-7]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800399e:	0c03      	lsrs	r3, r0, #16
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039a0:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80039a2:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039a6:	f805 0c05 	strb.w	r0, [r5, #-5]
    for(count = 0U; count < 8U; count++)
 80039aa:	45a8      	cmp	r8, r5
 80039ac:	d1ee      	bne.n	800398c <HAL_SD_IRQHandler+0x20>
      tmp++;
      dataremaining--;
    }

    hsd->pRxBuffPtr = tmp;
 80039ae:	3620      	adds	r6, #32
    hsd->RxXferSize = dataremaining;
 80039b0:	3f20      	subs	r7, #32
    hsd->pRxBuffPtr = tmp;
 80039b2:	62a6      	str	r6, [r4, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80039b4:	62e7      	str	r7, [r4, #44]	@ 0x2c
}
 80039b6:	b002      	add	sp, #8
 80039b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80039bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80039be:	05d9      	lsls	r1, r3, #23
 80039c0:	d544      	bpl.n	8003a4c <HAL_SD_IRQHandler+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80039c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if((context & SD_CONTEXT_IT) != 0U)
 80039c6:	072a      	lsls	r2, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80039c8:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80039cc:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 80039d0:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80039d4:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80039d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 80039de:	d51a      	bpl.n	8003a16 <HAL_SD_IRQHandler+0xaa>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039e0:	f015 0f22 	tst.w	r5, #34	@ 0x22
 80039e4:	d008      	beq.n	80039f8 <HAL_SD_IRQHandler+0x8c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039e6:	f000 fb27 	bl	8004038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80039ea:	b128      	cbz	r0, 80039f8 <HAL_SD_IRQHandler+0x8c>
          hsd->ErrorCode |= errorstate;
 80039ec:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039ee:	4303      	orrs	r3, r0
          HAL_SD_ErrorCallback(hsd);
 80039f0:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 80039f2:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80039f4:	f7ff fd10 	bl	8003418 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f240 523a 	movw	r2, #1338	@ 0x53a
        HAL_SD_RxCpltCallback(hsd);
 80039fe:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6323      	str	r3, [r4, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a0c:	07ab      	lsls	r3, r5, #30
 8003a0e:	d01a      	beq.n	8003a46 <HAL_SD_IRQHandler+0xda>
        HAL_SD_RxCpltCallback(hsd);
 8003a10:	f7fd fe19 	bl	8001646 <HAL_SD_RxCpltCallback>
 8003a14:	e7cf      	b.n	80039b6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a16:	062f      	lsls	r7, r5, #24
 8003a18:	d5cd      	bpl.n	80039b6 <HAL_SD_IRQHandler+0x4a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a1a:	06ae      	lsls	r6, r5, #26
 8003a1c:	d508      	bpl.n	8003a30 <HAL_SD_IRQHandler+0xc4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a1e:	f000 fb0b 	bl	8004038 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a22:	b128      	cbz	r0, 8003a30 <HAL_SD_IRQHandler+0xc4>
          hsd->ErrorCode |= errorstate;
 8003a24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a26:	4303      	orrs	r3, r0
          HAL_SD_ErrorCallback(hsd);
 8003a28:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8003a2a:	63a3      	str	r3, [r4, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a2c:	f7ff fcf4 	bl	8003418 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003a30:	07a8      	lsls	r0, r5, #30
 8003a32:	d1c0      	bne.n	80039b6 <HAL_SD_IRQHandler+0x4a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003a34:	6822      	ldr	r2, [r4, #0]
        HAL_SD_TxCpltCallback(hsd);
 8003a36:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003a38:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003a3a:	f023 0308 	bic.w	r3, r3, #8
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003a46:	f7fd fdf9 	bl	800163c <HAL_SD_TxCpltCallback>
 8003a4a:	e7b4      	b.n	80039b6 <HAL_SD_IRQHandler+0x4a>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a4e:	0459      	lsls	r1, r3, #17
 8003a50:	d526      	bpl.n	8003aa0 <HAL_SD_IRQHandler+0x134>
 8003a52:	072a      	lsls	r2, r5, #28
 8003a54:	d524      	bpl.n	8003aa0 <HAL_SD_IRQHandler+0x134>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8003a56:	6a67      	ldr	r7, [r4, #36]	@ 0x24

  if (dataremaining > 0U)
 8003a58:	2f00      	cmp	r7, #0
 8003a5a:	d0ac      	beq.n	80039b6 <HAL_SD_IRQHandler+0x4a>
  tmp = hsd->pTxBuffPtr;
 8003a5c:	6a26      	ldr	r6, [r4, #32]
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a5e:	1d35      	adds	r5, r6, #4
 8003a60:	f106 0824 	add.w	r8, r6, #36	@ 0x24
    {
      data = (uint32_t)(*tmp);
 8003a64:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    for(count = 0U; count < 8U; count++)
 8003a68:	3504      	adds	r5, #4
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003a6a:	a901      	add	r1, sp, #4
 8003a6c:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8003a6e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8003a70:	f815 2c07 	ldrb.w	r2, [r5, #-7]
 8003a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a78:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8003a7a:	f815 2c06 	ldrb.w	r2, [r5, #-6]
 8003a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a82:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8003a84:	f815 2c05 	ldrb.w	r2, [r5, #-5]
 8003a88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a8c:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8003a8e:	f000 f96c 	bl	8003d6a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003a92:	4545      	cmp	r5, r8
 8003a94:	d1e6      	bne.n	8003a64 <HAL_SD_IRQHandler+0xf8>
    }

    hsd->pTxBuffPtr = tmp;
 8003a96:	3620      	adds	r6, #32
    hsd->TxXferSize = dataremaining;
 8003a98:	3f20      	subs	r7, #32
    hsd->pTxBuffPtr = tmp;
 8003a9a:	6226      	str	r6, [r4, #32]
    hsd->TxXferSize = dataremaining;
 8003a9c:	6267      	str	r7, [r4, #36]	@ 0x24
  }
}
 8003a9e:	e78a      	b.n	80039b6 <HAL_SD_IRQHandler+0x4a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003aa0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003aa2:	f013 0f3a 	tst.w	r3, #58	@ 0x3a
 8003aa6:	d086      	beq.n	80039b6 <HAL_SD_IRQHandler+0x4a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003aa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003aaa:	079b      	lsls	r3, r3, #30
 8003aac:	d503      	bpl.n	8003ab6 <HAL_SD_IRQHandler+0x14a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003aae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003ab6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003ab8:	071f      	lsls	r7, r3, #28
 8003aba:	d503      	bpl.n	8003ac4 <HAL_SD_IRQHandler+0x158>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003abc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003abe:	f043 0308 	orr.w	r3, r3, #8
 8003ac2:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003ac4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003ac6:	069e      	lsls	r6, r3, #26
 8003ac8:	d503      	bpl.n	8003ad2 <HAL_SD_IRQHandler+0x166>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003aca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003acc:	f043 0320 	orr.w	r3, r3, #32
 8003ad0:	63a3      	str	r3, [r4, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003ad2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003ad4:	06d9      	lsls	r1, r3, #27
 8003ad6:	d503      	bpl.n	8003ae0 <HAL_SD_IRQHandler+0x174>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ad8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ada:	f043 0310 	orr.w	r3, r3, #16
 8003ade:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ae0:	f240 533a 	movw	r3, #1338	@ 0x53a
 8003ae4:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003ae6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003ae8:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8003aec:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003aee:	f000 faa3 	bl	8004038 <SDMMC_CmdStopTransfer>
 8003af2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003af4:	072a      	lsls	r2, r5, #28
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003af6:	ea43 0300 	orr.w	r3, r3, r0
 8003afa:	63a3      	str	r3, [r4, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003afc:	d508      	bpl.n	8003b10 <HAL_SD_IRQHandler+0x1a4>
      hsd->State = HAL_SD_STATE_READY;
 8003afe:	2301      	movs	r3, #1
      HAL_SD_ErrorCallback(hsd);
 8003b00:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8003b02:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003b0a:	f7ff fc85 	bl	8003418 <HAL_SD_ErrorCallback>
 8003b0e:	e752      	b.n	80039b6 <HAL_SD_IRQHandler+0x4a>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b10:	062b      	lsls	r3, r5, #24
 8003b12:	f57f af50 	bpl.w	80039b6 <HAL_SD_IRQHandler+0x4a>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b16:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8003b1a:	d00d      	beq.n	8003b38 <HAL_SD_IRQHandler+0x1cc>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003b1c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_SD_IRQHandler+0x1f8>)
 8003b20:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003b22:	f7fe f8c7 	bl	8001cb4 <HAL_DMA_Abort_IT>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f43f af45 	beq.w	80039b6 <HAL_SD_IRQHandler+0x4a>
          SD_DMATxAbort(hsd->hdmatx);
 8003b2c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
}
 8003b2e:	b002      	add	sp, #8
 8003b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8003b34:	f7ff befa 	b.w	800392c <SD_DMATxAbort>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b38:	f015 0503 	ands.w	r5, r5, #3
 8003b3c:	d009      	beq.n	8003b52 <HAL_SD_IRQHandler+0x1e6>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003b3e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003b40:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_SD_IRQHandler+0x1fc>)
 8003b42:	6503      	str	r3, [r0, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003b44:	f7fe f8b6 	bl	8001cb4 <HAL_DMA_Abort_IT>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	f43f af34 	beq.w	80039b6 <HAL_SD_IRQHandler+0x4a>
          SD_DMARxAbort(hsd->hdmarx);
 8003b4e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003b50:	e7ed      	b.n	8003b2e <HAL_SD_IRQHandler+0x1c2>
        hsd->State = HAL_SD_STATE_READY;
 8003b52:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b54:	63a5      	str	r5, [r4, #56]	@ 0x38
        HAL_SD_AbortCallback(hsd);
 8003b56:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8003b58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b5c:	6325      	str	r5, [r4, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003b5e:	f7fd fd68 	bl	8001632 <HAL_SD_AbortCallback>
}
 8003b62:	e728      	b.n	80039b6 <HAL_SD_IRQHandler+0x4a>
 8003b64:	0800392d 	.word	0x0800392d
 8003b68:	08003b6d 	.word	0x08003b6d

08003b6c <SD_DMARxAbort>:
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
 8003b6c:	f7ff bede 	b.w	800392c <SD_DMATxAbort>

08003b70 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8003b70:	4770      	bx	lr

08003b72 <HAL_SDRAM_Init>:
{
 8003b72:	b538      	push	{r3, r4, r5, lr}
 8003b74:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8003b76:	4604      	mov	r4, r0
 8003b78:	b1c8      	cbz	r0, 8003bae <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003b7a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003b7e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b82:	b91b      	cbnz	r3, 8003b8c <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8003b84:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8003b88:	f7ff fff2 	bl	8003b70 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b8c:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003b8e:	1d21      	adds	r1, r4, #4
 8003b90:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003b92:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003b96:	f000 f843 	bl	8003c20 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	f000 f874 	bl	8003c8c <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ba4:	2301      	movs	r3, #1
  return HAL_OK;
 8003ba6:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ba8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7fc      	b.n	8003bac <HAL_SDRAM_Init+0x3a>

08003bb2 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8003bb2:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003bb4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8003bbc:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003bbe:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8003bc0:	d010      	beq.n	8003be4 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003bc2:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8003bc6:	2c01      	cmp	r4, #1
 8003bc8:	d110      	bne.n	8003bec <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003bca:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003bcc:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003bce:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003bd2:	f000 f891 	bl	8003cf8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003bd6:	6833      	ldr	r3, [r6, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d104      	bne.n	8003be6 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003bdc:	2305      	movs	r3, #5
 8003bde:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003be2:	2000      	movs	r0, #0
}
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003be6:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8003bea:	e7fa      	b.n	8003be2 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
 8003bee:	e7f9      	b.n	8003be4 <HAL_SDRAM_SendCommand+0x32>

08003bf0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003bf0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003bf2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8003bf6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	b2d8      	uxtb	r0, r3
 8003bfc:	d00d      	beq.n	8003c1a <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003bfe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	b2dd      	uxtb	r5, r3
 8003c06:	d109      	bne.n	8003c1c <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c08:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003c0a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003c0c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003c10:	f000 f884 	bl	8003d1c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003c16:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	e7fc      	b.n	8003c1a <HAL_SDRAM_ProgramRefreshRate+0x2a>

08003c20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003c24:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8003c28:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8003c2c:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8003c30:	ea43 0308 	orr.w	r3, r3, r8
 8003c34:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8003c38:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003c3c:	6809      	ldr	r1, [r1, #0]
 8003c3e:	b981      	cbnz	r1, 8003c62 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003c40:	ea43 030e 	orr.w	r3, r3, lr
 8003c44:	6801      	ldr	r1, [r0, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f36f 010e 	bfc	r1, #0, #15
 8003c4c:	ea43 030c 	orr.w	r3, r3, ip
 8003c50:	433b      	orrs	r3, r7
 8003c52:	4333      	orrs	r3, r6
 8003c54:	432b      	orrs	r3, r5
 8003c56:	4323      	orrs	r3, r4
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003c62:	6801      	ldr	r1, [r0, #0]
 8003c64:	ea43 030e 	orr.w	r3, r3, lr
 8003c68:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003c70:	ea42 030c 	orr.w	r3, r2, ip
 8003c74:	6841      	ldr	r1, [r0, #4]
 8003c76:	433b      	orrs	r3, r7
 8003c78:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8003c7c:	4333      	orrs	r3, r6
 8003c7e:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003c82:	432b      	orrs	r3, r5
 8003c84:	4323      	orrs	r3, r4
 8003c86:	4313      	orrs	r3, r2
 8003c88:	6043      	str	r3, [r0, #4]
 8003c8a:	e7e7      	b.n	8003c5c <FMC_SDRAM_Init+0x3c>

08003c8c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003c8c:	68cb      	ldr	r3, [r1, #12]
 8003c8e:	f103 3cff 	add.w	ip, r3, #4294967295
 8003c92:	694b      	ldr	r3, [r1, #20]
{
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003c96:	3b01      	subs	r3, #1
 8003c98:	684c      	ldr	r4, [r1, #4]
 8003c9a:	688f      	ldr	r7, [r1, #8]
 8003c9c:	690e      	ldr	r6, [r1, #16]
 8003c9e:	051b      	lsls	r3, r3, #20
 8003ca0:	698d      	ldr	r5, [r1, #24]
 8003ca2:	3c01      	subs	r4, #1
 8003ca4:	3f01      	subs	r7, #1
 8003ca6:	3e01      	subs	r6, #1
 8003ca8:	3d01      	subs	r5, #1
 8003caa:	6809      	ldr	r1, [r1, #0]
 8003cac:	0124      	lsls	r4, r4, #4
 8003cae:	023f      	lsls	r7, r7, #8
 8003cb0:	3901      	subs	r1, #1
 8003cb2:	0436      	lsls	r6, r6, #16
 8003cb4:	062d      	lsls	r5, r5, #24
 8003cb6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8003cba:	b95a      	cbnz	r2, 8003cd4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6882      	ldr	r2, [r0, #8]
 8003cc0:	4323      	orrs	r3, r4
 8003cc2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003cc6:	433b      	orrs	r3, r7
 8003cc8:	4333      	orrs	r3, r6
 8003cca:	432b      	orrs	r3, r5
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003cd4:	6882      	ldr	r2, [r0, #8]
 8003cd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cda:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003ce2:	ea44 0307 	orr.w	r3, r4, r7
 8003ce6:	68c2      	ldr	r2, [r0, #12]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003cee:	4333      	orrs	r3, r6
 8003cf0:	432b      	orrs	r3, r5
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60c3      	str	r3, [r0, #12]
 8003cf6:	e7eb      	b.n	8003cd0 <FMC_SDRAM_Timing_Init+0x44>

08003cf8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003cf8:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8003cfa:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003cfe:	6902      	ldr	r2, [r0, #16]
 8003d00:	4323      	orrs	r3, r4
 8003d02:	68cc      	ldr	r4, [r1, #12]
 8003d04:	f36f 0215 	bfc	r2, #0, #22
 8003d08:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	688a      	ldr	r2, [r1, #8]
 8003d10:	3a01      	subs	r2, #1
 8003d12:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003d16:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8003d18:	2000      	movs	r0, #0
 8003d1a:	bd10      	pop	{r4, pc}

08003d1c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003d1c:	6943      	ldr	r3, [r0, #20]
 8003d1e:	f36f 034d 	bfc	r3, #1, #13
 8003d22:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003d26:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8003d28:	2000      	movs	r0, #0
 8003d2a:	4770      	bx	lr

08003d2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	ac03      	add	r4, sp, #12
 8003d32:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003d36:	460b      	mov	r3, r1
 8003d38:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d3a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8003d3c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8003d3e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d40:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.ClockBypass         |\
 8003d44:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8003d46:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d48:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
             Init.ClockPowerSave      |\
 8003d4c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8003d4e:	9907      	ldr	r1, [sp, #28]
 8003d50:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8003d52:	9908      	ldr	r1, [sp, #32]
 8003d54:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8003d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d5a:	4313      	orrs	r3, r2
}
 8003d5c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003d5e:	6043      	str	r3, [r0, #4]
}
 8003d60:	2000      	movs	r0, #0
 8003d62:	4770      	bx	lr

08003d64 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8003d64:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8003d68:	4770      	bx	lr

08003d6a <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8003d6a:	680b      	ldr	r3, [r1, #0]
 8003d6c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 8003d70:	2000      	movs	r0, #0
 8003d72:	4770      	bx	lr

08003d74 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8003d74:	2303      	movs	r3, #3
 8003d76:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8003d78:	2000      	movs	r0, #0
 8003d7a:	4770      	bx	lr

08003d7c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8003d7c:	6800      	ldr	r0, [r0, #0]
}
 8003d7e:	f000 0003 	and.w	r0, r0, #3
 8003d82:	4770      	bx	lr

08003d84 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8003d84:	680b      	ldr	r3, [r1, #0]
{
 8003d86:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8003d88:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d8a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d8c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d90:	f36f 020b 	bfc	r2, #0, #12
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d94:	4323      	orrs	r3, r4
                       Command->Response         |\
 8003d96:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8003d98:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8003d9a:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8003d9c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	bd10      	pop	{r4, pc}

08003da6 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8003da6:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8003da8:	5840      	ldr	r0, [r0, r1]
}  
 8003daa:	4770      	bx	lr

08003dac <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003dac:	680b      	ldr	r3, [r1, #0]
{
 8003dae:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003db0:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8003db2:	684b      	ldr	r3, [r1, #4]
 8003db4:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003db6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003db8:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003dbc:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003dc0:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8003dc2:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8003dc4:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8003dc6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003dc8:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 8003dce:	2000      	movs	r0, #0
 8003dd0:	bd10      	pop	{r4, pc}
	...

08003dd4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8003dd4:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003dd6:	2300      	movs	r3, #0
{
 8003dd8:	b086      	sub	sp, #24
 8003dda:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003ddc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003dde:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8003de2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dea:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003dec:	f7ff ffca 	bl	8003d84 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003df0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <SDMMC_CmdGoIdleState+0x48>)
 8003df2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e00:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003e02:	b143      	cbz	r3, 8003e16 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003e04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003e06:	3b01      	subs	r3, #1
 8003e08:	0612      	lsls	r2, r2, #24
 8003e0a:	d5fa      	bpl.n	8003e02 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e0c:	23c5      	movs	r3, #197	@ 0xc5
  
  return SDMMC_ERROR_NONE;
 8003e0e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e10:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003e12:	b006      	add	sp, #24
 8003e14:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8003e16:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  return errorstate;
 8003e1a:	e7fa      	b.n	8003e12 <SDMMC_CmdGoIdleState+0x3e>
 8003e1c:	20000044 	.word	0x20000044

08003e20 <SDMMC_GetCmdResp1>:
{
 8003e20:	4603      	mov	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e22:	4844      	ldr	r0, [pc, #272]	@ (8003f34 <SDMMC_GetCmdResp1+0x114>)
{
 8003e24:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8003e2c:	fbb0 f0f4 	udiv	r0, r0, r4
 8003e30:	4342      	muls	r2, r0
    if (count-- == 0U)
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	d049      	beq.n	8003eca <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8003e36:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003e38:	f010 0f45 	tst.w	r0, #69	@ 0x45
 8003e3c:	d007      	beq.n	8003e4e <SDMMC_GetCmdResp1+0x2e>
 8003e3e:	0500      	lsls	r0, r0, #20
 8003e40:	d405      	bmi.n	8003e4e <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e44:	0754      	lsls	r4, r2, #29
 8003e46:	d504      	bpl.n	8003e52 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e48:	2004      	movs	r0, #4
 8003e4a:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	3a01      	subs	r2, #1
 8003e50:	e7ef      	b.n	8003e32 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e54:	07d0      	lsls	r0, r2, #31
 8003e56:	d503      	bpl.n	8003e60 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e7f5      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e60:	22c5      	movs	r2, #197	@ 0xc5
 8003e62:	639a      	str	r2, [r3, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003e64:	691a      	ldr	r2, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	4291      	cmp	r1, r2
 8003e6a:	d1f7      	bne.n	8003e5c <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8003e6c:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e6e:	4832      	ldr	r0, [pc, #200]	@ (8003f38 <SDMMC_GetCmdResp1+0x118>)
 8003e70:	4018      	ands	r0, r3
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0ea      	beq.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db2a      	blt.n	8003ed0 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e7a:	005a      	lsls	r2, r3, #1
 8003e7c:	d42b      	bmi.n	8003ed6 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e7e:	009c      	lsls	r4, r3, #2
 8003e80:	d42b      	bmi.n	8003eda <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003e82:	00d9      	lsls	r1, r3, #3
 8003e84:	d42b      	bmi.n	8003ede <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003e86:	011a      	lsls	r2, r3, #4
 8003e88:	d42c      	bmi.n	8003ee4 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003e8a:	015c      	lsls	r4, r3, #5
 8003e8c:	d42d      	bmi.n	8003eea <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003e8e:	01d9      	lsls	r1, r3, #7
 8003e90:	d42e      	bmi.n	8003ef0 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003e92:	021a      	lsls	r2, r3, #8
 8003e94:	d42f      	bmi.n	8003ef6 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003e96:	025c      	lsls	r4, r3, #9
 8003e98:	d430      	bmi.n	8003efc <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003e9a:	0299      	lsls	r1, r3, #10
 8003e9c:	d431      	bmi.n	8003f02 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003e9e:	02da      	lsls	r2, r3, #11
 8003ea0:	d432      	bmi.n	8003f08 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003ea2:	035c      	lsls	r4, r3, #13
 8003ea4:	d433      	bmi.n	8003f0e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003ea6:	0399      	lsls	r1, r3, #14
 8003ea8:	d434      	bmi.n	8003f14 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003eaa:	03da      	lsls	r2, r3, #15
 8003eac:	d435      	bmi.n	8003f1a <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003eae:	041c      	lsls	r4, r3, #16
 8003eb0:	d436      	bmi.n	8003f20 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003eb2:	0459      	lsls	r1, r3, #17
 8003eb4:	d437      	bmi.n	8003f26 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003eb6:	049a      	lsls	r2, r3, #18
 8003eb8:	d438      	bmi.n	8003f2c <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003eba:	f013 0f08 	tst.w	r3, #8
 8003ebe:	bf0c      	ite	eq
 8003ec0:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8003ec4:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 8003ec8:	e7c0      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003eca:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003ece:	e7bd      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003ed0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8003ed4:	e7ba      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003ed6:	2040      	movs	r0, #64	@ 0x40
 8003ed8:	e7b8      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003eda:	2080      	movs	r0, #128	@ 0x80
 8003edc:	e7b6      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003ede:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ee2:	e7b3      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003ee4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003ee8:	e7b0      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003eea:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003eee:	e7ad      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003ef0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ef4:	e7aa      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ef6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003efa:	e7a7      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003efc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f00:	e7a4      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003f02:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f06:	e7a1      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8003f08:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003f0c:	e79e      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003f0e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003f12:	e79b      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003f14:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003f18:	e798      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f1a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f1e:	e795      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f20:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003f24:	e792      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f26:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003f2a:	e78f      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8003f2c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8003f30:	e78c      	b.n	8003e4c <SDMMC_GetCmdResp1+0x2c>
 8003f32:	bf00      	nop
 8003f34:	20000044 	.word	0x20000044
 8003f38:	fdffe008 	.word	0xfdffe008

08003f3c <SDMMC_CmdBlockLength>:
{
 8003f3c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f3e:	2340      	movs	r3, #64	@ 0x40
{
 8003f40:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f42:	2510      	movs	r5, #16
{
 8003f44:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f46:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003f48:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f4c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f54:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f58:	f7ff ff14 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4629      	mov	r1, r5
 8003f62:	4620      	mov	r0, r4
}
 8003f64:	b007      	add	sp, #28
 8003f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8003f6a:	f7ff bf59 	b.w	8003e20 <SDMMC_GetCmdResp1>

08003f6e <SDMMC_CmdReadSingleBlock>:
{
 8003f6e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f70:	2340      	movs	r3, #64	@ 0x40
{
 8003f72:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f74:	2511      	movs	r5, #17
{
 8003f76:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f78:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003f7a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f7c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003f7e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f86:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003f8a:	f7ff fefb 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f92:	4629      	mov	r1, r5
 8003f94:	4620      	mov	r0, r4
}
 8003f96:	b007      	add	sp, #28
 8003f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003f9c:	f7ff bf40 	b.w	8003e20 <SDMMC_GetCmdResp1>

08003fa0 <SDMMC_CmdReadMultiBlock>:
{
 8003fa0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fa2:	2340      	movs	r3, #64	@ 0x40
{
 8003fa4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fa6:	2512      	movs	r5, #18
{
 8003fa8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003faa:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003fac:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fb0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fbc:	f7ff fee2 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4620      	mov	r0, r4
}
 8003fc8:	b007      	add	sp, #28
 8003fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8003fce:	f7ff bf27 	b.w	8003e20 <SDMMC_GetCmdResp1>

08003fd2 <SDMMC_CmdWriteSingleBlock>:
{
 8003fd2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fd4:	2340      	movs	r3, #64	@ 0x40
{
 8003fd6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fd8:	2518      	movs	r5, #24
{
 8003fda:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fdc:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003fde:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fe0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8003fe2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8003fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8003fee:	f7ff fec9 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8003ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	4620      	mov	r0, r4
}
 8003ffa:	b007      	add	sp, #28
 8003ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004000:	f7ff bf0e 	b.w	8003e20 <SDMMC_GetCmdResp1>

08004004 <SDMMC_CmdWriteMultiBlock>:
{
 8004004:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004006:	2340      	movs	r3, #64	@ 0x40
{
 8004008:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800400a:	2519      	movs	r5, #25
{
 800400c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800400e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004010:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004012:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004014:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800401c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004020:	f7ff feb0 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004028:	4629      	mov	r1, r5
 800402a:	4620      	mov	r0, r4
}
 800402c:	b007      	add	sp, #28
 800402e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004032:	f7ff bef5 	b.w	8003e20 <SDMMC_GetCmdResp1>
	...

08004038 <SDMMC_CmdStopTransfer>:
{
 8004038:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800403a:	2300      	movs	r3, #0
{
 800403c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800403e:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004040:	2240      	movs	r2, #64	@ 0x40
{
 8004042:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004044:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004046:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800404a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800404e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004052:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004054:	f7ff fe96 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004058:	4a03      	ldr	r2, [pc, #12]	@ (8004068 <SDMMC_CmdStopTransfer+0x30>)
 800405a:	4629      	mov	r1, r5
 800405c:	4620      	mov	r0, r4
}
 800405e:	b007      	add	sp, #28
 8004060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004064:	f7ff bedc 	b.w	8003e20 <SDMMC_GetCmdResp1>
 8004068:	05f5e100 	.word	0x05f5e100

0800406c <SDMMC_CmdSelDesel>:
{
 800406c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800406e:	2340      	movs	r3, #64	@ 0x40
{
 8004070:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004072:	2507      	movs	r5, #7
{
 8004074:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004076:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004078:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800407a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800407c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004084:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004088:	f7ff fe7c 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800408c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004090:	4629      	mov	r1, r5
 8004092:	4620      	mov	r0, r4
}
 8004094:	b007      	add	sp, #28
 8004096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800409a:	f7ff bec1 	b.w	8003e20 <SDMMC_GetCmdResp1>

0800409e <SDMMC_CmdAppCommand>:
{
 800409e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040a0:	2340      	movs	r3, #64	@ 0x40
{
 80040a2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040a4:	2537      	movs	r5, #55	@ 0x37
{
 80040a6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040a8:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80040aa:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040ac:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040ae:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040ba:	f7ff fe63 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80040be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c2:	4629      	mov	r1, r5
 80040c4:	4620      	mov	r0, r4
}
 80040c6:	b007      	add	sp, #28
 80040c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80040cc:	f7ff bea8 	b.w	8003e20 <SDMMC_GetCmdResp1>

080040d0 <SDMMC_CmdBusWidth>:
{
 80040d0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040d2:	2340      	movs	r3, #64	@ 0x40
{
 80040d4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040d6:	2506      	movs	r5, #6
{
 80040d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040da:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80040dc:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80040e0:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80040e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80040ec:	f7ff fe4a 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80040f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f4:	4629      	mov	r1, r5
 80040f6:	4620      	mov	r0, r4
}
 80040f8:	b007      	add	sp, #28
 80040fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80040fe:	f7ff be8f 	b.w	8003e20 <SDMMC_GetCmdResp1>

08004102 <SDMMC_CmdSendSCR>:
{
 8004102:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004104:	2300      	movs	r3, #0
{
 8004106:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004108:	2533      	movs	r5, #51	@ 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800410a:	2240      	movs	r2, #64	@ 0x40
{
 800410c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800410e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004110:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004114:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004118:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800411e:	f7ff fe31 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004126:	4629      	mov	r1, r5
 8004128:	4620      	mov	r0, r4
}
 800412a:	b007      	add	sp, #28
 800412c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004130:	f7ff be76 	b.w	8003e20 <SDMMC_GetCmdResp1>

08004134 <SDMMC_CmdSendStatus>:
{
 8004134:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004136:	2340      	movs	r3, #64	@ 0x40
{
 8004138:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800413a:	250d      	movs	r5, #13
{
 800413c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800413e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 8004140:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004142:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004144:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800414c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004150:	f7ff fe18 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004158:	4629      	mov	r1, r5
 800415a:	4620      	mov	r0, r4
}
 800415c:	b007      	add	sp, #28
 800415e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004162:	f7ff be5d 	b.w	8003e20 <SDMMC_GetCmdResp1>
	...

08004168 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <SDMMC_GetCmdResp2+0x48>)
 800416a:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 800416e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fbb3 f3f1 	udiv	r3, r3, r1
 8004176:	f241 3188 	movw	r1, #5000	@ 0x1388
 800417a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800417c:	b1ab      	cbz	r3, 80041aa <SDMMC_GetCmdResp2+0x42>
    sta_reg = SDMMCx->STA;
 800417e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004180:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8004184:	d007      	beq.n	8004196 <SDMMC_GetCmdResp2+0x2e>
 8004186:	0509      	lsls	r1, r1, #20
 8004188:	d405      	bmi.n	8004196 <SDMMC_GetCmdResp2+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800418a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800418c:	075b      	lsls	r3, r3, #29
 800418e:	d504      	bpl.n	800419a <SDMMC_GetCmdResp2+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004190:	2004      	movs	r0, #4
 8004192:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004194:	4770      	bx	lr
 8004196:	3b01      	subs	r3, #1
 8004198:	e7f0      	b.n	800417c <SDMMC_GetCmdResp2+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800419a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800419c:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80041a4:	23c5      	moveq	r3, #197	@ 0xc5
 80041a6:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80041a8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80041aa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80041ae:	4770      	bx	lr
 80041b0:	20000044 	.word	0x20000044

080041b4 <SDMMC_CmdSendCID>:
{
 80041b4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80041b6:	2300      	movs	r3, #0
{
 80041b8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80041ba:	2202      	movs	r2, #2
{
 80041bc:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041be:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80041c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80041c4:	22c0      	movs	r2, #192	@ 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80041c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041ce:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041d0:	f7ff fdd8 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80041d4:	4620      	mov	r0, r4
}
 80041d6:	b006      	add	sp, #24
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80041dc:	f7ff bfc4 	b.w	8004168 <SDMMC_GetCmdResp2>

080041e0 <SDMMC_CmdSendCSD>:
{
 80041e0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80041e2:	2209      	movs	r2, #9
{
 80041e4:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80041e6:	23c0      	movs	r3, #192	@ 0xc0
{
 80041e8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80041ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041ec:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80041ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80041f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041f6:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80041fa:	a901      	add	r1, sp, #4
 80041fc:	f7ff fdc2 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004200:	4620      	mov	r0, r4
}
 8004202:	b006      	add	sp, #24
 8004204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004208:	f7ff bfae 	b.w	8004168 <SDMMC_GetCmdResp2>

0800420c <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800420c:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <SDMMC_GetCmdResp3+0x40>)
 800420e:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8004212:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	fbb3 f3f1 	udiv	r3, r3, r1
 800421a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800421e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004220:	b18b      	cbz	r3, 8004246 <SDMMC_GetCmdResp3+0x3a>
    sta_reg = SDMMCx->STA;
 8004222:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004224:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8004228:	d008      	beq.n	800423c <SDMMC_GetCmdResp3+0x30>
 800422a:	0509      	lsls	r1, r1, #20
 800422c:	d406      	bmi.n	800423c <SDMMC_GetCmdResp3+0x30>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800422e:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004230:	f010 0004 	ands.w	r0, r0, #4
 8004234:	d004      	beq.n	8004240 <SDMMC_GetCmdResp3+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004236:	2004      	movs	r0, #4
 8004238:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800423a:	4770      	bx	lr
 800423c:	3b01      	subs	r3, #1
 800423e:	e7ef      	b.n	8004220 <SDMMC_GetCmdResp3+0x14>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004240:	23c5      	movs	r3, #197	@ 0xc5
 8004242:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004244:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004246:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800424a:	4770      	bx	lr
 800424c:	20000044 	.word	0x20000044

08004250 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004250:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004254:	2229      	movs	r2, #41	@ 0x29
 8004256:	2340      	movs	r3, #64	@ 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004258:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
{
 800425c:	b510      	push	{r4, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004262:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004264:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004266:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800426a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800426e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004272:	a901      	add	r1, sp, #4
 8004274:	f7ff fd86 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004278:	4620      	mov	r0, r4
}
 800427a:	b006      	add	sp, #24
 800427c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004280:	f7ff bfc4 	b.w	800420c <SDMMC_GetCmdResp3>

08004284 <SDMMC_GetCmdResp6>:
{
 8004284:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004286:	481e      	ldr	r0, [pc, #120]	@ (8004300 <SDMMC_GetCmdResp6+0x7c>)
{
 8004288:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8004290:	fbb0 f0f4 	udiv	r0, r0, r4
 8004294:	f241 3488 	movw	r4, #5000	@ 0x1388
 8004298:	4360      	muls	r0, r4
    if (count-- == 0U)
 800429a:	b358      	cbz	r0, 80042f4 <SDMMC_GetCmdResp6+0x70>
    sta_reg = SDMMCx->STA;
 800429c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800429e:	f014 0f45 	tst.w	r4, #69	@ 0x45
 80042a2:	d007      	beq.n	80042b4 <SDMMC_GetCmdResp6+0x30>
 80042a4:	0524      	lsls	r4, r4, #20
 80042a6:	d405      	bmi.n	80042b4 <SDMMC_GetCmdResp6+0x30>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80042a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80042aa:	0744      	lsls	r4, r0, #29
 80042ac:	d504      	bpl.n	80042b8 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80042ae:	2004      	movs	r0, #4
 80042b0:	6398      	str	r0, [r3, #56]	@ 0x38
}
 80042b2:	bd10      	pop	{r4, pc}
 80042b4:	3801      	subs	r0, #1
 80042b6:	e7f0      	b.n	800429a <SDMMC_GetCmdResp6+0x16>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80042b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80042ba:	07c0      	lsls	r0, r0, #31
 80042bc:	d503      	bpl.n	80042c6 <SDMMC_GetCmdResp6+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80042be:	2201      	movs	r2, #1
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042c2:	2001      	movs	r0, #1
 80042c4:	e7f5      	b.n	80042b2 <SDMMC_GetCmdResp6+0x2e>
  return (uint8_t)(SDMMCx->RESPCMD);
 80042c6:	6918      	ldr	r0, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80042c8:	b2c0      	uxtb	r0, r0
 80042ca:	4281      	cmp	r1, r0
 80042cc:	d1f9      	bne.n	80042c2 <SDMMC_GetCmdResp6+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80042ce:	21c5      	movs	r1, #197	@ 0xc5
 80042d0:	6399      	str	r1, [r3, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 80042d2:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80042d4:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 80042d8:	d102      	bne.n	80042e0 <SDMMC_GetCmdResp6+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 80042de:	e7e8      	b.n	80042b2 <SDMMC_GetCmdResp6+0x2e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80042e0:	045a      	lsls	r2, r3, #17
 80042e2:	d40a      	bmi.n	80042fa <SDMMC_GetCmdResp6+0x76>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80042e4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80042e8:	bf0c      	ite	eq
 80042ea:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80042ee:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 80042f2:	e7de      	b.n	80042b2 <SDMMC_GetCmdResp6+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80042f4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80042f8:	e7db      	b.n	80042b2 <SDMMC_GetCmdResp6+0x2e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80042fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80042fe:	e7d8      	b.n	80042b2 <SDMMC_GetCmdResp6+0x2e>
 8004300:	20000044 	.word	0x20000044

08004304 <SDMMC_CmdSetRelAdd>:
{
 8004304:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004306:	2300      	movs	r3, #0
{
 8004308:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800430a:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800430c:	2240      	movs	r2, #64	@ 0x40
{
 800430e:	4604      	mov	r4, r0
 8004310:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004312:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004314:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004318:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800431c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004320:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004322:	f7ff fd2f 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004326:	462a      	mov	r2, r5
 8004328:	4631      	mov	r1, r6
 800432a:	4620      	mov	r0, r4
}
 800432c:	b006      	add	sp, #24
 800432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004332:	f7ff bfa7 	b.w	8004284 <SDMMC_GetCmdResp6>
	...

08004338 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004338:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <SDMMC_GetCmdResp7+0x50>)
 800433a:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 800433e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fbb3 f3f1 	udiv	r3, r3, r1
 8004346:	f241 3188 	movw	r1, #5000	@ 0x1388
 800434a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800434c:	b1cb      	cbz	r3, 8004382 <SDMMC_GetCmdResp7+0x4a>
    sta_reg = SDMMCx->STA;
 800434e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004350:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8004354:	d007      	beq.n	8004366 <SDMMC_GetCmdResp7+0x2e>
 8004356:	0508      	lsls	r0, r1, #20
 8004358:	d405      	bmi.n	8004366 <SDMMC_GetCmdResp7+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800435a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800435c:	0759      	lsls	r1, r3, #29
 800435e:	d504      	bpl.n	800436a <SDMMC_GetCmdResp7+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004360:	2004      	movs	r0, #4
 8004362:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004364:	4770      	bx	lr
 8004366:	3b01      	subs	r3, #1
 8004368:	e7f0      	b.n	800434c <SDMMC_GetCmdResp7+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800436a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800436c:	f010 0001 	ands.w	r0, r0, #1
 8004370:	d002      	beq.n	8004378 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004372:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004374:	6393      	str	r3, [r2, #56]	@ 0x38
 8004376:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004378:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800437a:	065b      	lsls	r3, r3, #25
 800437c:	d503      	bpl.n	8004386 <SDMMC_GetCmdResp7+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800437e:	2340      	movs	r3, #64	@ 0x40
 8004380:	e7f8      	b.n	8004374 <SDMMC_GetCmdResp7+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 8004382:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004386:	4770      	bx	lr
 8004388:	20000044 	.word	0x20000044

0800438c <SDMMC_CmdOperCond>:
{
 800438c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800438e:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
{
 8004392:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004394:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004396:	2140      	movs	r1, #64	@ 0x40
{
 8004398:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800439a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800439e:	2300      	movs	r3, #0
 80043a0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043a8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043aa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043ac:	f7ff fcea 	bl	8003d84 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80043b0:	4620      	mov	r0, r4
}
 80043b2:	b006      	add	sp, #24
 80043b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80043b8:	f7ff bfbe 	b.w	8004338 <SDMMC_GetCmdResp7>

080043bc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <disk_status+0x10>)
 80043be:	181a      	adds	r2, r3, r0
 80043c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	7b10      	ldrb	r0, [r2, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4718      	bx	r3
 80043cc:	20000ef8 	.word	0x20000ef8

080043d0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <disk_initialize+0x1c>)
 80043d2:	5c1a      	ldrb	r2, [r3, r0]
 80043d4:	b942      	cbnz	r2, 80043e8 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80043d6:	2201      	movs	r2, #1
 80043d8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043da:	181a      	adds	r2, r3, r0
 80043dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80043e0:	7b10      	ldrb	r0, [r2, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4718      	bx	r3
  }
  return stat;
}
 80043e8:	2000      	movs	r0, #0
 80043ea:	4770      	bx	lr
 80043ec:	20000ef8 	.word	0x20000ef8

080043f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043f0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043f2:	4c05      	ldr	r4, [pc, #20]	@ (8004408 <disk_read+0x18>)
 80043f4:	1825      	adds	r5, r4, r0
 80043f6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80043fa:	6860      	ldr	r0, [r4, #4]
 80043fc:	6884      	ldr	r4, [r0, #8]
 80043fe:	7b28      	ldrb	r0, [r5, #12]
 8004400:	46a4      	mov	ip, r4
  return res;
}
 8004402:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004404:	4760      	bx	ip
 8004406:	bf00      	nop
 8004408:	20000ef8 	.word	0x20000ef8

0800440c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800440c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800440e:	4c05      	ldr	r4, [pc, #20]	@ (8004424 <disk_write+0x18>)
 8004410:	1825      	adds	r5, r4, r0
 8004412:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004416:	6860      	ldr	r0, [r4, #4]
 8004418:	68c4      	ldr	r4, [r0, #12]
 800441a:	7b28      	ldrb	r0, [r5, #12]
 800441c:	46a4      	mov	ip, r4
  return res;
}
 800441e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004420:	4760      	bx	ip
 8004422:	bf00      	nop
 8004424:	20000ef8 	.word	0x20000ef8

08004428 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <disk_ioctl+0x18>)
{
 800442a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800442c:	181c      	adds	r4, r3, r0
 800442e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	7b20      	ldrb	r0, [r4, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8004438:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800443c:	4718      	bx	r3
 800443e:	bf00      	nop
 8004440:	20000ef8 	.word	0x20000ef8

08004444 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8004444:	2000      	movs	r0, #0
 8004446:	4770      	bx	lr

08004448 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8004448:	6800      	ldr	r0, [r0, #0]
 800444a:	4770      	bx	lr

0800444c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800444c:	0a0b      	lsrs	r3, r1, #8
 800444e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004450:	7043      	strb	r3, [r0, #1]
 8004452:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004454:	0e09      	lsrs	r1, r1, #24
 8004456:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004458:	70c1      	strb	r1, [r0, #3]
}
 800445a:	4770      	bx	lr

0800445c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 800445c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 800445e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004462:	4290      	cmp	r0, r2
 8004464:	d1fb      	bne.n	800445e <mem_set+0x2>
}
 8004466:	4770      	bx	lr

08004468 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <chk_lock+0x70>)
{
 800446a:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 800446c:	6818      	ldr	r0, [r3, #0]
{
 800446e:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8004470:	b160      	cbz	r0, 800448c <chk_lock+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004472:	6814      	ldr	r4, [r2, #0]
 8004474:	42a0      	cmp	r0, r4
 8004476:	d107      	bne.n	8004488 <chk_lock+0x20>
 8004478:	685c      	ldr	r4, [r3, #4]
 800447a:	6890      	ldr	r0, [r2, #8]
 800447c:	4284      	cmp	r4, r0
 800447e:	d103      	bne.n	8004488 <chk_lock+0x20>
				Files[i].clu == dp->obj.sclust &&
 8004480:	689c      	ldr	r4, [r3, #8]
 8004482:	6950      	ldr	r0, [r2, #20]
 8004484:	4284      	cmp	r4, r0
 8004486:	d012      	beq.n	80044ae <chk_lock+0x46>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004488:	2400      	movs	r4, #0
 800448a:	e000      	b.n	800448e <chk_lock+0x26>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800448c:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 800448e:	6918      	ldr	r0, [r3, #16]
 8004490:	b1b8      	cbz	r0, 80044c2 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004492:	6815      	ldr	r5, [r2, #0]
 8004494:	42a8      	cmp	r0, r5
 8004496:	d107      	bne.n	80044a8 <chk_lock+0x40>
 8004498:	695d      	ldr	r5, [r3, #20]
 800449a:	6890      	ldr	r0, [r2, #8]
 800449c:	4285      	cmp	r5, r0
 800449e:	d103      	bne.n	80044a8 <chk_lock+0x40>
				Files[i].clu == dp->obj.sclust &&
 80044a0:	6998      	ldr	r0, [r3, #24]
 80044a2:	6952      	ldr	r2, [r2, #20]
 80044a4:	4290      	cmp	r0, r2
 80044a6:	d006      	beq.n	80044b6 <chk_lock+0x4e>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80044a8:	b13c      	cbz	r4, 80044ba <chk_lock+0x52>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e009      	b.n	80044c2 <chk_lock+0x5a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80044ae:	2200      	movs	r2, #0
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80044b0:	b141      	cbz	r1, 80044c4 <chk_lock+0x5c>
 80044b2:	2010      	movs	r0, #16
 80044b4:	e005      	b.n	80044c2 <chk_lock+0x5a>
 80044b6:	2201      	movs	r2, #1
 80044b8:	e7fa      	b.n	80044b0 <chk_lock+0x48>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80044ba:	2902      	cmp	r1, #2
 80044bc:	bf0c      	ite	eq
 80044be:	2000      	moveq	r0, #0
 80044c0:	2012      	movne	r0, #18
}
 80044c2:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80044c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80044c8:	8998      	ldrh	r0, [r3, #12]
 80044ca:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80044ce:	4258      	negs	r0, r3
 80044d0:	4158      	adcs	r0, r3
 80044d2:	0100      	lsls	r0, r0, #4
 80044d4:	e7f5      	b.n	80044c2 <chk_lock+0x5a>
 80044d6:	bf00      	nop
 80044d8:	20000ecc 	.word	0x20000ecc

080044dc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80044dc:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <inc_lock+0x80>)
{
 80044de:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	6806      	ldr	r6, [r0, #0]
 80044e4:	429e      	cmp	r6, r3
 80044e6:	d107      	bne.n	80044f8 <inc_lock+0x1c>
 80044e8:	6855      	ldr	r5, [r2, #4]
 80044ea:	6884      	ldr	r4, [r0, #8]
 80044ec:	42a5      	cmp	r5, r4
 80044ee:	d103      	bne.n	80044f8 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 80044f0:	6895      	ldr	r5, [r2, #8]
 80044f2:	6944      	ldr	r4, [r0, #20]
 80044f4:	42a5      	cmp	r5, r4
 80044f6:	d019      	beq.n	800452c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80044f8:	6914      	ldr	r4, [r2, #16]
 80044fa:	42b4      	cmp	r4, r6
 80044fc:	d118      	bne.n	8004530 <inc_lock+0x54>
 80044fe:	6957      	ldr	r7, [r2, #20]
 8004500:	6885      	ldr	r5, [r0, #8]
 8004502:	42af      	cmp	r7, r5
 8004504:	d114      	bne.n	8004530 <inc_lock+0x54>
			Files[i].clu == dp->obj.sclust &&
 8004506:	6997      	ldr	r7, [r2, #24]
 8004508:	6945      	ldr	r5, [r0, #20]
 800450a:	42af      	cmp	r7, r5
 800450c:	d110      	bne.n	8004530 <inc_lock+0x54>
 800450e:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004510:	eb02 1003 	add.w	r0, r2, r3, lsl #4
 8004514:	8980      	ldrh	r0, [r0, #12]
 8004516:	b9e9      	cbnz	r1, 8004554 <inc_lock+0x78>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004518:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 800451c:	8989      	ldrh	r1, [r1, #12]
 800451e:	3101      	adds	r1, #1
 8004520:	b289      	uxth	r1, r1
 8004522:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8004526:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004528:	8191      	strh	r1, [r2, #12]
}
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800452c:	2300      	movs	r3, #0
 800452e:	e7ef      	b.n	8004510 <inc_lock+0x34>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004530:	b10b      	cbz	r3, 8004536 <inc_lock+0x5a>
 8004532:	b98c      	cbnz	r4, 8004558 <inc_lock+0x7c>
 8004534:	2301      	movs	r3, #1
		Files[i].fs = dp->obj.fs;
 8004536:	011d      	lsls	r5, r3, #4
 8004538:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 800453c:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 800453e:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004540:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8004542:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8004544:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8004546:	2000      	movs	r0, #0
 8004548:	81a0      	strh	r0, [r4, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800454a:	2900      	cmp	r1, #0
 800454c:	d0e4      	beq.n	8004518 <inc_lock+0x3c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800454e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004552:	e7e6      	b.n	8004522 <inc_lock+0x46>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004554:	2800      	cmp	r0, #0
 8004556:	d0fa      	beq.n	800454e <inc_lock+0x72>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004558:	2000      	movs	r0, #0
 800455a:	e7e6      	b.n	800452a <inc_lock+0x4e>
 800455c:	20000ecc 	.word	0x20000ecc

08004560 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004560:	3801      	subs	r0, #1
 8004562:	2801      	cmp	r0, #1
 8004564:	d815      	bhi.n	8004592 <dec_lock+0x32>
		n = Files[i].ctr;
 8004566:	4a0c      	ldr	r2, [pc, #48]	@ (8004598 <dec_lock+0x38>)
 8004568:	0101      	lsls	r1, r0, #4
 800456a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800456e:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004574:	d104      	bne.n	8004580 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8004576:	2300      	movs	r3, #0
 8004578:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800457a:	2300      	movs	r3, #0
 800457c:	5053      	str	r3, [r2, r1]
 800457e:	e006      	b.n	800458e <dec_lock+0x2e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0fa      	beq.n	800457a <dec_lock+0x1a>
 8004584:	3b01      	subs	r3, #1
 8004586:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8004588:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f5      	beq.n	800457a <dec_lock+0x1a>
		res = FR_OK;
 800458e:	2000      	movs	r0, #0
 8004590:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004592:	2002      	movs	r0, #2
	}
	return res;
}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000ecc 	.word	0x20000ecc

0800459c <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <clear_lock+0x18>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4290      	cmp	r0, r2
 80045a2:	bf04      	itt	eq
 80045a4:	2200      	moveq	r2, #0
 80045a6:	601a      	streq	r2, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	4290      	cmp	r0, r2
 80045ac:	bf04      	itt	eq
 80045ae:	2200      	moveq	r2, #0
 80045b0:	611a      	streq	r2, [r3, #16]
	}
}
 80045b2:	4770      	bx	lr
 80045b4:	20000ecc 	.word	0x20000ecc

080045b8 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045b8:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80045ba:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045bc:	3b02      	subs	r3, #2
 80045be:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80045c0:	bf83      	ittte	hi
 80045c2:	8943      	ldrhhi	r3, [r0, #10]
 80045c4:	6a80      	ldrhi	r0, [r0, #40]	@ 0x28
 80045c6:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045ca:	2000      	movls	r0, #0
}
 80045cc:	4770      	bx	lr

080045ce <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80045ce:	6802      	ldr	r2, [r0, #0]
 80045d0:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80045d2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80045d4:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80045d6:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80045d8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045dc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80045de:	b130      	cbz	r0, 80045ee <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80045e0:	4281      	cmp	r1, r0
 80045e2:	d302      	bcc.n	80045ea <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 80045e4:	1a09      	subs	r1, r1, r0
 80045e6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045e8:	e7f8      	b.n	80045dc <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 80045ea:	6858      	ldr	r0, [r3, #4]
 80045ec:	4408      	add	r0, r1
}
 80045ee:	4770      	bx	lr

080045f0 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80045f0:	6803      	ldr	r3, [r0, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	6002      	str	r2, [r0, #0]
 80045f6:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80045f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80045fc:	2b19      	cmp	r3, #25
 80045fe:	d802      	bhi.n	8004606 <get_achar+0x16>
 8004600:	3820      	subs	r0, #32
 8004602:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8004604:	4770      	bx	lr
 8004606:	287f      	cmp	r0, #127	@ 0x7f
 8004608:	bf82      	ittt	hi
 800460a:	4b02      	ldrhi	r3, [pc, #8]	@ (8004614 <get_achar+0x24>)
 800460c:	181b      	addhi	r3, r3, r0
 800460e:	f813 0c80 	ldrbhi.w	r0, [r3, #-128]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8004612:	4770      	bx	lr
 8004614:	08009f48 	.word	0x08009f48

08004618 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8004618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	9101      	str	r1, [sp, #4]
 800461e:	461d      	mov	r5, r3
 8004620:	4611      	mov	r1, r2
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8004622:	b921      	cbnz	r1, 800462e <pattern_matching+0x16>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8004624:	7823      	ldrb	r3, [r4, #0]
 8004626:	b95b      	cbnz	r3, 8004640 <pattern_matching+0x28>
 8004628:	b155      	cbz	r5, 8004640 <pattern_matching+0x28>
 800462a:	2001      	movs	r0, #1
 800462c:	e006      	b.n	800463c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800462e:	a801      	add	r0, sp, #4
 8004630:	3901      	subs	r1, #1
 8004632:	f7ff ffdd 	bl	80045f0 <get_achar>
 8004636:	2800      	cmp	r0, #0
 8004638:	d1f3      	bne.n	8004622 <pattern_matching+0xa>
 800463a:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800463c:	b004      	add	sp, #16
 800463e:	bd70      	pop	{r4, r5, r6, pc}
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8004640:	9b01      	ldr	r3, [sp, #4]
 8004642:	9402      	str	r4, [sp, #8]
 8004644:	9303      	str	r3, [sp, #12]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8004646:	9802      	ldr	r0, [sp, #8]
 8004648:	7803      	ldrb	r3, [r0, #0]
 800464a:	2b3f      	cmp	r3, #63	@ 0x3f
 800464c:	d001      	beq.n	8004652 <pattern_matching+0x3a>
 800464e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004650:	d11c      	bne.n	800468c <pattern_matching+0x74>
 8004652:	2300      	movs	r3, #0
 8004654:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8004656:	f810 1b01 	ldrb.w	r1, [r0], #1
 800465a:	293f      	cmp	r1, #63	@ 0x3f
				} while (*pp == '?' || *pp == '*');
 800465c:	7801      	ldrb	r1, [r0, #0]
					if (*pp++ == '?') nm++; else nx = 1;
 800465e:	bf0c      	ite	eq
 8004660:	3201      	addeq	r2, #1
 8004662:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8004664:	293f      	cmp	r1, #63	@ 0x3f
 8004666:	d0f6      	beq.n	8004656 <pattern_matching+0x3e>
 8004668:	292a      	cmp	r1, #42	@ 0x2a
 800466a:	d0f4      	beq.n	8004656 <pattern_matching+0x3e>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800466c:	9e03      	ldr	r6, [sp, #12]
 800466e:	9002      	str	r0, [sp, #8]
 8004670:	4631      	mov	r1, r6
 8004672:	f7ff ffd1 	bl	8004618 <pattern_matching>
 8004676:	2800      	cmp	r0, #0
 8004678:	d1d7      	bne.n	800462a <pattern_matching+0x12>
				nc = *np; break;	/* Branch mismatched */
 800467a:	7831      	ldrb	r1, [r6, #0]
		get_achar(&nam);			/* nam++ */
 800467c:	a801      	add	r0, sp, #4
 800467e:	f7ff ffb7 	bl	80045f0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8004682:	2d00      	cmp	r5, #0
 8004684:	d0d9      	beq.n	800463a <pattern_matching+0x22>
 8004686:	2900      	cmp	r1, #0
 8004688:	d1da      	bne.n	8004640 <pattern_matching+0x28>
 800468a:	e7d6      	b.n	800463a <pattern_matching+0x22>
			pc = get_achar(&pp);	/* Get a pattern char */
 800468c:	a802      	add	r0, sp, #8
 800468e:	f7ff ffaf 	bl	80045f0 <get_achar>
 8004692:	4606      	mov	r6, r0
			nc = get_achar(&np);	/* Get a name char */
 8004694:	a803      	add	r0, sp, #12
 8004696:	f7ff ffab 	bl	80045f0 <get_achar>
			if (pc != nc) break;	/* Branch mismatched? */
 800469a:	4286      	cmp	r6, r0
			nc = get_achar(&np);	/* Get a name char */
 800469c:	4601      	mov	r1, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800469e:	d1ed      	bne.n	800467c <pattern_matching+0x64>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80046a0:	2e00      	cmp	r6, #0
 80046a2:	d1d0      	bne.n	8004646 <pattern_matching+0x2e>
 80046a4:	e7c1      	b.n	800462a <pattern_matching+0x12>

080046a6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80046a6:	6802      	ldr	r2, [r0, #0]
{
 80046a8:	4601      	mov	r1, r0
 80046aa:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80046ac:	b1aa      	cbz	r2, 80046da <get_ldnumber+0x34>
 80046ae:	4613      	mov	r3, r2
 80046b0:	461c      	mov	r4, r3
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80046b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80046b6:	2820      	cmp	r0, #32
 80046b8:	d90d      	bls.n	80046d6 <get_ldnumber+0x30>
 80046ba:	283a      	cmp	r0, #58	@ 0x3a
 80046bc:	d1f8      	bne.n	80046b0 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80046be:	7813      	ldrb	r3, [r2, #0]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80046c0:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80046c4:	b2c3      	uxtb	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d807      	bhi.n	80046da <get_ldnumber+0x34>
			i = *tp++ - '0';
 80046ca:	3201      	adds	r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80046cc:	4294      	cmp	r4, r2
 80046ce:	d104      	bne.n	80046da <get_ldnumber+0x34>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 80046d0:	3401      	adds	r4, #1
 80046d2:	600c      	str	r4, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80046d4:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 80046d6:	2000      	movs	r0, #0
 80046d8:	e7fc      	b.n	80046d4 <get_ldnumber+0x2e>
	int vol = -1;
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	e7f9      	b.n	80046d4 <get_ldnumber+0x2e>

080046e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80046e4:	4604      	mov	r4, r0
 80046e6:	b918      	cbnz	r0, 80046f0 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80046e8:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80046ea:	2300      	movs	r3, #0
 80046ec:	602b      	str	r3, [r5, #0]
	return res;
}
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80046f0:	6803      	ldr	r3, [r0, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f8      	beq.n	80046e8 <validate+0x8>
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	d0f5      	beq.n	80046e8 <validate+0x8>
 80046fc:	8881      	ldrh	r1, [r0, #4]
 80046fe:	88da      	ldrh	r2, [r3, #6]
 8004700:	4291      	cmp	r1, r2
 8004702:	d1f1      	bne.n	80046e8 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004704:	7858      	ldrb	r0, [r3, #1]
 8004706:	f7ff fe59 	bl	80043bc <disk_status>
 800470a:	f010 0001 	ands.w	r0, r0, #1
 800470e:	d1eb      	bne.n	80046e8 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	e7eb      	b.n	80046ec <validate+0xc>

08004714 <sync_window>:
{
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004716:	78c3      	ldrb	r3, [r0, #3]
{
 8004718:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800471a:	b90b      	cbnz	r3, 8004720 <sync_window+0xc>
	FRESULT res = FR_OK;
 800471c:	2000      	movs	r0, #0
}
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8004720:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004722:	f100 0730 	add.w	r7, r0, #48	@ 0x30
 8004726:	2301      	movs	r3, #1
 8004728:	7840      	ldrb	r0, [r0, #1]
 800472a:	462a      	mov	r2, r5
 800472c:	4639      	mov	r1, r7
 800472e:	f7ff fe6d 	bl	800440c <disk_write>
 8004732:	b990      	cbnz	r0, 800475a <sync_window+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004734:	6a23      	ldr	r3, [r4, #32]
 8004736:	69a2      	ldr	r2, [r4, #24]
 8004738:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 800473a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800473c:	4293      	cmp	r3, r2
 800473e:	d2ed      	bcs.n	800471c <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004740:	78a6      	ldrb	r6, [r4, #2]
 8004742:	2e01      	cmp	r6, #1
 8004744:	d9ea      	bls.n	800471c <sync_window+0x8>
					wsect += fs->fsize;
 8004746:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004748:	4639      	mov	r1, r7
 800474a:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800474c:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 800474e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004750:	2301      	movs	r3, #1
 8004752:	462a      	mov	r2, r5
 8004754:	f7ff fe5a 	bl	800440c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004758:	e7f3      	b.n	8004742 <sync_window+0x2e>
			res = FR_DISK_ERR;
 800475a:	2001      	movs	r0, #1
 800475c:	e7df      	b.n	800471e <sync_window+0xa>

0800475e <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800475e:	3801      	subs	r0, #1
 8004760:	440a      	add	r2, r1
			*d++ = *s++;
 8004762:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8004766:	4291      	cmp	r1, r2
			*d++ = *s++;
 8004768:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800476c:	d1f9      	bne.n	8004762 <mem_cpy.part.0+0x4>
}
 800476e:	4770      	bx	lr

08004770 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004770:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004774:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004776:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004778:	7803      	ldrb	r3, [r0, #0]
 800477a:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800477c:	bf01      	itttt	eq
 800477e:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004780:	750a      	strbeq	r2, [r1, #20]
 8004782:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004784:	754a      	strbeq	r2, [r1, #21]
}
 8004786:	4770      	bx	lr

08004788 <move_window>:
{
 8004788:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800478a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800478c:	4605      	mov	r5, r0
 800478e:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004790:	428b      	cmp	r3, r1
 8004792:	d010      	beq.n	80047b6 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8004794:	f7ff ffbe 	bl	8004714 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004798:	b960      	cbnz	r0, 80047b4 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800479a:	4622      	mov	r2, r4
 800479c:	2301      	movs	r3, #1
 800479e:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 80047a2:	7868      	ldrb	r0, [r5, #1]
 80047a4:	f7ff fe24 	bl	80043f0 <disk_read>
				res = FR_DISK_ERR;
 80047a8:	2800      	cmp	r0, #0
 80047aa:	bf1c      	itt	ne
 80047ac:	f04f 34ff 	movne.w	r4, #4294967295
 80047b0:	2001      	movne	r0, #1
			fs->winsect = sector;
 80047b2:	62ec      	str	r4, [r5, #44]	@ 0x2c
}
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80047b6:	2000      	movs	r0, #0
 80047b8:	e7fc      	b.n	80047b4 <move_window+0x2c>
	...

080047bc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047bc:	2300      	movs	r3, #0
{
 80047be:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047c0:	70c3      	strb	r3, [r0, #3]
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
{
 80047c6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80047c8:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80047ca:	f7ff ffdd 	bl	8004788 <move_window>
 80047ce:	4603      	mov	r3, r0
 80047d0:	bb18      	cbnz	r0, 800481a <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80047d2:	f8b4 122e 	ldrh.w	r1, [r4, #558]	@ 0x22e
 80047d6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80047da:	4291      	cmp	r1, r2
 80047dc:	d11f      	bne.n	800481e <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80047de:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 80047e2:	2ae9      	cmp	r2, #233	@ 0xe9
 80047e4:	d005      	beq.n	80047f2 <check_fs+0x36>
 80047e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80047e8:	490f      	ldr	r1, [pc, #60]	@ (8004828 <check_fs+0x6c>)
 80047ea:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80047ee:	428a      	cmp	r2, r1
 80047f0:	d117      	bne.n	8004822 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80047f2:	f104 0066 	add.w	r0, r4, #102	@ 0x66
 80047f6:	4a0d      	ldr	r2, [pc, #52]	@ (800482c <check_fs+0x70>)
 80047f8:	f7ff fe26 	bl	8004448 <ld_dword>
 80047fc:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004800:	4290      	cmp	r0, r2
 8004802:	d008      	beq.n	8004816 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004804:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <check_fs+0x74>)
 8004806:	f104 0082 	add.w	r0, r4, #130	@ 0x82
 800480a:	f7ff fe1d 	bl	8004448 <ld_dword>
 800480e:	1ac3      	subs	r3, r0, r3
 8004810:	bf18      	it	ne
 8004812:	2301      	movne	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800481a:	2304      	movs	r3, #4
 800481c:	e7fb      	b.n	8004816 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800481e:	2303      	movs	r3, #3
 8004820:	e7f9      	b.n	8004816 <check_fs+0x5a>
	return 2;
 8004822:	2302      	movs	r3, #2
 8004824:	e7f7      	b.n	8004816 <check_fs+0x5a>
 8004826:	bf00      	nop
 8004828:	009000eb 	.word	0x009000eb
 800482c:	00544146 	.word	0x00544146
 8004830:	33544146 	.word	0x33544146

08004834 <find_volume>:
{
 8004834:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8004838:	2300      	movs	r3, #0
{
 800483a:	4688      	mov	r8, r1
 800483c:	4617      	mov	r7, r2
	*rfs = 0;
 800483e:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8004840:	f7ff ff31 	bl	80046a6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004844:	1e05      	subs	r5, r0, #0
 8004846:	f2c0 8118 	blt.w	8004a7a <find_volume+0x246>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800484a:	4e8f      	ldr	r6, [pc, #572]	@ (8004a88 <find_volume+0x254>)
 800484c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8004850:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004852:	2c00      	cmp	r4, #0
 8004854:	f000 8113 	beq.w	8004a7e <find_volume+0x24a>
	*rfs = fs;							/* Return pointer to the file system object */
 8004858:	f8c8 4000 	str.w	r4, [r8]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800485c:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004860:	7823      	ldrb	r3, [r4, #0]
 8004862:	b173      	cbz	r3, 8004882 <find_volume+0x4e>
		stat = disk_status(fs->drv);
 8004864:	7860      	ldrb	r0, [r4, #1]
 8004866:	f7ff fda9 	bl	80043bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800486a:	07c3      	lsls	r3, r0, #31
 800486c:	d409      	bmi.n	8004882 <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800486e:	2f00      	cmp	r7, #0
 8004870:	f000 80db 	beq.w	8004a2a <find_volume+0x1f6>
 8004874:	0741      	lsls	r1, r0, #29
 8004876:	f140 80d8 	bpl.w	8004a2a <find_volume+0x1f6>
				return FR_WRITE_PROTECTED;
 800487a:	200a      	movs	r0, #10
}
 800487c:	b004      	add	sp, #16
 800487e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004882:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004884:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8004886:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004888:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800488a:	f7ff fda1 	bl	80043d0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800488e:	07c2      	lsls	r2, r0, #31
 8004890:	f100 80f7 	bmi.w	8004a82 <find_volume+0x24e>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004894:	b10f      	cbz	r7, 800489a <find_volume+0x66>
 8004896:	0743      	lsls	r3, r0, #29
 8004898:	d4ef      	bmi.n	800487a <find_volume+0x46>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800489a:	2100      	movs	r1, #0
 800489c:	4620      	mov	r0, r4
 800489e:	f7ff ff8d 	bl	80047bc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80048a2:	2802      	cmp	r0, #2
 80048a4:	f040 80cd 	bne.w	8004a42 <find_volume+0x20e>
 80048a8:	466d      	mov	r5, sp
 80048aa:	f504 73fb 	add.w	r3, r4, #502	@ 0x1f6
 80048ae:	f204 2136 	addw	r1, r4, #566	@ 0x236
 80048b2:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048b4:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 80048b8:	b110      	cbz	r0, 80048c0 <find_volume+0x8c>
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fdc4 	bl	8004448 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048c0:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80048c2:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d1f4      	bne.n	80048b4 <find_volume+0x80>
 80048ca:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 80048ce:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	f000 80ab 	beq.w	8004a2e <find_volume+0x1fa>
 80048d8:	4639      	mov	r1, r7
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff ff6e 	bl	80047bc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80048e0:	2801      	cmp	r0, #1
 80048e2:	f200 80a5 	bhi.w	8004a30 <find_volume+0x1fc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80048e6:	f8b4 303b 	ldrh.w	r3, [r4, #59]	@ 0x3b
 80048ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ee:	f040 80ae 	bne.w	8004a4e <find_volume+0x21a>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80048f2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80048f6:	b921      	cbnz	r1, 8004902 <find_volume+0xce>
 80048f8:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80048fc:	f7ff fda4 	bl	8004448 <ld_dword>
 8004900:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004902:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
		fs->fsize = fasize;
 8004906:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004908:	1e53      	subs	r3, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800490a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800490c:	2b01      	cmp	r3, #1
 800490e:	f200 809e 	bhi.w	8004a4e <find_volume+0x21a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004912:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
 8004916:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004918:	2d00      	cmp	r5, #0
 800491a:	f000 8098 	beq.w	8004a4e <find_volume+0x21a>
 800491e:	1e6b      	subs	r3, r5, #1
 8004920:	422b      	tst	r3, r5
 8004922:	f040 8094 	bne.w	8004a4e <find_volume+0x21a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004926:	f8b4 8041 	ldrh.w	r8, [r4, #65]	@ 0x41
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800492a:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800492e:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004932:	f040 808c 	bne.w	8004a4e <find_volume+0x21a>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004936:	f8b4 0043 	ldrh.w	r0, [r4, #67]	@ 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800493a:	b918      	cbnz	r0, 8004944 <find_volume+0x110>
 800493c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004940:	f7ff fd82 	bl	8004448 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004944:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8081 	beq.w	8004a4e <find_volume+0x21a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800494c:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004950:	eb03 1c18 	add.w	ip, r3, r8, lsr #4
 8004954:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004956:	4560      	cmp	r0, ip
 8004958:	d379      	bcc.n	8004a4e <find_volume+0x21a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800495a:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800495e:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004960:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004964:	d373      	bcc.n	8004a4e <find_volume+0x21a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004966:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 800496a:	4282      	cmp	r2, r0
 800496c:	d873      	bhi.n	8004a56 <find_volume+0x222>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800496e:	f640 75f5 	movw	r5, #4085	@ 0xff5
 8004972:	42aa      	cmp	r2, r5
 8004974:	bf94      	ite	ls
 8004976:	2501      	movls	r5, #1
 8004978:	2502      	movhi	r5, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800497a:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800497c:	443b      	add	r3, r7
		fs->database = bsect + sysect;					/* Data start sector */
 800497e:	eb07 000c 	add.w	r0, r7, ip
		if (fmt == FS_FAT32) {
 8004982:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004984:	6162      	str	r2, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004986:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004988:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800498a:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800498c:	d165      	bne.n	8004a5a <find_volume+0x226>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800498e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8004992:	ea58 0303 	orrs.w	r3, r8, r3
 8004996:	d15a      	bne.n	8004a4e <find_volume+0x21a>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004998:	0092      	lsls	r2, r2, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800499a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800499e:	f7ff fd53 	bl	8004448 <ld_dword>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049a2:	f202 12ff 	addw	r2, r2, #511	@ 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80049a6:	6260      	str	r0, [r4, #36]	@ 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049a8:	ebb1 2f52 	cmp.w	r1, r2, lsr #9
 80049ac:	d34f      	bcc.n	8004a4e <find_volume+0x21a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80049b2:	2d03      	cmp	r5, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049b4:	e9c4 3303 	strd	r3, r3, [r4, #12]
		fs->fsi_flag = 0x80;
 80049b8:	f04f 0380 	mov.w	r3, #128	@ 0x80
 80049bc:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80049be:	d12b      	bne.n	8004a18 <find_volume+0x1e4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80049c0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d127      	bne.n	8004a18 <find_volume+0x1e4>
			&& move_window(fs, bsect + 1) == FR_OK)
 80049c8:	1c79      	adds	r1, r7, #1
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7ff fedc 	bl	8004788 <move_window>
 80049d0:	bb10      	cbnz	r0, 8004a18 <find_volume+0x1e4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80049d2:	f8b4 222e 	ldrh.w	r2, [r4, #558]	@ 0x22e
 80049d6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
			fs->fsi_flag = 0;
 80049da:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80049dc:	429a      	cmp	r2, r3
 80049de:	d11b      	bne.n	8004a18 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80049e0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a8c <find_volume+0x258>)
 80049e2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80049e6:	f7ff fd2f 	bl	8004448 <ld_dword>
 80049ea:	4298      	cmp	r0, r3
 80049ec:	d114      	bne.n	8004a18 <find_volume+0x1e4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80049ee:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 80049f2:	f504 7005 	add.w	r0, r4, #532	@ 0x214
 80049f6:	f7ff fd27 	bl	8004448 <ld_dword>
 80049fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80049fe:	3320      	adds	r3, #32
 8004a00:	4298      	cmp	r0, r3
 8004a02:	d109      	bne.n	8004a18 <find_volume+0x1e4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a04:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8004a08:	f7ff fd1e 	bl	8004448 <ld_dword>
 8004a0c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004a0e:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8004a12:	f7ff fd19 	bl	8004448 <ld_dword>
 8004a16:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 8004a18:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 8004a1a:	4620      	mov	r0, r4
	fs->fs_type = fmt;		/* FAT sub-type */
 8004a1c:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004a1e:	3301      	adds	r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	80e3      	strh	r3, [r4, #6]
 8004a24:	8533      	strh	r3, [r6, #40]	@ 0x28
	clear_lock(fs);
 8004a26:	f7ff fdb9 	bl	800459c <clear_lock>
			return FR_OK;				/* The file system object is valid */
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e726      	b.n	800487c <find_volume+0x48>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a2e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a30:	f108 0801 	add.w	r8, r8, #1
 8004a34:	f1b8 0f04 	cmp.w	r8, #4
 8004a38:	f47f af49 	bne.w	80048ce <find_volume+0x9a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a3c:	2804      	cmp	r0, #4
 8004a3e:	d106      	bne.n	8004a4e <find_volume+0x21a>
 8004a40:	e001      	b.n	8004a46 <find_volume+0x212>
 8004a42:	2804      	cmp	r0, #4
 8004a44:	d101      	bne.n	8004a4a <find_volume+0x216>
 8004a46:	2001      	movs	r0, #1
 8004a48:	e718      	b.n	800487c <find_volume+0x48>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a4a:	2801      	cmp	r0, #1
 8004a4c:	d901      	bls.n	8004a52 <find_volume+0x21e>
 8004a4e:	200d      	movs	r0, #13
 8004a50:	e714      	b.n	800487c <find_volume+0x48>
 8004a52:	2700      	movs	r7, #0
 8004a54:	e747      	b.n	80048e6 <find_volume+0xb2>
		fmt = FS_FAT32;
 8004a56:	2503      	movs	r5, #3
 8004a58:	e78f      	b.n	800497a <find_volume+0x146>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004a5a:	f1b8 0f00 	cmp.w	r8, #0
 8004a5e:	d0f6      	beq.n	8004a4e <find_volume+0x21a>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004a60:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004a62:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004a66:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004a6a:	bf1b      	ittet	ne
 8004a6c:	189b      	addne	r3, r3, r2
 8004a6e:	f002 0201 	andne.w	r2, r2, #1
 8004a72:	461a      	moveq	r2, r3
 8004a74:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
 8004a78:	e793      	b.n	80049a2 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a7a:	200b      	movs	r0, #11
 8004a7c:	e6fe      	b.n	800487c <find_volume+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a7e:	200c      	movs	r0, #12
 8004a80:	e6fc      	b.n	800487c <find_volume+0x48>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004a82:	2003      	movs	r0, #3
 8004a84:	e6fa      	b.n	800487c <find_volume+0x48>
 8004a86:	bf00      	nop
 8004a88:	20000ecc 	.word	0x20000ecc
 8004a8c:	41615252 	.word	0x41615252

08004a90 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a90:	2901      	cmp	r1, #1
{
 8004a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a96:	4606      	mov	r6, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a9c:	d96e      	bls.n	8004b7c <put_fat+0xec>
 8004a9e:	6943      	ldr	r3, [r0, #20]
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	d96b      	bls.n	8004b7c <put_fat+0xec>
		switch (fs->fs_type) {
 8004aa4:	7803      	ldrb	r3, [r0, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d03d      	beq.n	8004b26 <put_fat+0x96>
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d04e      	beq.n	8004b4c <put_fat+0xbc>
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d164      	bne.n	8004b7c <put_fat+0xec>
			bc = (UINT)clst; bc += bc / 2;
 8004ab2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ab6:	6a01      	ldr	r1, [r0, #32]
 8004ab8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004abc:	f7ff fe64 	bl	8004788 <move_window>
			if (res != FR_OK) break;
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	bb28      	cbnz	r0, 8004b10 <put_fat+0x80>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ac4:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004ac8:	f106 0930 	add.w	r9, r6, #48	@ 0x30
 8004acc:	f108 0a01 	add.w	sl, r8, #1
 8004ad0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ad4:	b2fb      	uxtb	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ad6:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004ad8:	bf1f      	itttt	ne
 8004ada:	f819 2008 	ldrbne.w	r2, [r9, r8]
 8004ade:	f002 020f 	andne.w	r2, r2, #15
 8004ae2:	ea42 1303 	orrne.w	r3, r2, r3, lsl #4
 8004ae6:	b2db      	uxtbne	r3, r3
 8004ae8:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8004aec:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004aee:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8004af0:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004af2:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004af6:	f7ff fe47 	bl	8004788 <move_window>
			if (res != FR_OK) break;
 8004afa:	4605      	mov	r5, r0
 8004afc:	b940      	cbnz	r0, 8004b10 <put_fat+0x80>
			p = fs->win + bc % SS(fs);
 8004afe:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b02:	b144      	cbz	r4, 8004b16 <put_fat+0x86>
 8004b04:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004b08:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	70f3      	strb	r3, [r6, #3]
}
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b16:	f819 300a 	ldrb.w	r3, [r9, sl]
 8004b1a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004b1e:	f023 030f 	bic.w	r3, r3, #15
 8004b22:	431f      	orrs	r7, r3
 8004b24:	e7f0      	b.n	8004b08 <put_fat+0x78>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b26:	6a01      	ldr	r1, [r0, #32]
 8004b28:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004b2c:	f7ff fe2c 	bl	8004788 <move_window>
			if (res != FR_OK) break;
 8004b30:	4605      	mov	r5, r0
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1ec      	bne.n	8004b10 <put_fat+0x80>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b36:	0064      	lsls	r4, r4, #1
 8004b38:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 8004b3c:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004b40:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b42:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004b44:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004b48:	7057      	strb	r7, [r2, #1]
			fs->wflag = 1;
 8004b4a:	e7df      	b.n	8004b0c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b4c:	6a01      	ldr	r1, [r0, #32]
 8004b4e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004b52:	f7ff fe19 	bl	8004788 <move_window>
			if (res != FR_OK) break;
 8004b56:	4605      	mov	r5, r0
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d1d9      	bne.n	8004b10 <put_fat+0x80>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b5c:	00a4      	lsls	r4, r4, #2
 8004b5e:	f106 0330 	add.w	r3, r6, #48	@ 0x30
 8004b62:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8004b66:	4423      	add	r3, r4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fc6d 	bl	8004448 <ld_dword>
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b6e:	4601      	mov	r1, r0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f367 011b 	bfi	r1, r7, #0, #28
 8004b76:	f7ff fc69 	bl	800444c <st_dword>
 8004b7a:	e7c7      	b.n	8004b0c <put_fat+0x7c>
	FRESULT res = FR_INT_ERR;
 8004b7c:	2502      	movs	r5, #2
 8004b7e:	e7c7      	b.n	8004b10 <put_fat+0x80>

08004b80 <sync_fs>:
{
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004b84:	f7ff fdc6 	bl	8004714 <sync_window>
 8004b88:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d142      	bne.n	8004c14 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b8e:	7823      	ldrb	r3, [r4, #0]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d137      	bne.n	8004c04 <sync_fs+0x84>
 8004b94:	7927      	ldrb	r7, [r4, #4]
 8004b96:	2f01      	cmp	r7, #1
 8004b98:	d134      	bne.n	8004c04 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004b9a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004b9e:	2355      	movs	r3, #85	@ 0x55
			mem_set(fs->win, 0, SS(fs));
 8004ba0:	4601      	mov	r1, r0
 8004ba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f7ff fc58 	bl	800445c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004bac:	f884 322e 	strb.w	r3, [r4, #558]	@ 0x22e
	*ptr++ = (BYTE)val;
 8004bb0:	23aa      	movs	r3, #170	@ 0xaa
	*ptr++ = (BYTE)val;
 8004bb2:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004bb4:	2172      	movs	r1, #114	@ 0x72
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004bb6:	f504 7006 	add.w	r0, r4, #536	@ 0x218
	*ptr++ = (BYTE)val;
 8004bba:	f884 322f 	strb.w	r3, [r4, #559]	@ 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8004bbe:	2352      	movs	r3, #82	@ 0x52
	*ptr++ = (BYTE)val;
 8004bc0:	f884 2033 	strb.w	r2, [r4, #51]	@ 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8004bc8:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8004bcc:	2361      	movs	r3, #97	@ 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 8004bce:	f884 1214 	strb.w	r1, [r4, #532]	@ 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8004bd2:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
	*ptr++ = (BYTE)val;
 8004bd6:	f884 3217 	strb.w	r3, [r4, #535]	@ 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8004bda:	f884 1215 	strb.w	r1, [r4, #533]	@ 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8004bde:	f884 2216 	strb.w	r2, [r4, #534]	@ 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004be2:	6921      	ldr	r1, [r4, #16]
 8004be4:	f7ff fc32 	bl	800444c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004be8:	68e1      	ldr	r1, [r4, #12]
 8004bea:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8004bee:	f7ff fc2d 	bl	800444c <st_dword>
			fs->winsect = fs->volbase + 1;
 8004bf2:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8004bf8:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004bfa:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004bfc:	62e2      	str	r2, [r4, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004bfe:	f7ff fc05 	bl	800440c <disk_write>
			fs->fsi_flag = 0;
 8004c02:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c04:	2200      	movs	r2, #0
 8004c06:	7860      	ldrb	r0, [r4, #1]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	f7ff fc0d 	bl	8004428 <disk_ioctl>
 8004c0e:	3800      	subs	r0, #0
 8004c10:	bf18      	it	ne
 8004c12:	2001      	movne	r0, #1
}
 8004c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c16 <get_fileinfo.part.0.constprop.0.isra.0>:
void get_fileinfo (		/* No return code */
 8004c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = j = 0;
 8004c18:	2300      	movs	r3, #0
void get_fileinfo (		/* No return code */
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	1e45      	subs	r5, r0, #1
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8004c1e:	262e      	movs	r6, #46	@ 0x2e
	i = j = 0;
 8004c20:	461c      	mov	r4, r3
		c = (TCHAR)dp->dir[i++];
 8004c22:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8004c26:	3401      	adds	r4, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8004c28:	2820      	cmp	r0, #32
 8004c2a:	d00a      	beq.n	8004c42 <get_fileinfo.part.0.constprop.0.isra.0+0x2c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004c2c:	2805      	cmp	r0, #5
 8004c2e:	bf08      	it	eq
 8004c30:	20e5      	moveq	r0, #229	@ 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8004c32:	2c09      	cmp	r4, #9
 8004c34:	bf02      	ittt	eq
 8004c36:	18cf      	addeq	r7, r1, r3
 8004c38:	3301      	addeq	r3, #1
 8004c3a:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 8004c3c:	18cf      	adds	r7, r1, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	7278      	strb	r0, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 8004c42:	2c0b      	cmp	r4, #11
 8004c44:	d1ed      	bne.n	8004c22 <get_fileinfo.part.0.constprop.0.isra.0+0xc>
	fno->fname[j] = 0;
 8004c46:	440b      	add	r3, r1
 8004c48:	2000      	movs	r0, #0
 8004c4a:	7258      	strb	r0, [r3, #9]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004c4c:	f102 001c 	add.w	r0, r2, #28
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004c50:	7ad3      	ldrb	r3, [r2, #11]
 8004c52:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004c54:	f7ff fbf8 	bl	8004448 <ld_dword>
 8004c58:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004c5a:	f102 0016 	add.w	r0, r2, #22
 8004c5e:	f7ff fbf3 	bl	8004448 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004c62:	80c8      	strh	r0, [r1, #6]
 8004c64:	0c00      	lsrs	r0, r0, #16
 8004c66:	8088      	strh	r0, [r1, #4]
}
 8004c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c6a <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8004c6a:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004c6c:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c6e:	bf04      	itt	eq
 8004c70:	8a8a      	ldrheq	r2, [r1, #20]
 8004c72:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	4770      	bx	lr

08004c7a <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c7a:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	4606      	mov	r6, r0
 8004c80:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c82:	d94e      	bls.n	8004d22 <get_fat.isra.0+0xa8>
 8004c84:	6943      	ldr	r3, [r0, #20]
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d24b      	bcs.n	8004d22 <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 8004c8a:	7803      	ldrb	r3, [r0, #0]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d029      	beq.n	8004ce4 <get_fat.isra.0+0x6a>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d034      	beq.n	8004cfe <get_fat.isra.0+0x84>
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d144      	bne.n	8004d22 <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 8004c98:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c9c:	6a01      	ldr	r1, [r0, #32]
 8004c9e:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8004ca2:	f7ff fd71 	bl	8004788 <move_window>
 8004ca6:	b110      	cbz	r0, 8004cae <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004cae:	1c6f      	adds	r7, r5, #1
 8004cb0:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cb4:	6a31      	ldr	r1, [r6, #32]
 8004cb6:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 8004cb8:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cba:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8004cbe:	f895 5030 	ldrb.w	r5, [r5, #48]	@ 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cc2:	f7ff fd61 	bl	8004788 <move_window>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1ee      	bne.n	8004ca8 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cca:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004cce:	4437      	add	r7, r6
 8004cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004cd4:	ea45 2003 	orr.w	r0, r5, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cd8:	07e3      	lsls	r3, r4, #31
 8004cda:	bf4c      	ite	mi
 8004cdc:	0900      	lsrmi	r0, r0, #4
 8004cde:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ce2:	e7e3      	b.n	8004cac <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ce4:	6a01      	ldr	r1, [r0, #32]
 8004ce6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004cea:	f7ff fd4d 	bl	8004788 <move_window>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1da      	bne.n	8004ca8 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004cf2:	0064      	lsls	r4, r4, #1
 8004cf4:	f404 74ff 	and.w	r4, r4, #510	@ 0x1fe
 8004cf8:	4434      	add	r4, r6
 8004cfa:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
			break;
 8004cfc:	e7d6      	b.n	8004cac <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004cfe:	6a01      	ldr	r1, [r0, #32]
 8004d00:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004d04:	f7ff fd40 	bl	8004788 <move_window>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d1cd      	bne.n	8004ca8 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d0c:	00a4      	lsls	r4, r4, #2
 8004d0e:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8004d12:	f404 74fe 	and.w	r4, r4, #508	@ 0x1fc
 8004d16:	4420      	add	r0, r4
 8004d18:	f7ff fb96 	bl	8004448 <ld_dword>
 8004d1c:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8004d20:	e7c4      	b.n	8004cac <get_fat.isra.0+0x32>
		val = 1;	/* Internal error */
 8004d22:	2001      	movs	r0, #1
	return val;
 8004d24:	e7c2      	b.n	8004cac <get_fat.isra.0+0x32>

08004d26 <dir_sdi.constprop.0>:
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8004d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dp->dptr = ofs;				/* Set current offset */
 8004d28:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d2a:	6886      	ldr	r6, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8004d2c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004d2e:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8004d30:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d32:	b9b6      	cbnz	r6, 8004d62 <dir_sdi.constprop.0+0x3c>
 8004d34:	782b      	ldrb	r3, [r5, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8004d3a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d3c:	b983      	cbnz	r3, 8004d60 <dir_sdi.constprop.0+0x3a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d3e:	892b      	ldrh	r3, [r5, #8]
 8004d40:	b90b      	cbnz	r3, 8004d46 <dir_sdi.constprop.0+0x20>
		return FR_INT_ERR;
 8004d42:	2002      	movs	r0, #2
}
 8004d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 8004d46:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004d48:	2200      	movs	r2, #0
	dp->clust = clst;					/* Current cluster# */
 8004d4a:	e9c4 2006 	strd	r2, r0, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d4e:	2800      	cmp	r0, #0
 8004d50:	d0f7      	beq.n	8004d42 <dir_sdi.constprop.0+0x1c>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d52:	eb00 2056 	add.w	r0, r0, r6, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d56:	3530      	adds	r5, #48	@ 0x30
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d58:	61e0      	str	r0, [r4, #28]
	return FR_OK;
 8004d5a:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d5c:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8004d5e:	e7f1      	b.n	8004d44 <dir_sdi.constprop.0+0x1e>
 8004d60:	461e      	mov	r6, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d62:	896f      	ldrh	r7, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d64:	4632      	mov	r2, r6
 8004d66:	2600      	movs	r6, #0
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d68:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d6a:	42b7      	cmp	r7, r6
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d6c:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d6e:	d903      	bls.n	8004d78 <dir_sdi.constprop.0+0x52>
		dp->sect = clust2sect(fs, clst);
 8004d70:	4628      	mov	r0, r5
 8004d72:	f7ff fc21 	bl	80045b8 <clust2sect>
 8004d76:	e7e8      	b.n	8004d4a <dir_sdi.constprop.0+0x24>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	f7ff ff7e 	bl	8004c7a <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d7e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d80:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d82:	d006      	beq.n	8004d92 <dir_sdi.constprop.0+0x6c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d84:	2801      	cmp	r0, #1
 8004d86:	d9dc      	bls.n	8004d42 <dir_sdi.constprop.0+0x1c>
 8004d88:	696b      	ldr	r3, [r5, #20]
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	d2d9      	bcs.n	8004d42 <dir_sdi.constprop.0+0x1c>
			ofs -= csz;
 8004d8e:	1bf6      	subs	r6, r6, r7
 8004d90:	e7eb      	b.n	8004d6a <dir_sdi.constprop.0+0x44>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d92:	2001      	movs	r0, #1
 8004d94:	e7d6      	b.n	8004d44 <dir_sdi.constprop.0+0x1e>

08004d96 <remove_chain>:
{
 8004d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d98:	460c      	mov	r4, r1
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 8004d9e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004da0:	2c01      	cmp	r4, #1
 8004da2:	d92b      	bls.n	8004dfc <remove_chain+0x66>
 8004da4:	696b      	ldr	r3, [r5, #20]
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d928      	bls.n	8004dfc <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004daa:	b12a      	cbz	r2, 8004db8 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295
 8004db0:	4628      	mov	r0, r5
 8004db2:	f7ff fe6d 	bl	8004a90 <put_fat>
		if (res != FR_OK) return res;
 8004db6:	b938      	cbnz	r0, 8004dc8 <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004db8:	4621      	mov	r1, r4
 8004dba:	6830      	ldr	r0, [r6, #0]
 8004dbc:	4627      	mov	r7, r4
 8004dbe:	f7ff ff5c 	bl	8004c7a <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	b908      	cbnz	r0, 8004dca <remove_chain+0x34>
	return FR_OK;
 8004dc6:	2000      	movs	r0, #0
}
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004dca:	2801      	cmp	r0, #1
 8004dcc:	d016      	beq.n	8004dfc <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d016      	beq.n	8004e00 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4639      	mov	r1, r7
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7ff fe5a 	bl	8004a90 <put_fat>
			if (res != FR_OK) return res;
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d1f3      	bne.n	8004dc8 <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004de0:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8004de4:	1e91      	subs	r1, r2, #2
 8004de6:	428b      	cmp	r3, r1
 8004de8:	d205      	bcs.n	8004df6 <remove_chain+0x60>
			fs->free_clst++;
 8004dea:	3301      	adds	r3, #1
 8004dec:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8004dee:	792b      	ldrb	r3, [r5, #4]
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004df6:	42a2      	cmp	r2, r4
 8004df8:	d8de      	bhi.n	8004db8 <remove_chain+0x22>
 8004dfa:	e7e4      	b.n	8004dc6 <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	e7e3      	b.n	8004dc8 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e00:	2001      	movs	r0, #1
 8004e02:	e7e1      	b.n	8004dc8 <remove_chain+0x32>

08004e04 <create_chain>:
{
 8004e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e08:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8004e0a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004e0c:	460f      	mov	r7, r1
 8004e0e:	b971      	cbnz	r1, 8004e2e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e10:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e12:	b1ee      	cbz	r6, 8004e50 <create_chain+0x4c>
 8004e14:	696b      	ldr	r3, [r5, #20]
 8004e16:	429e      	cmp	r6, r3
 8004e18:	bf28      	it	cs
 8004e1a:	2601      	movcs	r6, #1
		ncl = scl;	/* Start cluster */
 8004e1c:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8004e1e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e20:	696b      	ldr	r3, [r5, #20]
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	d817      	bhi.n	8004e56 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8004e26:	2e01      	cmp	r6, #1
 8004e28:	d114      	bne.n	8004e54 <create_chain+0x50>
 8004e2a:	2400      	movs	r4, #0
 8004e2c:	e006      	b.n	8004e3c <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7ff ff23 	bl	8004c7a <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e34:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e36:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e38:	d803      	bhi.n	8004e42 <create_chain+0x3e>
 8004e3a:	2401      	movs	r4, #1
}
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d030      	beq.n	8004ea8 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e46:	696b      	ldr	r3, [r5, #20]
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d8f7      	bhi.n	8004e3c <create_chain+0x38>
		scl = clst;
 8004e4c:	463e      	mov	r6, r7
 8004e4e:	e7e5      	b.n	8004e1c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e50:	2601      	movs	r6, #1
 8004e52:	e7e3      	b.n	8004e1c <create_chain+0x18>
				ncl = 2;
 8004e54:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e56:	4621      	mov	r1, r4
 8004e58:	f8d8 0000 	ldr.w	r0, [r8]
 8004e5c:	f7ff ff0d 	bl	8004c7a <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8004e60:	b130      	cbz	r0, 8004e70 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004e62:	2801      	cmp	r0, #1
 8004e64:	d0e9      	beq.n	8004e3a <create_chain+0x36>
 8004e66:	3001      	adds	r0, #1
 8004e68:	d01e      	beq.n	8004ea8 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8004e6a:	42b4      	cmp	r4, r6
 8004e6c:	d1d7      	bne.n	8004e1e <create_chain+0x1a>
 8004e6e:	e7dc      	b.n	8004e2a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7ff fe0a 	bl	8004a90 <put_fat>
		if (res == FR_OK && clst != 0) {
 8004e7c:	b990      	cbnz	r0, 8004ea4 <create_chain+0xa0>
 8004e7e:	b957      	cbnz	r7, 8004e96 <create_chain+0x92>
		fs->last_clst = ncl;
 8004e80:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e82:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8004e86:	3a02      	subs	r2, #2
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d910      	bls.n	8004eae <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8004e8c:	792b      	ldrb	r3, [r5, #4]
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	712b      	strb	r3, [r5, #4]
 8004e94:	e7d2      	b.n	8004e3c <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004e96:	4622      	mov	r2, r4
 8004e98:	4639      	mov	r1, r7
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f7ff fdf8 	bl	8004a90 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d0ed      	beq.n	8004e80 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ea4:	2801      	cmp	r0, #1
 8004ea6:	d1c8      	bne.n	8004e3a <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8004eac:	e7c6      	b.n	8004e3c <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	612b      	str	r3, [r5, #16]
 8004eb2:	e7eb      	b.n	8004e8c <create_chain+0x88>

08004eb4 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004eb4:	6943      	ldr	r3, [r0, #20]
{
 8004eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004eba:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ebe:	69c3      	ldr	r3, [r0, #28]
{
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ec4:	b18b      	cbz	r3, 8004eea <dir_next+0x36>
 8004ec6:	f5b8 1f00 	cmp.w	r8, #2097152	@ 0x200000
 8004eca:	d20e      	bcs.n	8004eea <dir_next+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ecc:	f3c8 0708 	ubfx	r7, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004ed0:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ed2:	2f00      	cmp	r7, #0
 8004ed4:	d14f      	bne.n	8004f76 <dir_next+0xc2>
		dp->sect++;				/* Next sector */
 8004ed6:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8004ed8:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004eda:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004edc:	b941      	cbnz	r1, 8004ef0 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ede:	8923      	ldrh	r3, [r4, #8]
 8004ee0:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004ee4:	d847      	bhi.n	8004f76 <dir_next+0xc2>
				dp->sect = 0; return FR_NO_FILE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004eea:	2004      	movs	r0, #4
}
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004ef0:	f8b4 900a 	ldrh.w	r9, [r4, #10]
 8004ef4:	f109 39ff 	add.w	r9, r9, #4294967295
 8004ef8:	ea19 2958 	ands.w	r9, r9, r8, lsr #9
 8004efc:	d13b      	bne.n	8004f76 <dir_next+0xc2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff febb 	bl	8004c7a <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f04:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f06:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f08:	d801      	bhi.n	8004f0e <dir_next+0x5a>
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	e7ee      	b.n	8004eec <dir_next+0x38>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f0e:	1c42      	adds	r2, r0, #1
 8004f10:	d101      	bne.n	8004f16 <dir_next+0x62>
 8004f12:	2001      	movs	r0, #1
 8004f14:	e7ea      	b.n	8004eec <dir_next+0x38>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f16:	6963      	ldr	r3, [r4, #20]
 8004f18:	4283      	cmp	r3, r0
 8004f1a:	d826      	bhi.n	8004f6a <dir_next+0xb6>
					if (!stretch) {								/* If no stretch, report EOT */
 8004f1c:	f1ba 0f00 	cmp.w	sl, #0
 8004f20:	d0e1      	beq.n	8004ee6 <dir_next+0x32>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004f22:	69a9      	ldr	r1, [r5, #24]
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7ff ff6d 	bl	8004e04 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d035      	beq.n	8004f9c <dir_next+0xe8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004f30:	2801      	cmp	r0, #1
 8004f32:	d0ea      	beq.n	8004f0a <dir_next+0x56>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d0ec      	beq.n	8004f12 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff fbeb 	bl	8004714 <sync_window>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1e6      	bne.n	8004f12 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f44:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
						fs->wflag = 1;
 8004f4c:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f50:	f7ff fa84 	bl	800445c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f54:	4631      	mov	r1, r6
 8004f56:	4620      	mov	r0, r4
 8004f58:	f7ff fb2e 	bl	80045b8 <clust2sect>
 8004f5c:	8963      	ldrh	r3, [r4, #10]
 8004f5e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004f60:	4599      	cmp	r9, r3
 8004f62:	d30f      	bcc.n	8004f84 <dir_next+0xd0>
					fs->winsect -= n;							/* Restore window offset */
 8004f64:	eba0 0009 	sub.w	r0, r0, r9
 8004f68:	62e0      	str	r0, [r4, #44]	@ 0x2c
				dp->sect = clust2sect(fs, clst);
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f6e:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8004f70:	f7ff fb22 	bl	80045b8 <clust2sect>
 8004f74:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f76:	3430      	adds	r4, #48	@ 0x30
	return FR_OK;
 8004f78:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8004f7a:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f7e:	443c      	add	r4, r7
 8004f80:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8004f82:	e7b3      	b.n	8004eec <dir_next+0x38>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f84:	4620      	mov	r0, r4
						fs->wflag = 1;
 8004f86:	f884 a003 	strb.w	sl, [r4, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f8a:	f7ff fbc3 	bl	8004714 <sync_window>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d1bf      	bne.n	8004f12 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f92:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004f94:	f109 0901 	add.w	r9, r9, #1
 8004f98:	3001      	adds	r0, #1
 8004f9a:	e7df      	b.n	8004f5c <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f9c:	2007      	movs	r0, #7
 8004f9e:	e7a5      	b.n	8004eec <dir_next+0x38>

08004fa0 <follow_path>:
{
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4681      	mov	r9, r0
	FATFS *fs = obj->fs;
 8004fa6:	6806      	ldr	r6, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004fa8:	460c      	mov	r4, r1
 8004faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fae:	2b2f      	cmp	r3, #47	@ 0x2f
 8004fb0:	d0fa      	beq.n	8004fa8 <follow_path+0x8>
 8004fb2:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fb4:	d0f8      	beq.n	8004fa8 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fbc:	7823      	ldrb	r3, [r4, #0]
 8004fbe:	2b1f      	cmp	r3, #31
 8004fc0:	d95d      	bls.n	800507e <follow_path+0xde>
	p = *path; sfn = dp->fn;
 8004fc2:	f109 0524 	add.w	r5, r9, #36	@ 0x24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004fc6:	4f54      	ldr	r7, [pc, #336]	@ (8005118 <follow_path+0x178>)
	mem_set(sfn, ' ', 11);
 8004fc8:	220b      	movs	r2, #11
 8004fca:	4628      	mov	r0, r5
 8004fcc:	2120      	movs	r1, #32
		c = (BYTE)p[si++];
 8004fce:	f1c4 0802 	rsb	r8, r4, #2
	mem_set(sfn, ' ', 11);
 8004fd2:	f7ff fa43 	bl	800445c <mem_set>
	si = i = 0; ni = 8;
 8004fd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8004fde:	eb08 010c 	add.w	r1, r8, ip
 8004fe2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d908      	bls.n	8004ffc <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004fea:	2b2f      	cmp	r3, #47	@ 0x2f
 8004fec:	d001      	beq.n	8004ff2 <follow_path+0x52>
 8004fee:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ff0:	d14f      	bne.n	8005092 <follow_path+0xf2>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004ff2:	5c60      	ldrb	r0, [r4, r1]
 8004ff4:	282f      	cmp	r0, #47	@ 0x2f
 8004ff6:	d04a      	beq.n	800508e <follow_path+0xee>
 8004ff8:	285c      	cmp	r0, #92	@ 0x5c
 8004ffa:	d048      	beq.n	800508e <follow_path+0xee>
	*path = p + si;						/* Return pointer to the next segment */
 8004ffc:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	d056      	beq.n	80050b0 <follow_path+0x110>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005002:	f899 2024 	ldrb.w	r2, [r9, #36]	@ 0x24
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005006:	4648      	mov	r0, r9
	FATFS *fs = dp->obj.fs;
 8005008:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800500c:	2ae5      	cmp	r2, #229	@ 0xe5
 800500e:	bf04      	itt	eq
 8005010:	2205      	moveq	r2, #5
 8005012:	f889 2024 	strbeq.w	r2, [r9, #36]	@ 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005016:	2b20      	cmp	r3, #32
 8005018:	bf8c      	ite	hi
 800501a:	2300      	movhi	r3, #0
 800501c:	2301      	movls	r3, #1
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005024:	f7ff fe7f 	bl	8004d26 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8005028:	2800      	cmp	r0, #0
 800502a:	d164      	bne.n	80050f6 <follow_path+0x156>
		res = move_window(fs, dp->sect);
 800502c:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8005030:	4640      	mov	r0, r8
 8005032:	f7ff fba9 	bl	8004788 <move_window>
		if (res != FR_OK) break;
 8005036:	2800      	cmp	r0, #0
 8005038:	d147      	bne.n	80050ca <follow_path+0x12a>
		c = dp->dir[DIR_Name];
 800503a:	f8d9 3020 	ldr.w	r3, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800503e:	781a      	ldrb	r2, [r3, #0]
 8005040:	2a00      	cmp	r2, #0
 8005042:	d060      	beq.n	8005106 <follow_path+0x166>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005044:	7ada      	ldrb	r2, [r3, #11]
 8005046:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800504a:	f889 2006 	strb.w	r2, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800504e:	7ad8      	ldrb	r0, [r3, #11]
 8005050:	f010 0008 	ands.w	r0, r0, #8
 8005054:	d10c      	bne.n	8005070 <follow_path+0xd0>
 8005056:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800505a:	4629      	mov	r1, r5
		r = *d++ - *s++;
 800505c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005060:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 8005064:	4563      	cmp	r3, ip
		r = *d++ - *s++;
 8005066:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 800506a:	d02c      	beq.n	80050c6 <follow_path+0x126>
 800506c:	2a00      	cmp	r2, #0
 800506e:	d0f5      	beq.n	800505c <follow_path+0xbc>
		res = dir_next(dp, 0);	/* Next entry */
 8005070:	2100      	movs	r1, #0
 8005072:	4648      	mov	r0, r9
 8005074:	f7ff ff1e 	bl	8004eb4 <dir_next>
	} while (res == FR_OK);
 8005078:	2800      	cmp	r0, #0
 800507a:	d0d7      	beq.n	800502c <follow_path+0x8c>
 800507c:	e025      	b.n	80050ca <follow_path+0x12a>
		dp->fn[NSFLAG] = NS_NONAME;
 800507e:	2380      	movs	r3, #128	@ 0x80
		res = dir_sdi(dp, 0);
 8005080:	4648      	mov	r0, r9
		dp->fn[NSFLAG] = NS_NONAME;
 8005082:	f889 302f 	strb.w	r3, [r9, #47]	@ 0x2f
}
 8005086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800508a:	f7ff be4c 	b.w	8004d26 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800508e:	3101      	adds	r1, #1
 8005090:	e7af      	b.n	8004ff2 <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005092:	2b2e      	cmp	r3, #46	@ 0x2e
 8005094:	d03b      	beq.n	800510e <follow_path+0x16e>
 8005096:	4290      	cmp	r0, r2
 8005098:	d90a      	bls.n	80050b0 <follow_path+0x110>
		if (c >= 0x80) {				/* Extended character? */
 800509a:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800509c:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 800511c <follow_path+0x17c>
 80050a0:	bf44      	itt	mi
 80050a2:	3b80      	submi	r3, #128	@ 0x80
 80050a4:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 80050a6:	f81e 1b01 	ldrb.w	r1, [lr], #1
 80050aa:	b119      	cbz	r1, 80050b4 <follow_path+0x114>
 80050ac:	428b      	cmp	r3, r1
 80050ae:	d1fa      	bne.n	80050a6 <follow_path+0x106>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050b0:	2006      	movs	r0, #6
	return res;
 80050b2:	e026      	b.n	8005102 <follow_path+0x162>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80050b4:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 80050b8:	2919      	cmp	r1, #25
 80050ba:	bf9c      	itt	ls
 80050bc:	3b20      	subls	r3, #32
 80050be:	b2db      	uxtbls	r3, r3
			sfn[i++] = c;
 80050c0:	54ab      	strb	r3, [r5, r2]
 80050c2:	3201      	adds	r2, #1
 80050c4:	e78b      	b.n	8004fde <follow_path+0x3e>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d1d2      	bne.n	8005070 <follow_path+0xd0>
			ns = dp->fn[NSFLAG];
 80050ca:	f899 302f 	ldrb.w	r3, [r9, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80050ce:	b9a0      	cbnz	r0, 80050fa <follow_path+0x15a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050d0:	075a      	lsls	r2, r3, #29
 80050d2:	d416      	bmi.n	8005102 <follow_path+0x162>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80050d4:	f899 3006 	ldrb.w	r3, [r9, #6]
 80050d8:	06db      	lsls	r3, r3, #27
 80050da:	d516      	bpl.n	800510a <follow_path+0x16a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80050dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80050e0:	f106 0130 	add.w	r1, r6, #48	@ 0x30
 80050e4:	7830      	ldrb	r0, [r6, #0]
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	4419      	add	r1, r3
 80050ec:	f7ff fdbd 	bl	8004c6a <ld_clust.isra.0>
 80050f0:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050f4:	e768      	b.n	8004fc8 <follow_path+0x28>
			ns = dp->fn[NSFLAG];
 80050f6:	f899 302f 	ldrb.w	r3, [r9, #47]	@ 0x2f
				if (res == FR_NO_FILE) {	/* Object is not found */
 80050fa:	2804      	cmp	r0, #4
 80050fc:	d101      	bne.n	8005102 <follow_path+0x162>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80050fe:	0759      	lsls	r1, r3, #29
 8005100:	d503      	bpl.n	800510a <follow_path+0x16a>
}
 8005102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005106:	2004      	movs	r0, #4
 8005108:	e7df      	b.n	80050ca <follow_path+0x12a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800510a:	2005      	movs	r0, #5
 800510c:	e7f9      	b.n	8005102 <follow_path+0x162>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800510e:	280b      	cmp	r0, #11
 8005110:	d0ce      	beq.n	80050b0 <follow_path+0x110>
			i = 8; ni = 11;				/* Goto extension */
 8005112:	2208      	movs	r2, #8
 8005114:	200b      	movs	r0, #11
 8005116:	e762      	b.n	8004fde <follow_path+0x3e>
 8005118:	08009f48 	.word	0x08009f48
 800511c:	0800a091 	.word	0x0800a091

08005120 <dir_read.constprop.0>:
FRESULT dir_read (
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005124:	6805      	ldr	r5, [r0, #0]
	FRESULT res = FR_NO_FILE;
 8005126:	2004      	movs	r0, #4
	while (dp->sect) {
 8005128:	69e1      	ldr	r1, [r4, #28]
 800512a:	b911      	cbnz	r1, 8005132 <dir_read.constprop.0+0x12>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800512c:	b9f8      	cbnz	r0, 800516e <dir_read.constprop.0+0x4e>
 800512e:	2000      	movs	r0, #0
}
 8005130:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(fs, dp->sect);
 8005132:	4628      	mov	r0, r5
 8005134:	f7ff fb28 	bl	8004788 <move_window>
		if (res != FR_OK) break;
 8005138:	b9b0      	cbnz	r0, 8005168 <dir_read.constprop.0+0x48>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800513a:	6a23      	ldr	r3, [r4, #32]
 800513c:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) {
 800513e:	b1b2      	cbz	r2, 800516e <dir_read.constprop.0+0x4e>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005140:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005142:	2ae5      	cmp	r2, #229	@ 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005148:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800514a:	d007      	beq.n	800515c <dir_read.constprop.0+0x3c>
 800514c:	2a2e      	cmp	r2, #46	@ 0x2e
 800514e:	d005      	beq.n	800515c <dir_read.constprop.0+0x3c>
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d003      	beq.n	800515c <dir_read.constprop.0+0x3c>
 8005154:	f023 0320 	bic.w	r3, r3, #32
 8005158:	2b08      	cmp	r3, #8
 800515a:	d1e8      	bne.n	800512e <dir_read.constprop.0+0xe>
		res = dir_next(dp, 0);		/* Next entry */
 800515c:	2100      	movs	r1, #0
 800515e:	4620      	mov	r0, r4
 8005160:	f7ff fea8 	bl	8004eb4 <dir_next>
		if (res != FR_OK) break;
 8005164:	2800      	cmp	r0, #0
 8005166:	d0df      	beq.n	8005128 <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005168:	2300      	movs	r3, #0
 800516a:	61e3      	str	r3, [r4, #28]
	return res;
 800516c:	e7e0      	b.n	8005130 <dir_read.constprop.0+0x10>
 800516e:	2004      	movs	r0, #4
 8005170:	e7fa      	b.n	8005168 <dir_read.constprop.0+0x48>

08005172 <dir_register>:
{
 8005172:	b570      	push	{r4, r5, r6, lr}
 8005174:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8005176:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005178:	f7ff fdd5 	bl	8004d26 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 800517c:	4604      	mov	r4, r0
 800517e:	b978      	cbnz	r0, 80051a0 <dir_register+0x2e>
			res = move_window(fs, dp->sect);
 8005180:	69e9      	ldr	r1, [r5, #28]
 8005182:	4630      	mov	r0, r6
 8005184:	f7ff fb00 	bl	8004788 <move_window>
			if (res != FR_OK) break;
 8005188:	4604      	mov	r4, r0
 800518a:	b948      	cbnz	r0, 80051a0 <dir_register+0x2e>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800518c:	6a2b      	ldr	r3, [r5, #32]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2be5      	cmp	r3, #229	@ 0xe5
 8005192:	d00a      	beq.n	80051aa <dir_register+0x38>
 8005194:	b14b      	cbz	r3, 80051aa <dir_register+0x38>
			res = dir_next(dp, 1);
 8005196:	2101      	movs	r1, #1
 8005198:	4628      	mov	r0, r5
 800519a:	f7ff fe8b 	bl	8004eb4 <dir_next>
 800519e:	e7ed      	b.n	800517c <dir_register+0xa>
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80051a0:	2c04      	cmp	r4, #4
 80051a2:	bf08      	it	eq
 80051a4:	2407      	moveq	r4, #7
}
 80051a6:	4620      	mov	r0, r4
 80051a8:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 80051aa:	69e9      	ldr	r1, [r5, #28]
 80051ac:	4630      	mov	r0, r6
 80051ae:	f7ff faeb 	bl	8004788 <move_window>
		if (res == FR_OK) {
 80051b2:	4604      	mov	r4, r0
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d1f6      	bne.n	80051a6 <dir_register+0x34>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80051b8:	2220      	movs	r2, #32
 80051ba:	4621      	mov	r1, r4
 80051bc:	6a28      	ldr	r0, [r5, #32]
 80051be:	f7ff f94d 	bl	800445c <mem_set>
	if (cnt) {
 80051c2:	220b      	movs	r2, #11
 80051c4:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80051c8:	6a28      	ldr	r0, [r5, #32]
 80051ca:	f7ff fac8 	bl	800475e <mem_cpy.part.0>
			fs->wflag = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	70f3      	strb	r3, [r6, #3]
 80051d2:	e7e8      	b.n	80051a6 <dir_register+0x34>

080051d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80051d4:	b530      	push	{r4, r5, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	4614      	mov	r4, r2
 80051da:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80051de:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 80051e0:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80051e2:	f7ff fa60 	bl	80046a6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80051e6:	2800      	cmp	r0, #0
 80051e8:	db1b      	blt.n	8005222 <f_mount+0x4e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80051ea:	490f      	ldr	r1, [pc, #60]	@ (8005228 <f_mount+0x54>)
 80051ec:	0085      	lsls	r5, r0, #2
 80051ee:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80051f2:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 80051f4:	b118      	cbz	r0, 80051fe <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80051f6:	f7ff f9d1 	bl	800459c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80051fa:	2300      	movs	r3, #0
 80051fc:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	b923      	cbnz	r3, 800520c <f_mount+0x38>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005202:	4429      	add	r1, r5
 8005204:	620b      	str	r3, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005206:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8005208:	b005      	add	sp, #20
 800520a:	bd30      	pop	{r4, r5, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 800520c:	2200      	movs	r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 800520e:	4429      	add	r1, r5
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005210:	2c01      	cmp	r4, #1
		fs->fs_type = 0;				/* Clear new fs object */
 8005212:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8005214:	620b      	str	r3, [r1, #32]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005216:	d1f6      	bne.n	8005206 <f_mount+0x32>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005218:	a901      	add	r1, sp, #4
 800521a:	4668      	mov	r0, sp
 800521c:	f7ff fb0a 	bl	8004834 <find_volume>
	LEAVE_FF(fs, res);
 8005220:	e7f2      	b.n	8005208 <f_mount+0x34>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005222:	200b      	movs	r0, #11
 8005224:	e7f0      	b.n	8005208 <f_mount+0x34>
 8005226:	bf00      	nop
 8005228:	20000ecc 	.word	0x20000ecc

0800522c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800522c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005230:	b091      	sub	sp, #68	@ 0x44
 8005232:	4690      	mov	r8, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005234:	4604      	mov	r4, r0
{
 8005236:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8005238:	2800      	cmp	r0, #0
 800523a:	f000 80f0 	beq.w	800541e <f_open+0x1f2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800523e:	f002 063f 	and.w	r6, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8005242:	a902      	add	r1, sp, #8
 8005244:	a801      	add	r0, sp, #4
 8005246:	4632      	mov	r2, r6
 8005248:	f7ff faf4 	bl	8004834 <find_volume>
	if (res == FR_OK) {
 800524c:	4607      	mov	r7, r0
 800524e:	2800      	cmp	r0, #0
 8005250:	d16f      	bne.n	8005332 <f_open+0x106>
		dj.obj.fs = fs;
 8005252:	9d02      	ldr	r5, [sp, #8]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005254:	a803      	add	r0, sp, #12
 8005256:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8005258:	9503      	str	r5, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800525a:	f7ff fea1 	bl	8004fa0 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800525e:	b958      	cbnz	r0, 8005278 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005260:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8005264:	2b00      	cmp	r3, #0
 8005266:	db6b      	blt.n	8005340 <f_open+0x114>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005268:	f018 0f3e 	tst.w	r8, #62	@ 0x3e
 800526c:	a803      	add	r0, sp, #12
 800526e:	bf14      	ite	ne
 8005270:	2101      	movne	r1, #1
 8005272:	2100      	moveq	r1, #0
 8005274:	f7ff f8f8 	bl	8004468 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005278:	f018 0f1c 	tst.w	r8, #28
 800527c:	d06c      	beq.n	8005358 <f_open+0x12c>
			if (res != FR_OK) {					/* No file, create new */
 800527e:	2800      	cmp	r0, #0
 8005280:	d060      	beq.n	8005344 <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005282:	2804      	cmp	r0, #4
 8005284:	d155      	bne.n	8005332 <f_open+0x106>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005286:	4b67      	ldr	r3, [pc, #412]	@ (8005424 <f_open+0x1f8>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	b11a      	cbz	r2, 8005294 <f_open+0x68>
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 80c1 	bne.w	8005416 <f_open+0x1ea>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005294:	a803      	add	r0, sp, #12
 8005296:	f7ff ff6c 	bl	8005172 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800529a:	2800      	cmp	r0, #0
 800529c:	d149      	bne.n	8005332 <f_open+0x106>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800529e:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80052a2:	0730      	lsls	r0, r6, #28
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80052a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80052a8:	d533      	bpl.n	8005312 <f_open+0xe6>
				dw = GET_FATTIME();
 80052aa:	f7ff f8cb 	bl	8004444 <get_fattime>
 80052ae:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80052b0:	4601      	mov	r1, r0
 80052b2:	f108 000e 	add.w	r0, r8, #14
 80052b6:	f7ff f8c9 	bl	800444c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80052ba:	4611      	mov	r1, r2
 80052bc:	f108 0016 	add.w	r0, r8, #22
 80052c0:	f7ff f8c4 	bl	800444c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80052c4:	2320      	movs	r3, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80052c6:	4641      	mov	r1, r8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80052c8:	f888 300b 	strb.w	r3, [r8, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80052cc:	7828      	ldrb	r0, [r5, #0]
 80052ce:	f7ff fccc 	bl	8004c6a <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80052d2:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80052d4:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80052d6:	4628      	mov	r0, r5
 80052d8:	f7ff fa4a 	bl	8004770 <st_clust>
	*ptr++ = (BYTE)val; val >>= 8;
 80052dc:	2200      	movs	r2, #0
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
 80052de:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80052e0:	770a      	strb	r2, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80052e2:	774a      	strb	r2, [r1, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80052e4:	778a      	strb	r2, [r1, #30]
	*ptr++ = (BYTE)val;
 80052e6:	77ca      	strb	r2, [r1, #31]
					fs->wflag = 1;
 80052e8:	70eb      	strb	r3, [r5, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80052ea:	f1b8 0f00 	cmp.w	r8, #0
 80052ee:	d00e      	beq.n	800530e <f_open+0xe2>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80052f0:	4641      	mov	r1, r8
 80052f2:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 80052f4:	f8d5 902c 	ldr.w	r9, [r5, #44]	@ 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80052f8:	f7ff fd4d 	bl	8004d96 <remove_chain>
						if (res == FR_OK) {
 80052fc:	b9c8      	cbnz	r0, 8005332 <f_open+0x106>
							res = move_window(fs, dw);
 80052fe:	4649      	mov	r1, r9
 8005300:	4628      	mov	r0, r5
 8005302:	f7ff fa41 	bl	8004788 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005306:	f108 33ff 	add.w	r3, r8, #4294967295
 800530a:	60eb      	str	r3, [r5, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 800530c:	b988      	cbnz	r0, 8005332 <f_open+0x106>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA_MODIFIED;
 800530e:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005312:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
			fp->dir_ptr = dj.dir;
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005314:	2e01      	cmp	r6, #1
			fp->dir_ptr = dj.dir;
 8005316:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800531a:	a803      	add	r0, sp, #12
 800531c:	bf94      	ite	ls
 800531e:	2100      	movls	r1, #0
 8005320:	2101      	movhi	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005322:	6263      	str	r3, [r4, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005324:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005328:	f7ff f8d8 	bl	80044dc <inc_lock>
 800532c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800532e:	bb00      	cbnz	r0, 8005372 <f_open+0x146>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
 8005330:	2002      	movs	r0, #2
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005332:	2300      	movs	r3, #0
 8005334:	4607      	mov	r7, r0
 8005336:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8005338:	4638      	mov	r0, r7
 800533a:	b011      	add	sp, #68	@ 0x44
 800533c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 8005340:	2006      	movs	r0, #6
 8005342:	e799      	b.n	8005278 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005344:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005348:	f013 0f11 	tst.w	r3, #17
 800534c:	d10f      	bne.n	800536e <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800534e:	f018 0f04 	tst.w	r8, #4
 8005352:	d0a6      	beq.n	80052a2 <f_open+0x76>
 8005354:	2008      	movs	r0, #8
 8005356:	e7ec      	b.n	8005332 <f_open+0x106>
			if (res == FR_OK) {					/* Following succeeded */
 8005358:	2800      	cmp	r0, #0
 800535a:	d1ea      	bne.n	8005332 <f_open+0x106>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800535c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005360:	06da      	lsls	r2, r3, #27
 8005362:	d45a      	bmi.n	800541a <f_open+0x1ee>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005364:	f018 0f02 	tst.w	r8, #2
 8005368:	d0d3      	beq.n	8005312 <f_open+0xe6>
 800536a:	07d8      	lsls	r0, r3, #31
 800536c:	d5d1      	bpl.n	8005312 <f_open+0xe6>
						res = FR_DENIED;
 800536e:	2007      	movs	r0, #7
 8005370:	e7df      	b.n	8005332 <f_open+0x106>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005372:	7828      	ldrb	r0, [r5, #0]
 8005374:	4641      	mov	r1, r8
 8005376:	f7ff fc78 	bl	8004c6a <ld_clust.isra.0>
 800537a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800537c:	f108 001c 	add.w	r0, r8, #28
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005380:	2100      	movs	r1, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005382:	f7ff f861 	bl	8004448 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005386:	f104 0830 	add.w	r8, r4, #48	@ 0x30
			fp->obj.id = fs->id;
 800538a:	88eb      	ldrh	r3, [r5, #6]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800538c:	f44f 7200 	mov.w	r2, #512	@ 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005390:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005392:	4640      	mov	r0, r8
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005394:	62e1      	str	r1, [r4, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005396:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 8005398:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800539a:	7526      	strb	r6, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 800539c:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800539e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80053a0:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80053a2:	f7ff f85b 	bl	800445c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80053a6:	06b2      	lsls	r2, r6, #26
 80053a8:	d5c6      	bpl.n	8005338 <f_open+0x10c>
 80053aa:	68e6      	ldr	r6, [r4, #12]
 80053ac:	2e00      	cmp	r6, #0
 80053ae:	d0c3      	beq.n	8005338 <f_open+0x10c>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80053b0:	896b      	ldrh	r3, [r5, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80053b2:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053b4:	ebb6 2f43 	cmp.w	r6, r3, lsl #9
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80053b8:	61a6      	str	r6, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80053ba:	ea4f 2943 	mov.w	r9, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053be:	d910      	bls.n	80053e2 <f_open+0x1b6>
					clst = get_fat(&fp->obj, clst);
 80053c0:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053c2:	eba6 0609 	sub.w	r6, r6, r9
					clst = get_fat(&fp->obj, clst);
 80053c6:	f7ff fc58 	bl	8004c7a <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80053ca:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80053cc:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80053ce:	d91e      	bls.n	800540e <f_open+0x1e2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d01e      	beq.n	8005412 <f_open+0x1e6>
 80053d4:	454e      	cmp	r6, r9
 80053d6:	d8f3      	bhi.n	80053c0 <f_open+0x194>
 80053d8:	2000      	movs	r0, #0
				fp->clust = clst;
 80053da:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80053dc:	2800      	cmp	r0, #0
 80053de:	d1a8      	bne.n	8005332 <f_open+0x106>
 80053e0:	e000      	b.n	80053e4 <f_open+0x1b8>
				fp->clust = clst;
 80053e2:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80053e4:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0a5      	beq.n	8005338 <f_open+0x10c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff f8e3 	bl	80045b8 <clust2sect>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d09c      	beq.n	8005330 <f_open+0x104>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80053f6:	eb00 2256 	add.w	r2, r0, r6, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	4641      	mov	r1, r8
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80053fe:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005400:	7868      	ldrb	r0, [r5, #1]
 8005402:	f7fe fff5 	bl	80043f0 <disk_read>
 8005406:	2800      	cmp	r0, #0
 8005408:	d096      	beq.n	8005338 <f_open+0x10c>
 800540a:	2001      	movs	r0, #1
 800540c:	e791      	b.n	8005332 <f_open+0x106>
					if (clst <= 1) res = FR_INT_ERR;
 800540e:	2002      	movs	r0, #2
 8005410:	e7e3      	b.n	80053da <f_open+0x1ae>
 8005412:	2001      	movs	r0, #1
 8005414:	e7e1      	b.n	80053da <f_open+0x1ae>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005416:	2012      	movs	r0, #18
 8005418:	e78b      	b.n	8005332 <f_open+0x106>
					res = FR_NO_FILE;
 800541a:	2004      	movs	r0, #4
 800541c:	e789      	b.n	8005332 <f_open+0x106>
	if (!fp) return FR_INVALID_OBJECT;
 800541e:	2709      	movs	r7, #9
 8005420:	e78a      	b.n	8005338 <f_open+0x10c>
 8005422:	bf00      	nop
 8005424:	20000ecc 	.word	0x20000ecc

08005428 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	469b      	mov	fp, r3
 800542e:	b087      	sub	sp, #28
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005430:	2300      	movs	r3, #0
{
 8005432:	4689      	mov	r9, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005434:	a905      	add	r1, sp, #20
{
 8005436:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 8005438:	f8cb 3000 	str.w	r3, [fp]
{
 800543c:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800543e:	f7ff f94f 	bl	80046e0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005442:	4605      	mov	r5, r0
 8005444:	bb28      	cbnz	r0, 8005492 <f_read+0x6a>
 8005446:	7d65      	ldrb	r5, [r4, #21]
 8005448:	bb1d      	cbnz	r5, 8005492 <f_read+0x6a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800544a:	7d23      	ldrb	r3, [r4, #20]
 800544c:	f013 0301 	ands.w	r3, r3, #1
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	f000 809d 	beq.w	8005590 <f_read+0x168>
	remain = fp->obj.objsize - fp->fptr;
 8005456:	69a3      	ldr	r3, [r4, #24]
 8005458:	68e6      	ldr	r6, [r4, #12]
 800545a:	1af6      	subs	r6, r6, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800545c:	f104 0330 	add.w	r3, r4, #48	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005460:	42be      	cmp	r6, r7
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005462:	9302      	str	r3, [sp, #8]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005464:	bf28      	it	cs
 8005466:	463e      	movcs	r6, r7
	for ( ;  btr;								/* Repeat until all data read */
 8005468:	b19e      	cbz	r6, 8005492 <f_read+0x6a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800546a:	69a1      	ldr	r1, [r4, #24]
 800546c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005470:	2b00      	cmp	r3, #0
 8005472:	d17e      	bne.n	8005572 <f_read+0x14a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005474:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005478:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 800547c:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8005480:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 8005484:	d11b      	bne.n	80054be <f_read+0x96>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005486:	b941      	cbnz	r1, 800549a <f_read+0x72>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005488:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800548a:	2801      	cmp	r0, #1
 800548c:	d810      	bhi.n	80054b0 <f_read+0x88>
 800548e:	2502      	movs	r5, #2
 8005490:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8005492:	4628      	mov	r0, r5
 8005494:	b007      	add	sp, #28
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800549a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800549c:	b11b      	cbz	r3, 80054a6 <f_read+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff f895 	bl	80045ce <clmt_clust>
 80054a4:	e7f1      	b.n	800548a <f_read+0x62>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80054a6:	69e1      	ldr	r1, [r4, #28]
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	f7ff fbe6 	bl	8004c7a <get_fat.isra.0>
 80054ae:	e7ec      	b.n	800548a <f_read+0x62>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d103      	bne.n	80054bc <f_read+0x94>
 80054b4:	2301      	movs	r3, #1
 80054b6:	9d01      	ldr	r5, [sp, #4]
 80054b8:	7563      	strb	r3, [r4, #21]
 80054ba:	e7ea      	b.n	8005492 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 80054bc:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80054be:	69e1      	ldr	r1, [r4, #28]
 80054c0:	4650      	mov	r0, sl
 80054c2:	f7ff f879 	bl	80045b8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0e1      	beq.n	800548e <f_read+0x66>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80054ca:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 80054ce:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80054d2:	d32f      	bcc.n	8005534 <f_read+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054d4:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80054d8:	eb08 2156 	add.w	r1, r8, r6, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80054dc:	0a73      	lsrs	r3, r6, #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054de:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054e2:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054e4:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 80054e6:	bf88      	it	hi
 80054e8:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054ec:	463a      	mov	r2, r7
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	f7fe ff7e 	bl	80043f0 <disk_read>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1dd      	bne.n	80054b4 <f_read+0x8c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80054f8:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	2a00      	cmp	r2, #0
 8005500:	da0c      	bge.n	800551c <f_read+0xf4>
 8005502:	6a20      	ldr	r0, [r4, #32]
 8005504:	1bc0      	subs	r0, r0, r7
 8005506:	4298      	cmp	r0, r3
 8005508:	d208      	bcs.n	800551c <f_read+0xf4>
	if (cnt) {
 800550a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800550e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8005512:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005516:	f7ff f922 	bl	800475e <mem_cpy.part.0>
 800551a:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800551c:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800551e:	69a3      	ldr	r3, [r4, #24]
 8005520:	44b9      	add	r9, r7
 8005522:	1bf6      	subs	r6, r6, r7
 8005524:	443b      	add	r3, r7
 8005526:	61a3      	str	r3, [r4, #24]
 8005528:	f8db 3000 	ldr.w	r3, [fp]
 800552c:	443b      	add	r3, r7
 800552e:	f8cb 3000 	str.w	r3, [fp]
 8005532:	e799      	b.n	8005468 <f_read+0x40>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005534:	6a22      	ldr	r2, [r4, #32]
 8005536:	42ba      	cmp	r2, r7
 8005538:	d01a      	beq.n	8005570 <f_read+0x148>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800553a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800553e:	f104 0830 	add.w	r8, r4, #48	@ 0x30
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005542:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005546:	2b00      	cmp	r3, #0
 8005548:	da09      	bge.n	800555e <f_read+0x136>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800554a:	2301      	movs	r3, #1
 800554c:	4641      	mov	r1, r8
 800554e:	f7fe ff5d 	bl	800440c <disk_write>
 8005552:	2800      	cmp	r0, #0
 8005554:	d1ae      	bne.n	80054b4 <f_read+0x8c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005556:	7d23      	ldrb	r3, [r4, #20]
 8005558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555c:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800555e:	2301      	movs	r3, #1
 8005560:	463a      	mov	r2, r7
 8005562:	4641      	mov	r1, r8
 8005564:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8005568:	f7fe ff42 	bl	80043f0 <disk_read>
 800556c:	2800      	cmp	r0, #0
 800556e:	d1a1      	bne.n	80054b4 <f_read+0x8c>
			fp->sect = sect;
 8005570:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005572:	69a1      	ldr	r1, [r4, #24]
 8005574:	4648      	mov	r0, r9
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800557c:	f5c1 7700 	rsb	r7, r1, #512	@ 0x200
 8005580:	4419      	add	r1, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005582:	42b7      	cmp	r7, r6
 8005584:	bf28      	it	cs
 8005586:	4637      	movcs	r7, r6
	if (cnt) {
 8005588:	463a      	mov	r2, r7
 800558a:	f7ff f8e8 	bl	800475e <mem_cpy.part.0>
 800558e:	e7c6      	b.n	800551e <f_read+0xf6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005590:	2507      	movs	r5, #7
 8005592:	e77e      	b.n	8005492 <f_read+0x6a>

08005594 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005598:	a901      	add	r1, sp, #4
{
 800559a:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800559c:	f7ff f8a0 	bl	80046e0 <validate>
	if (res == FR_OK) {
 80055a0:	4604      	mov	r4, r0
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d13b      	bne.n	800561e <f_sync+0x8a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80055a6:	7d2b      	ldrb	r3, [r5, #20]
 80055a8:	f013 0440 	ands.w	r4, r3, #64	@ 0x40
 80055ac:	d037      	beq.n	800561e <f_sync+0x8a>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80055ae:	061b      	lsls	r3, r3, #24
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80055b0:	9f01      	ldr	r7, [sp, #4]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80055b2:	d50b      	bpl.n	80055cc <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80055b4:	2301      	movs	r3, #1
 80055b6:	6a2a      	ldr	r2, [r5, #32]
 80055b8:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 80055bc:	7878      	ldrb	r0, [r7, #1]
 80055be:	f7fe ff25 	bl	800440c <disk_write>
 80055c2:	bb80      	cbnz	r0, 8005626 <f_sync+0x92>
				fp->flag &= (BYTE)~FA_DIRTY;
 80055c4:	7d2b      	ldrb	r3, [r5, #20]
 80055c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ca:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80055cc:	f7fe ff3a 	bl	8004444 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80055d0:	6a69      	ldr	r1, [r5, #36]	@ 0x24
			tm = GET_FATTIME();				/* Modified time */
 80055d2:	4680      	mov	r8, r0
				res = move_window(fs, fp->dir_sect);
 80055d4:	4638      	mov	r0, r7
 80055d6:	f7ff f8d7 	bl	8004788 <move_window>
				if (res == FR_OK) {
 80055da:	4604      	mov	r4, r0
 80055dc:	b9f8      	cbnz	r0, 800561e <f_sync+0x8a>
					dir = fp->dir_ptr;
 80055de:	6aae      	ldr	r6, [r5, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80055e0:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80055e2:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80055e4:	f043 0320 	orr.w	r3, r3, #32
 80055e8:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80055ea:	68aa      	ldr	r2, [r5, #8]
 80055ec:	6828      	ldr	r0, [r5, #0]
 80055ee:	f7ff f8bf 	bl	8004770 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80055f2:	68e9      	ldr	r1, [r5, #12]
 80055f4:	f106 001c 	add.w	r0, r6, #28
 80055f8:	f7fe ff28 	bl	800444c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80055fc:	4641      	mov	r1, r8
 80055fe:	f106 0016 	add.w	r0, r6, #22
 8005602:	f7fe ff23 	bl	800444c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8005606:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005608:	74b4      	strb	r4, [r6, #18]
					res = sync_fs(fs);					/* Restore it to the directory */
 800560a:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val;
 800560c:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 800560e:	70fb      	strb	r3, [r7, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005610:	f7ff fab6 	bl	8004b80 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005614:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005616:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800561c:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800561e:	4620      	mov	r0, r4
 8005620:	b002      	add	sp, #8
 8005622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005626:	2401      	movs	r4, #1
 8005628:	e7f9      	b.n	800561e <f_sync+0x8a>

0800562a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800562a:	b513      	push	{r0, r1, r4, lr}
 800562c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800562e:	f7ff ffb1 	bl	8005594 <f_sync>
	if (res == FR_OK)
 8005632:	b948      	cbnz	r0, 8005648 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005634:	a901      	add	r1, sp, #4
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff f852 	bl	80046e0 <validate>
		if (res == FR_OK) {
 800563c:	b920      	cbnz	r0, 8005648 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800563e:	6920      	ldr	r0, [r4, #16]
 8005640:	f7fe ff8e 	bl	8004560 <dec_lock>
			if (res == FR_OK)
 8005644:	b900      	cbnz	r0, 8005648 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005646:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8005648:	b002      	add	sp, #8
 800564a:	bd10      	pop	{r4, pc}

0800564c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800564c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800564e:	4605      	mov	r5, r0
{
 8005650:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8005652:	2800      	cmp	r0, #0
 8005654:	d037      	beq.n	80056c6 <f_opendir+0x7a>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	a903      	add	r1, sp, #12
 800565a:	a801      	add	r0, sp, #4
 800565c:	f7ff f8ea 	bl	8004834 <find_volume>
	if (res == FR_OK) {
 8005660:	4604      	mov	r4, r0
 8005662:	b978      	cbnz	r0, 8005684 <f_opendir+0x38>
		obj->fs = fs;
 8005664:	9e03      	ldr	r6, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005666:	4628      	mov	r0, r5
 8005668:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800566a:	602e      	str	r6, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800566c:	f7ff fc98 	bl	8004fa0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8005670:	4604      	mov	r4, r0
 8005672:	bb18      	cbnz	r0, 80056bc <f_opendir+0x70>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005674:	f995 302f 	ldrsb.w	r3, [r5, #47]	@ 0x2f
 8005678:	2b00      	cmp	r3, #0
 800567a:	db0b      	blt.n	8005694 <f_opendir+0x48>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800567c:	79ab      	ldrb	r3, [r5, #6]
 800567e:	06db      	lsls	r3, r3, #27
 8005680:	d403      	bmi.n	800568a <f_opendir+0x3e>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005682:	2405      	movs	r4, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8005684:	2300      	movs	r3, #0
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	e013      	b.n	80056b2 <f_opendir+0x66>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800568a:	7830      	ldrb	r0, [r6, #0]
 800568c:	6a29      	ldr	r1, [r5, #32]
 800568e:	f7ff faec 	bl	8004c6a <ld_clust.isra.0>
 8005692:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 8005694:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005696:	4628      	mov	r0, r5
				obj->id = fs->id;
 8005698:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800569a:	f7ff fb44 	bl	8004d26 <dir_sdi.constprop.0>
				if (res == FR_OK) {
 800569e:	4604      	mov	r4, r0
 80056a0:	b960      	cbnz	r0, 80056bc <f_opendir+0x70>
					if (obj->sclust) {
 80056a2:	68ab      	ldr	r3, [r5, #8]
 80056a4:	b143      	cbz	r3, 80056b8 <f_opendir+0x6c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80056a6:	4601      	mov	r1, r0
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7fe ff17 	bl	80044dc <inc_lock>
 80056ae:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80056b0:	b138      	cbz	r0, 80056c2 <f_opendir+0x76>

	LEAVE_FF(fs, res);
}
 80056b2:	4620      	mov	r0, r4
 80056b4:	b004      	add	sp, #16
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 80056b8:	6128      	str	r0, [r5, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80056ba:	e7fa      	b.n	80056b2 <f_opendir+0x66>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80056bc:	2c04      	cmp	r4, #4
 80056be:	d0e0      	beq.n	8005682 <f_opendir+0x36>
 80056c0:	e7e0      	b.n	8005684 <f_opendir+0x38>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80056c2:	2412      	movs	r4, #18
 80056c4:	e7de      	b.n	8005684 <f_opendir+0x38>
	if (!dp) return FR_INVALID_OBJECT;
 80056c6:	2409      	movs	r4, #9
 80056c8:	e7f3      	b.n	80056b2 <f_opendir+0x66>

080056ca <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80056ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80056cc:	a901      	add	r1, sp, #4
{
 80056ce:	4605      	mov	r5, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80056d0:	f7ff f806 	bl	80046e0 <validate>
	if (res == FR_OK) {
 80056d4:	4604      	mov	r4, r0
 80056d6:	b918      	cbnz	r0, 80056e0 <f_closedir+0x16>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80056d8:	6928      	ldr	r0, [r5, #16]
 80056da:	b920      	cbnz	r0, 80056e6 <f_closedir+0x1c>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80056dc:	2300      	movs	r3, #0
 80056de:	602b      	str	r3, [r5, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 80056e0:	4620      	mov	r0, r4
 80056e2:	b003      	add	sp, #12
 80056e4:	bd30      	pop	{r4, r5, pc}
			res = dec_lock(dp->obj.lockid);
 80056e6:	f7fe ff3b 	bl	8004560 <dec_lock>
		if (res == FR_OK)
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d0f6      	beq.n	80056dc <f_closedir+0x12>
 80056ee:	4604      	mov	r4, r0
 80056f0:	e7f6      	b.n	80056e0 <f_closedir+0x16>

080056f2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80056f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056f4:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80056f6:	a901      	add	r1, sp, #4
{
 80056f8:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80056fa:	f7fe fff1 	bl	80046e0 <validate>
	if (res == FR_OK) {
 80056fe:	b9c8      	cbnz	r0, 8005734 <f_readdir+0x42>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005700:	4620      	mov	r0, r4
		if (!fno) {
 8005702:	b925      	cbnz	r5, 800570e <f_readdir+0x1c>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8005704:	b003      	add	sp, #12
 8005706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800570a:	f7ff bb0c 	b.w	8004d26 <dir_sdi.constprop.0>
			res = dir_read(dp, 0);			/* Read an item */
 800570e:	f7ff fd07 	bl	8005120 <dir_read.constprop.0>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005712:	f010 03fb 	ands.w	r3, r0, #251	@ 0xfb
 8005716:	d10d      	bne.n	8005734 <f_readdir+0x42>
	fno->fname[0] = 0;		/* Invaidate file info */
 8005718:	726b      	strb	r3, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800571a:	69e3      	ldr	r3, [r4, #28]
 800571c:	b11b      	cbz	r3, 8005726 <f_readdir+0x34>
 800571e:	4629      	mov	r1, r5
 8005720:	6a20      	ldr	r0, [r4, #32]
 8005722:	f7ff fa78 	bl	8004c16 <get_fileinfo.part.0.constprop.0.isra.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005726:	2100      	movs	r1, #0
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff fbc3 	bl	8004eb4 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800572e:	2804      	cmp	r0, #4
 8005730:	bf08      	it	eq
 8005732:	2000      	moveq	r0, #0
}
 8005734:	b003      	add	sp, #12
 8005736:	bd30      	pop	{r4, r5, pc}

08005738 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	4606      	mov	r6, r0
 800573c:	460d      	mov	r5, r1


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800573e:	f101 0709 	add.w	r7, r1, #9
		res = f_readdir(dp, fno);		/* Get a directory item */
 8005742:	4629      	mov	r1, r5
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffd4 	bl	80056f2 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800574a:	4604      	mov	r4, r0
 800574c:	b950      	cbnz	r0, 8005764 <f_findnext+0x2c>
 800574e:	b14d      	cbz	r5, 8005764 <f_findnext+0x2c>
 8005750:	7a6b      	ldrb	r3, [r5, #9]
 8005752:	b13b      	cbz	r3, 8005764 <f_findnext+0x2c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8005754:	4603      	mov	r3, r0
 8005756:	4602      	mov	r2, r0
 8005758:	4639      	mov	r1, r7
 800575a:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800575c:	f7fe ff5c 	bl	8004618 <pattern_matching>
 8005760:	2800      	cmp	r0, #0
 8005762:	d0ee      	beq.n	8005742 <f_findnext+0xa>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8005764:	4620      	mov	r0, r4
 8005766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005768 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800576c:	6303      	str	r3, [r0, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800576e:	4611      	mov	r1, r2
{
 8005770:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 8005772:	f7ff ff6b 	bl	800564c <f_opendir>
	if (res == FR_OK) {
 8005776:	b928      	cbnz	r0, 8005784 <f_findfirst+0x1c>
		res = f_findnext(dp, fno);	/* Find the first item */
 8005778:	4629      	mov	r1, r5
 800577a:	4620      	mov	r0, r4
	}
	return res;
}
 800577c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 8005780:	f7ff bfda 	b.w	8005738 <f_findnext>
}
 8005784:	bd38      	pop	{r3, r4, r5, pc}
	...

08005788 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <FATFS_LinkDriverEx+0x40>)
{
 800578a:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800578c:	7b9c      	ldrb	r4, [r3, #14]
 800578e:	2c01      	cmp	r4, #1
 8005790:	d817      	bhi.n	80057c2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005792:	7b9d      	ldrb	r5, [r3, #14]
 8005794:	2400      	movs	r4, #0
 8005796:	b2ed      	uxtb	r5, r5
 8005798:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800579a:	7b9d      	ldrb	r5, [r3, #14]
 800579c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80057a0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80057a2:	7b98      	ldrb	r0, [r3, #14]
 80057a4:	4418      	add	r0, r3
 80057a6:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 80057a8:	7b9a      	ldrb	r2, [r3, #14]
 80057aa:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80057ac:	3230      	adds	r2, #48	@ 0x30
    DiskNum = disk.nbr++;
 80057ae:	b2c0      	uxtb	r0, r0
 80057b0:	7398      	strb	r0, [r3, #14]
    path[1] = ':';
 80057b2:	233a      	movs	r3, #58	@ 0x3a
    path[2] = '/';
    path[3] = 0;
 80057b4:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 80057b6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80057b8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80057ba:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 80057bc:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 80057be:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 80057c0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80057c2:	2001      	movs	r0, #1
 80057c4:	e7fc      	b.n	80057c0 <FATFS_LinkDriverEx+0x38>
 80057c6:	bf00      	nop
 80057c8:	20000ef8 	.word	0x20000ef8

080057cc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80057cc:	2200      	movs	r2, #0
 80057ce:	f7ff bfdb 	b.w	8005788 <FATFS_LinkDriverEx>
	...

080057d4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057d4:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <SD_ioctl+0x4c>)
{
 80057d6:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057d8:	781c      	ldrb	r4, [r3, #0]
{
 80057da:	b089      	sub	sp, #36	@ 0x24
 80057dc:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057de:	f014 0401 	ands.w	r4, r4, #1
 80057e2:	d119      	bne.n	8005818 <SD_ioctl+0x44>

  switch (cmd)
 80057e4:	2903      	cmp	r1, #3
 80057e6:	d819      	bhi.n	800581c <SD_ioctl+0x48>
 80057e8:	e8df f001 	tbb	[pc, r1]
 80057ec:	1008020d 	.word	0x1008020d
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80057f0:	4668      	mov	r0, sp
 80057f2:	f7fb ff17 	bl	8001624 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80057f6:	9b06      	ldr	r3, [sp, #24]
    break;

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057f8:	602b      	str	r3, [r5, #0]
	res = RES_OK;
    break;
 80057fa:	e004      	b.n	8005806 <SD_ioctl+0x32>
    BSP_SD_GetCardInfo(&CardInfo);
 80057fc:	4668      	mov	r0, sp
 80057fe:	f7fb ff11 	bl	8001624 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005802:	9b07      	ldr	r3, [sp, #28]
 8005804:	802b      	strh	r3, [r5, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8005806:	4620      	mov	r0, r4
 8005808:	b009      	add	sp, #36	@ 0x24
 800580a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800580c:	4668      	mov	r0, sp
 800580e:	f7fb ff09 	bl	8001624 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005812:	9b07      	ldr	r3, [sp, #28]
 8005814:	0a5b      	lsrs	r3, r3, #9
 8005816:	e7ef      	b.n	80057f8 <SD_ioctl+0x24>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005818:	2403      	movs	r4, #3
 800581a:	e7f4      	b.n	8005806 <SD_ioctl+0x32>
    res = RES_PARERR;
 800581c:	2404      	movs	r4, #4
 800581e:	e7f2      	b.n	8005806 <SD_ioctl+0x32>
 8005820:	20000050 	.word	0x20000050

08005824 <SD_read>:
{
 8005824:	b508      	push	{r3, lr}
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	f7fb fdc4 	bl	80013bc <BSP_SD_ReadBlocks>
 8005834:	b920      	cbnz	r0, 8005840 <SD_read+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005836:	f7fb feeb 	bl	8001610 <BSP_SD_GetCardState>
 800583a:	2800      	cmp	r0, #0
 800583c:	d1fb      	bne.n	8005836 <SD_read+0x12>
}
 800583e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005840:	2001      	movs	r0, #1
 8005842:	e7fc      	b.n	800583e <SD_read+0x1a>

08005844 <SD_status>:
{
 8005844:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8005846:	2301      	movs	r3, #1
 8005848:	4c05      	ldr	r4, [pc, #20]	@ (8005860 <SD_status+0x1c>)
 800584a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800584c:	f7fb fee0 	bl	8001610 <BSP_SD_GetCardState>
 8005850:	b918      	cbnz	r0, 800585a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8005852:	7823      	ldrb	r3, [r4, #0]
 8005854:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005858:	7023      	strb	r3, [r4, #0]
  return Stat;
 800585a:	7820      	ldrb	r0, [r4, #0]
}
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	20000050 	.word	0x20000050

08005864 <SD_write>:
{
 8005864:	b508      	push	{r3, lr}
 8005866:	4608      	mov	r0, r1
 8005868:	4611      	mov	r1, r2
 800586a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800586c:	f04f 33ff 	mov.w	r3, #4294967295
 8005870:	f7fb fdb4 	bl	80013dc <BSP_SD_WriteBlocks>
 8005874:	b920      	cbnz	r0, 8005880 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005876:	f7fb fecb 	bl	8001610 <BSP_SD_GetCardState>
 800587a:	2800      	cmp	r0, #0
 800587c:	d1fb      	bne.n	8005876 <SD_write+0x12>
}
 800587e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005880:	2001      	movs	r0, #1
 8005882:	e7fc      	b.n	800587e <SD_write+0x1a>

08005884 <SD_initialize>:
{
 8005884:	b538      	push	{r3, r4, r5, lr}
  Stat = STA_NOINIT;
 8005886:	4c09      	ldr	r4, [pc, #36]	@ (80058ac <SD_initialize+0x28>)
 8005888:	2501      	movs	r5, #1
 800588a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 800588c:	f7fb fe94 	bl	80015b8 <BSP_SD_Init>
 8005890:	b950      	cbnz	r0, 80058a8 <SD_initialize+0x24>
  Stat = STA_NOINIT;
 8005892:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8005894:	f7fb febc 	bl	8001610 <BSP_SD_GetCardState>
 8005898:	b918      	cbnz	r0, 80058a2 <SD_initialize+0x1e>
    Stat &= ~STA_NOINIT;
 800589a:	7823      	ldrb	r3, [r4, #0]
 800589c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80058a0:	7023      	strb	r3, [r4, #0]
  return Stat;
 80058a2:	7823      	ldrb	r3, [r4, #0]
 80058a4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80058a6:	7023      	strb	r3, [r4, #0]
  return Stat;
 80058a8:	7820      	ldrb	r0, [r4, #0]
}
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	20000050 	.word	0x20000050

080058b0 <malloc>:
 80058b0:	4b02      	ldr	r3, [pc, #8]	@ (80058bc <malloc+0xc>)
 80058b2:	4601      	mov	r1, r0
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	f000 b82d 	b.w	8005914 <_malloc_r>
 80058ba:	bf00      	nop
 80058bc:	20000054 	.word	0x20000054

080058c0 <free>:
 80058c0:	4b02      	ldr	r3, [pc, #8]	@ (80058cc <free+0xc>)
 80058c2:	4601      	mov	r1, r0
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f000 b917 	b.w	8005af8 <_free_r>
 80058ca:	bf00      	nop
 80058cc:	20000054 	.word	0x20000054

080058d0 <sbrk_aligned>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005910 <sbrk_aligned+0x40>)
 80058d4:	460c      	mov	r4, r1
 80058d6:	6831      	ldr	r1, [r6, #0]
 80058d8:	4605      	mov	r5, r0
 80058da:	b911      	cbnz	r1, 80058e2 <sbrk_aligned+0x12>
 80058dc:	f000 f8c8 	bl	8005a70 <_sbrk_r>
 80058e0:	6030      	str	r0, [r6, #0]
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f8c3 	bl	8005a70 <_sbrk_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d103      	bne.n	80058f6 <sbrk_aligned+0x26>
 80058ee:	f04f 34ff 	mov.w	r4, #4294967295
 80058f2:	4620      	mov	r0, r4
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	f024 0403 	bic.w	r4, r4, #3
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d0f8      	beq.n	80058f2 <sbrk_aligned+0x22>
 8005900:	1a21      	subs	r1, r4, r0
 8005902:	4628      	mov	r0, r5
 8005904:	f000 f8b4 	bl	8005a70 <_sbrk_r>
 8005908:	3001      	adds	r0, #1
 800590a:	d1f2      	bne.n	80058f2 <sbrk_aligned+0x22>
 800590c:	e7ef      	b.n	80058ee <sbrk_aligned+0x1e>
 800590e:	bf00      	nop
 8005910:	20000f08 	.word	0x20000f08

08005914 <_malloc_r>:
 8005914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005918:	1ccd      	adds	r5, r1, #3
 800591a:	f025 0503 	bic.w	r5, r5, #3
 800591e:	3508      	adds	r5, #8
 8005920:	2d0c      	cmp	r5, #12
 8005922:	bf38      	it	cc
 8005924:	250c      	movcc	r5, #12
 8005926:	2d00      	cmp	r5, #0
 8005928:	4606      	mov	r6, r0
 800592a:	db01      	blt.n	8005930 <_malloc_r+0x1c>
 800592c:	42a9      	cmp	r1, r5
 800592e:	d904      	bls.n	800593a <_malloc_r+0x26>
 8005930:	230c      	movs	r3, #12
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	2000      	movs	r0, #0
 8005936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a10 <_malloc_r+0xfc>
 800593e:	f000 f869 	bl	8005a14 <__malloc_lock>
 8005942:	f8d8 3000 	ldr.w	r3, [r8]
 8005946:	461c      	mov	r4, r3
 8005948:	bb44      	cbnz	r4, 800599c <_malloc_r+0x88>
 800594a:	4629      	mov	r1, r5
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ffbf 	bl	80058d0 <sbrk_aligned>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	4604      	mov	r4, r0
 8005956:	d158      	bne.n	8005a0a <_malloc_r+0xf6>
 8005958:	f8d8 4000 	ldr.w	r4, [r8]
 800595c:	4627      	mov	r7, r4
 800595e:	2f00      	cmp	r7, #0
 8005960:	d143      	bne.n	80059ea <_malloc_r+0xd6>
 8005962:	2c00      	cmp	r4, #0
 8005964:	d04b      	beq.n	80059fe <_malloc_r+0xea>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	4639      	mov	r1, r7
 800596a:	4630      	mov	r0, r6
 800596c:	eb04 0903 	add.w	r9, r4, r3
 8005970:	f000 f87e 	bl	8005a70 <_sbrk_r>
 8005974:	4581      	cmp	r9, r0
 8005976:	d142      	bne.n	80059fe <_malloc_r+0xea>
 8005978:	6821      	ldr	r1, [r4, #0]
 800597a:	1a6d      	subs	r5, r5, r1
 800597c:	4629      	mov	r1, r5
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ffa6 	bl	80058d0 <sbrk_aligned>
 8005984:	3001      	adds	r0, #1
 8005986:	d03a      	beq.n	80059fe <_malloc_r+0xea>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	442b      	add	r3, r5
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	f8d8 3000 	ldr.w	r3, [r8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	bb62      	cbnz	r2, 80059f0 <_malloc_r+0xdc>
 8005996:	f8c8 7000 	str.w	r7, [r8]
 800599a:	e00f      	b.n	80059bc <_malloc_r+0xa8>
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	1b52      	subs	r2, r2, r5
 80059a0:	d420      	bmi.n	80059e4 <_malloc_r+0xd0>
 80059a2:	2a0b      	cmp	r2, #11
 80059a4:	d917      	bls.n	80059d6 <_malloc_r+0xc2>
 80059a6:	1961      	adds	r1, r4, r5
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	6025      	str	r5, [r4, #0]
 80059ac:	bf18      	it	ne
 80059ae:	6059      	strne	r1, [r3, #4]
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	bf08      	it	eq
 80059b4:	f8c8 1000 	streq.w	r1, [r8]
 80059b8:	5162      	str	r2, [r4, r5]
 80059ba:	604b      	str	r3, [r1, #4]
 80059bc:	4630      	mov	r0, r6
 80059be:	f000 f82f 	bl	8005a20 <__malloc_unlock>
 80059c2:	f104 000b 	add.w	r0, r4, #11
 80059c6:	1d23      	adds	r3, r4, #4
 80059c8:	f020 0007 	bic.w	r0, r0, #7
 80059cc:	1ac2      	subs	r2, r0, r3
 80059ce:	bf1c      	itt	ne
 80059d0:	1a1b      	subne	r3, r3, r0
 80059d2:	50a3      	strne	r3, [r4, r2]
 80059d4:	e7af      	b.n	8005936 <_malloc_r+0x22>
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	bf0c      	ite	eq
 80059dc:	f8c8 2000 	streq.w	r2, [r8]
 80059e0:	605a      	strne	r2, [r3, #4]
 80059e2:	e7eb      	b.n	80059bc <_malloc_r+0xa8>
 80059e4:	4623      	mov	r3, r4
 80059e6:	6864      	ldr	r4, [r4, #4]
 80059e8:	e7ae      	b.n	8005948 <_malloc_r+0x34>
 80059ea:	463c      	mov	r4, r7
 80059ec:	687f      	ldr	r7, [r7, #4]
 80059ee:	e7b6      	b.n	800595e <_malloc_r+0x4a>
 80059f0:	461a      	mov	r2, r3
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d1fb      	bne.n	80059f0 <_malloc_r+0xdc>
 80059f8:	2300      	movs	r3, #0
 80059fa:	6053      	str	r3, [r2, #4]
 80059fc:	e7de      	b.n	80059bc <_malloc_r+0xa8>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f80c 	bl	8005a20 <__malloc_unlock>
 8005a08:	e794      	b.n	8005934 <_malloc_r+0x20>
 8005a0a:	6005      	str	r5, [r0, #0]
 8005a0c:	e7d6      	b.n	80059bc <_malloc_r+0xa8>
 8005a0e:	bf00      	nop
 8005a10:	20000f0c 	.word	0x20000f0c

08005a14 <__malloc_lock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	@ (8005a1c <__malloc_lock+0x8>)
 8005a16:	f000 b865 	b.w	8005ae4 <__retarget_lock_acquire_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	2000104c 	.word	0x2000104c

08005a20 <__malloc_unlock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	@ (8005a28 <__malloc_unlock+0x8>)
 8005a22:	f000 b860 	b.w	8005ae6 <__retarget_lock_release_recursive>
 8005a26:	bf00      	nop
 8005a28:	2000104c 	.word	0x2000104c

08005a2c <siprintf>:
 8005a2c:	b40e      	push	{r1, r2, r3}
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	b09d      	sub	sp, #116	@ 0x74
 8005a32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a34:	9002      	str	r0, [sp, #8]
 8005a36:	9006      	str	r0, [sp, #24]
 8005a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a3c:	480a      	ldr	r0, [pc, #40]	@ (8005a68 <siprintf+0x3c>)
 8005a3e:	9107      	str	r1, [sp, #28]
 8005a40:	9104      	str	r1, [sp, #16]
 8005a42:	490a      	ldr	r1, [pc, #40]	@ (8005a6c <siprintf+0x40>)
 8005a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a48:	9105      	str	r1, [sp, #20]
 8005a4a:	2400      	movs	r4, #0
 8005a4c:	a902      	add	r1, sp, #8
 8005a4e:	6800      	ldr	r0, [r0, #0]
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a54:	f000 f8f6 	bl	8005c44 <_svfiprintf_r>
 8005a58:	9b02      	ldr	r3, [sp, #8]
 8005a5a:	701c      	strb	r4, [r3, #0]
 8005a5c:	b01d      	add	sp, #116	@ 0x74
 8005a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a62:	b003      	add	sp, #12
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	20000054 	.word	0x20000054
 8005a6c:	ffff0208 	.word	0xffff0208

08005a70 <_sbrk_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	@ (8005a8c <_sbrk_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fa fde0 	bl	8000640 <_sbrk>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_sbrk_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_sbrk_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20001048 	.word	0x20001048

08005a90 <__errno>:
 8005a90:	4b01      	ldr	r3, [pc, #4]	@ (8005a98 <__errno+0x8>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	20000054 	.word	0x20000054

08005a9c <__libc_init_array>:
 8005a9c:	b570      	push	{r4, r5, r6, lr}
 8005a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ad4 <__libc_init_array+0x38>)
 8005aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8005ad8 <__libc_init_array+0x3c>)
 8005aa2:	1b64      	subs	r4, r4, r5
 8005aa4:	10a4      	asrs	r4, r4, #2
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	d109      	bne.n	8005ac0 <__libc_init_array+0x24>
 8005aac:	4d0b      	ldr	r5, [pc, #44]	@ (8005adc <__libc_init_array+0x40>)
 8005aae:	4c0c      	ldr	r4, [pc, #48]	@ (8005ae0 <__libc_init_array+0x44>)
 8005ab0:	f000 fbae 	bl	8006210 <_init>
 8005ab4:	1b64      	subs	r4, r4, r5
 8005ab6:	10a4      	asrs	r4, r4, #2
 8005ab8:	2600      	movs	r6, #0
 8005aba:	42a6      	cmp	r6, r4
 8005abc:	d105      	bne.n	8005aca <__libc_init_array+0x2e>
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac4:	4798      	blx	r3
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7ee      	b.n	8005aa8 <__libc_init_array+0xc>
 8005aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ace:	4798      	blx	r3
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7f2      	b.n	8005aba <__libc_init_array+0x1e>
 8005ad4:	0800a110 	.word	0x0800a110
 8005ad8:	0800a110 	.word	0x0800a110
 8005adc:	0800a110 	.word	0x0800a110
 8005ae0:	0800a114 	.word	0x0800a114

08005ae4 <__retarget_lock_acquire_recursive>:
 8005ae4:	4770      	bx	lr

08005ae6 <__retarget_lock_release_recursive>:
 8005ae6:	4770      	bx	lr

08005ae8 <strcpy>:
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aee:	f803 2b01 	strb.w	r2, [r3], #1
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d1f9      	bne.n	8005aea <strcpy+0x2>
 8005af6:	4770      	bx	lr

08005af8 <_free_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4605      	mov	r5, r0
 8005afc:	2900      	cmp	r1, #0
 8005afe:	d041      	beq.n	8005b84 <_free_r+0x8c>
 8005b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b04:	1f0c      	subs	r4, r1, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfb8      	it	lt
 8005b0a:	18e4      	addlt	r4, r4, r3
 8005b0c:	f7ff ff82 	bl	8005a14 <__malloc_lock>
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <_free_r+0x90>)
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	b933      	cbnz	r3, 8005b24 <_free_r+0x2c>
 8005b16:	6063      	str	r3, [r4, #4]
 8005b18:	6014      	str	r4, [r2, #0]
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b20:	f7ff bf7e 	b.w	8005a20 <__malloc_unlock>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d908      	bls.n	8005b3a <_free_r+0x42>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	1821      	adds	r1, r4, r0
 8005b2c:	428b      	cmp	r3, r1
 8005b2e:	bf01      	itttt	eq
 8005b30:	6819      	ldreq	r1, [r3, #0]
 8005b32:	685b      	ldreq	r3, [r3, #4]
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	e7ed      	b.n	8005b16 <_free_r+0x1e>
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b10b      	cbz	r3, 8005b44 <_free_r+0x4c>
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d9fa      	bls.n	8005b3a <_free_r+0x42>
 8005b44:	6811      	ldr	r1, [r2, #0]
 8005b46:	1850      	adds	r0, r2, r1
 8005b48:	42a0      	cmp	r0, r4
 8005b4a:	d10b      	bne.n	8005b64 <_free_r+0x6c>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	4401      	add	r1, r0
 8005b50:	1850      	adds	r0, r2, r1
 8005b52:	4283      	cmp	r3, r0
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	d1e0      	bne.n	8005b1a <_free_r+0x22>
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	6053      	str	r3, [r2, #4]
 8005b5e:	4408      	add	r0, r1
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	e7da      	b.n	8005b1a <_free_r+0x22>
 8005b64:	d902      	bls.n	8005b6c <_free_r+0x74>
 8005b66:	230c      	movs	r3, #12
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	e7d6      	b.n	8005b1a <_free_r+0x22>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	1821      	adds	r1, r4, r0
 8005b70:	428b      	cmp	r3, r1
 8005b72:	bf04      	itt	eq
 8005b74:	6819      	ldreq	r1, [r3, #0]
 8005b76:	685b      	ldreq	r3, [r3, #4]
 8005b78:	6063      	str	r3, [r4, #4]
 8005b7a:	bf04      	itt	eq
 8005b7c:	1809      	addeq	r1, r1, r0
 8005b7e:	6021      	streq	r1, [r4, #0]
 8005b80:	6054      	str	r4, [r2, #4]
 8005b82:	e7ca      	b.n	8005b1a <_free_r+0x22>
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop
 8005b88:	20000f0c 	.word	0x20000f0c

08005b8c <__ssputs_r>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	688e      	ldr	r6, [r1, #8]
 8005b92:	461f      	mov	r7, r3
 8005b94:	42be      	cmp	r6, r7
 8005b96:	680b      	ldr	r3, [r1, #0]
 8005b98:	4682      	mov	sl, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	d82d      	bhi.n	8005bfc <__ssputs_r+0x70>
 8005ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ba8:	d026      	beq.n	8005bf8 <__ssputs_r+0x6c>
 8005baa:	6965      	ldr	r5, [r4, #20]
 8005bac:	6909      	ldr	r1, [r1, #16]
 8005bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bb2:	eba3 0901 	sub.w	r9, r3, r1
 8005bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bba:	1c7b      	adds	r3, r7, #1
 8005bbc:	444b      	add	r3, r9
 8005bbe:	106d      	asrs	r5, r5, #1
 8005bc0:	429d      	cmp	r5, r3
 8005bc2:	bf38      	it	cc
 8005bc4:	461d      	movcc	r5, r3
 8005bc6:	0553      	lsls	r3, r2, #21
 8005bc8:	d527      	bpl.n	8005c1a <__ssputs_r+0x8e>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7ff fea2 	bl	8005914 <_malloc_r>
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	b360      	cbz	r0, 8005c2e <__ssputs_r+0xa2>
 8005bd4:	6921      	ldr	r1, [r4, #16]
 8005bd6:	464a      	mov	r2, r9
 8005bd8:	f000 fad6 	bl	8006188 <memcpy>
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	6126      	str	r6, [r4, #16]
 8005bea:	6165      	str	r5, [r4, #20]
 8005bec:	444e      	add	r6, r9
 8005bee:	eba5 0509 	sub.w	r5, r5, r9
 8005bf2:	6026      	str	r6, [r4, #0]
 8005bf4:	60a5      	str	r5, [r4, #8]
 8005bf6:	463e      	mov	r6, r7
 8005bf8:	42be      	cmp	r6, r7
 8005bfa:	d900      	bls.n	8005bfe <__ssputs_r+0x72>
 8005bfc:	463e      	mov	r6, r7
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	4632      	mov	r2, r6
 8005c02:	4641      	mov	r1, r8
 8005c04:	f000 faa6 	bl	8006154 <memmove>
 8005c08:	68a3      	ldr	r3, [r4, #8]
 8005c0a:	1b9b      	subs	r3, r3, r6
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	4433      	add	r3, r6
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	2000      	movs	r0, #0
 8005c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	f000 fac2 	bl	80061a4 <_realloc_r>
 8005c20:	4606      	mov	r6, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d1e0      	bne.n	8005be8 <__ssputs_r+0x5c>
 8005c26:	6921      	ldr	r1, [r4, #16]
 8005c28:	4650      	mov	r0, sl
 8005c2a:	f7ff ff65 	bl	8005af8 <_free_r>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	f8ca 3000 	str.w	r3, [sl]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c40:	e7e9      	b.n	8005c16 <__ssputs_r+0x8a>
	...

08005c44 <_svfiprintf_r>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4698      	mov	r8, r3
 8005c4a:	898b      	ldrh	r3, [r1, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	b09d      	sub	sp, #116	@ 0x74
 8005c50:	4607      	mov	r7, r0
 8005c52:	460d      	mov	r5, r1
 8005c54:	4614      	mov	r4, r2
 8005c56:	d510      	bpl.n	8005c7a <_svfiprintf_r+0x36>
 8005c58:	690b      	ldr	r3, [r1, #16]
 8005c5a:	b973      	cbnz	r3, 8005c7a <_svfiprintf_r+0x36>
 8005c5c:	2140      	movs	r1, #64	@ 0x40
 8005c5e:	f7ff fe59 	bl	8005914 <_malloc_r>
 8005c62:	6028      	str	r0, [r5, #0]
 8005c64:	6128      	str	r0, [r5, #16]
 8005c66:	b930      	cbnz	r0, 8005c76 <_svfiprintf_r+0x32>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	b01d      	add	sp, #116	@ 0x74
 8005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	2340      	movs	r3, #64	@ 0x40
 8005c78:	616b      	str	r3, [r5, #20]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c7e:	2320      	movs	r3, #32
 8005c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c88:	2330      	movs	r3, #48	@ 0x30
 8005c8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e28 <_svfiprintf_r+0x1e4>
 8005c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c92:	f04f 0901 	mov.w	r9, #1
 8005c96:	4623      	mov	r3, r4
 8005c98:	469a      	mov	sl, r3
 8005c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9e:	b10a      	cbz	r2, 8005ca4 <_svfiprintf_r+0x60>
 8005ca0:	2a25      	cmp	r2, #37	@ 0x25
 8005ca2:	d1f9      	bne.n	8005c98 <_svfiprintf_r+0x54>
 8005ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca8:	d00b      	beq.n	8005cc2 <_svfiprintf_r+0x7e>
 8005caa:	465b      	mov	r3, fp
 8005cac:	4622      	mov	r2, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f7ff ff6b 	bl	8005b8c <__ssputs_r>
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f000 80a7 	beq.w	8005e0a <_svfiprintf_r+0x1c6>
 8005cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cbe:	445a      	add	r2, fp
 8005cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 809f 	beq.w	8005e0a <_svfiprintf_r+0x1c6>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd6:	f10a 0a01 	add.w	sl, sl, #1
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ce4:	4654      	mov	r4, sl
 8005ce6:	2205      	movs	r2, #5
 8005ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cec:	484e      	ldr	r0, [pc, #312]	@ (8005e28 <_svfiprintf_r+0x1e4>)
 8005cee:	f7fa fa97 	bl	8000220 <memchr>
 8005cf2:	9a04      	ldr	r2, [sp, #16]
 8005cf4:	b9d8      	cbnz	r0, 8005d2e <_svfiprintf_r+0xea>
 8005cf6:	06d0      	lsls	r0, r2, #27
 8005cf8:	bf44      	itt	mi
 8005cfa:	2320      	movmi	r3, #32
 8005cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d00:	0711      	lsls	r1, r2, #28
 8005d02:	bf44      	itt	mi
 8005d04:	232b      	movmi	r3, #43	@ 0x2b
 8005d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d10:	d015      	beq.n	8005d3e <_svfiprintf_r+0xfa>
 8005d12:	9a07      	ldr	r2, [sp, #28]
 8005d14:	4654      	mov	r4, sl
 8005d16:	2000      	movs	r0, #0
 8005d18:	f04f 0c0a 	mov.w	ip, #10
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d22:	3b30      	subs	r3, #48	@ 0x30
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d94b      	bls.n	8005dc0 <_svfiprintf_r+0x17c>
 8005d28:	b1b0      	cbz	r0, 8005d58 <_svfiprintf_r+0x114>
 8005d2a:	9207      	str	r2, [sp, #28]
 8005d2c:	e014      	b.n	8005d58 <_svfiprintf_r+0x114>
 8005d2e:	eba0 0308 	sub.w	r3, r0, r8
 8005d32:	fa09 f303 	lsl.w	r3, r9, r3
 8005d36:	4313      	orrs	r3, r2
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	46a2      	mov	sl, r4
 8005d3c:	e7d2      	b.n	8005ce4 <_svfiprintf_r+0xa0>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	1d19      	adds	r1, r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	9103      	str	r1, [sp, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbb      	ittet	lt
 8005d4a:	425b      	neglt	r3, r3
 8005d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d50:	9307      	strge	r3, [sp, #28]
 8005d52:	9307      	strlt	r3, [sp, #28]
 8005d54:	bfb8      	it	lt
 8005d56:	9204      	strlt	r2, [sp, #16]
 8005d58:	7823      	ldrb	r3, [r4, #0]
 8005d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d5c:	d10a      	bne.n	8005d74 <_svfiprintf_r+0x130>
 8005d5e:	7863      	ldrb	r3, [r4, #1]
 8005d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d62:	d132      	bne.n	8005dca <_svfiprintf_r+0x186>
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	1d1a      	adds	r2, r3, #4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	9203      	str	r2, [sp, #12]
 8005d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d70:	3402      	adds	r4, #2
 8005d72:	9305      	str	r3, [sp, #20]
 8005d74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e38 <_svfiprintf_r+0x1f4>
 8005d78:	7821      	ldrb	r1, [r4, #0]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	f7fa fa4f 	bl	8000220 <memchr>
 8005d82:	b138      	cbz	r0, 8005d94 <_svfiprintf_r+0x150>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	eba0 000a 	sub.w	r0, r0, sl
 8005d8a:	2240      	movs	r2, #64	@ 0x40
 8005d8c:	4082      	lsls	r2, r0
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	3401      	adds	r4, #1
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	4824      	ldr	r0, [pc, #144]	@ (8005e2c <_svfiprintf_r+0x1e8>)
 8005d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d9e:	2206      	movs	r2, #6
 8005da0:	f7fa fa3e 	bl	8000220 <memchr>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d036      	beq.n	8005e16 <_svfiprintf_r+0x1d2>
 8005da8:	4b21      	ldr	r3, [pc, #132]	@ (8005e30 <_svfiprintf_r+0x1ec>)
 8005daa:	bb1b      	cbnz	r3, 8005df4 <_svfiprintf_r+0x1b0>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	3307      	adds	r3, #7
 8005db0:	f023 0307 	bic.w	r3, r3, #7
 8005db4:	3308      	adds	r3, #8
 8005db6:	9303      	str	r3, [sp, #12]
 8005db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dba:	4433      	add	r3, r6
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	e76a      	b.n	8005c96 <_svfiprintf_r+0x52>
 8005dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	e7a8      	b.n	8005d1c <_svfiprintf_r+0xd8>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	3401      	adds	r4, #1
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ddc:	3a30      	subs	r2, #48	@ 0x30
 8005dde:	2a09      	cmp	r2, #9
 8005de0:	d903      	bls.n	8005dea <_svfiprintf_r+0x1a6>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0c6      	beq.n	8005d74 <_svfiprintf_r+0x130>
 8005de6:	9105      	str	r1, [sp, #20]
 8005de8:	e7c4      	b.n	8005d74 <_svfiprintf_r+0x130>
 8005dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dee:	4604      	mov	r4, r0
 8005df0:	2301      	movs	r3, #1
 8005df2:	e7f0      	b.n	8005dd6 <_svfiprintf_r+0x192>
 8005df4:	ab03      	add	r3, sp, #12
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <_svfiprintf_r+0x1f0>)
 8005dfc:	a904      	add	r1, sp, #16
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f3af 8000 	nop.w
 8005e04:	1c42      	adds	r2, r0, #1
 8005e06:	4606      	mov	r6, r0
 8005e08:	d1d6      	bne.n	8005db8 <_svfiprintf_r+0x174>
 8005e0a:	89ab      	ldrh	r3, [r5, #12]
 8005e0c:	065b      	lsls	r3, r3, #25
 8005e0e:	f53f af2d 	bmi.w	8005c6c <_svfiprintf_r+0x28>
 8005e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e14:	e72c      	b.n	8005c70 <_svfiprintf_r+0x2c>
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <_svfiprintf_r+0x1f0>)
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	4638      	mov	r0, r7
 8005e22:	f000 f879 	bl	8005f18 <_printf_i>
 8005e26:	e7ed      	b.n	8005e04 <_svfiprintf_r+0x1c0>
 8005e28:	0800a0d4 	.word	0x0800a0d4
 8005e2c:	0800a0de 	.word	0x0800a0de
 8005e30:	00000000 	.word	0x00000000
 8005e34:	08005b8d 	.word	0x08005b8d
 8005e38:	0800a0da 	.word	0x0800a0da

08005e3c <_printf_common>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	4616      	mov	r6, r2
 8005e42:	4698      	mov	r8, r3
 8005e44:	688a      	ldr	r2, [r1, #8]
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bfb8      	it	lt
 8005e50:	4613      	movlt	r3, r2
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e58:	4607      	mov	r7, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b10a      	cbz	r2, 8005e62 <_printf_common+0x26>
 8005e5e:	3301      	adds	r3, #1
 8005e60:	6033      	str	r3, [r6, #0]
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	0699      	lsls	r1, r3, #26
 8005e66:	bf42      	ittt	mi
 8005e68:	6833      	ldrmi	r3, [r6, #0]
 8005e6a:	3302      	addmi	r3, #2
 8005e6c:	6033      	strmi	r3, [r6, #0]
 8005e6e:	6825      	ldr	r5, [r4, #0]
 8005e70:	f015 0506 	ands.w	r5, r5, #6
 8005e74:	d106      	bne.n	8005e84 <_printf_common+0x48>
 8005e76:	f104 0a19 	add.w	sl, r4, #25
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	6832      	ldr	r2, [r6, #0]
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	dc26      	bgt.n	8005ed2 <_printf_common+0x96>
 8005e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	3b00      	subs	r3, #0
 8005e8c:	bf18      	it	ne
 8005e8e:	2301      	movne	r3, #1
 8005e90:	0692      	lsls	r2, r2, #26
 8005e92:	d42b      	bmi.n	8005eec <_printf_common+0xb0>
 8005e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c8      	blx	r9
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d01e      	beq.n	8005ee0 <_printf_common+0xa4>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	6922      	ldr	r2, [r4, #16]
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	bf02      	ittt	eq
 8005eae:	68e5      	ldreq	r5, [r4, #12]
 8005eb0:	6833      	ldreq	r3, [r6, #0]
 8005eb2:	1aed      	subeq	r5, r5, r3
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	bf0c      	ite	eq
 8005eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ebc:	2500      	movne	r5, #0
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	bfc4      	itt	gt
 8005ec2:	1a9b      	subgt	r3, r3, r2
 8005ec4:	18ed      	addgt	r5, r5, r3
 8005ec6:	2600      	movs	r6, #0
 8005ec8:	341a      	adds	r4, #26
 8005eca:	42b5      	cmp	r5, r6
 8005ecc:	d11a      	bne.n	8005f04 <_printf_common+0xc8>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e008      	b.n	8005ee4 <_printf_common+0xa8>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	4638      	mov	r0, r7
 8005eda:	47c8      	blx	r9
 8005edc:	3001      	adds	r0, #1
 8005ede:	d103      	bne.n	8005ee8 <_printf_common+0xac>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	3501      	adds	r5, #1
 8005eea:	e7c6      	b.n	8005e7a <_printf_common+0x3e>
 8005eec:	18e1      	adds	r1, r4, r3
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	2030      	movs	r0, #48	@ 0x30
 8005ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ef6:	4422      	add	r2, r4
 8005ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f00:	3302      	adds	r3, #2
 8005f02:	e7c7      	b.n	8005e94 <_printf_common+0x58>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4622      	mov	r2, r4
 8005f08:	4641      	mov	r1, r8
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	47c8      	blx	r9
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d0e6      	beq.n	8005ee0 <_printf_common+0xa4>
 8005f12:	3601      	adds	r6, #1
 8005f14:	e7d9      	b.n	8005eca <_printf_common+0x8e>
	...

08005f18 <_printf_i>:
 8005f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	7e0f      	ldrb	r7, [r1, #24]
 8005f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f20:	2f78      	cmp	r7, #120	@ 0x78
 8005f22:	4691      	mov	r9, r2
 8005f24:	4680      	mov	r8, r0
 8005f26:	460c      	mov	r4, r1
 8005f28:	469a      	mov	sl, r3
 8005f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f2e:	d807      	bhi.n	8005f40 <_printf_i+0x28>
 8005f30:	2f62      	cmp	r7, #98	@ 0x62
 8005f32:	d80a      	bhi.n	8005f4a <_printf_i+0x32>
 8005f34:	2f00      	cmp	r7, #0
 8005f36:	f000 80d1 	beq.w	80060dc <_printf_i+0x1c4>
 8005f3a:	2f58      	cmp	r7, #88	@ 0x58
 8005f3c:	f000 80b8 	beq.w	80060b0 <_printf_i+0x198>
 8005f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f48:	e03a      	b.n	8005fc0 <_printf_i+0xa8>
 8005f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f4e:	2b15      	cmp	r3, #21
 8005f50:	d8f6      	bhi.n	8005f40 <_printf_i+0x28>
 8005f52:	a101      	add	r1, pc, #4	@ (adr r1, 8005f58 <_printf_i+0x40>)
 8005f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fc5 	.word	0x08005fc5
 8005f60:	08005f41 	.word	0x08005f41
 8005f64:	08005f41 	.word	0x08005f41
 8005f68:	08005f41 	.word	0x08005f41
 8005f6c:	08005f41 	.word	0x08005f41
 8005f70:	08005fc5 	.word	0x08005fc5
 8005f74:	08005f41 	.word	0x08005f41
 8005f78:	08005f41 	.word	0x08005f41
 8005f7c:	08005f41 	.word	0x08005f41
 8005f80:	08005f41 	.word	0x08005f41
 8005f84:	080060c3 	.word	0x080060c3
 8005f88:	08005fef 	.word	0x08005fef
 8005f8c:	0800607d 	.word	0x0800607d
 8005f90:	08005f41 	.word	0x08005f41
 8005f94:	08005f41 	.word	0x08005f41
 8005f98:	080060e5 	.word	0x080060e5
 8005f9c:	08005f41 	.word	0x08005f41
 8005fa0:	08005fef 	.word	0x08005fef
 8005fa4:	08005f41 	.word	0x08005f41
 8005fa8:	08005f41 	.word	0x08005f41
 8005fac:	08006085 	.word	0x08006085
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6032      	str	r2, [r6, #0]
 8005fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e09c      	b.n	80060fe <_printf_i+0x1e6>
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	6031      	str	r1, [r6, #0]
 8005fcc:	0606      	lsls	r6, r0, #24
 8005fce:	d501      	bpl.n	8005fd4 <_printf_i+0xbc>
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	e003      	b.n	8005fdc <_printf_i+0xc4>
 8005fd4:	0645      	lsls	r5, r0, #25
 8005fd6:	d5fb      	bpl.n	8005fd0 <_printf_i+0xb8>
 8005fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	da03      	bge.n	8005fe8 <_printf_i+0xd0>
 8005fe0:	232d      	movs	r3, #45	@ 0x2d
 8005fe2:	426d      	negs	r5, r5
 8005fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe8:	4858      	ldr	r0, [pc, #352]	@ (800614c <_printf_i+0x234>)
 8005fea:	230a      	movs	r3, #10
 8005fec:	e011      	b.n	8006012 <_printf_i+0xfa>
 8005fee:	6821      	ldr	r1, [r4, #0]
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	0608      	lsls	r0, r1, #24
 8005ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ff8:	d402      	bmi.n	8006000 <_printf_i+0xe8>
 8005ffa:	0649      	lsls	r1, r1, #25
 8005ffc:	bf48      	it	mi
 8005ffe:	b2ad      	uxthmi	r5, r5
 8006000:	2f6f      	cmp	r7, #111	@ 0x6f
 8006002:	4852      	ldr	r0, [pc, #328]	@ (800614c <_printf_i+0x234>)
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	bf14      	ite	ne
 8006008:	230a      	movne	r3, #10
 800600a:	2308      	moveq	r3, #8
 800600c:	2100      	movs	r1, #0
 800600e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006012:	6866      	ldr	r6, [r4, #4]
 8006014:	60a6      	str	r6, [r4, #8]
 8006016:	2e00      	cmp	r6, #0
 8006018:	db05      	blt.n	8006026 <_printf_i+0x10e>
 800601a:	6821      	ldr	r1, [r4, #0]
 800601c:	432e      	orrs	r6, r5
 800601e:	f021 0104 	bic.w	r1, r1, #4
 8006022:	6021      	str	r1, [r4, #0]
 8006024:	d04b      	beq.n	80060be <_printf_i+0x1a6>
 8006026:	4616      	mov	r6, r2
 8006028:	fbb5 f1f3 	udiv	r1, r5, r3
 800602c:	fb03 5711 	mls	r7, r3, r1, r5
 8006030:	5dc7      	ldrb	r7, [r0, r7]
 8006032:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006036:	462f      	mov	r7, r5
 8006038:	42bb      	cmp	r3, r7
 800603a:	460d      	mov	r5, r1
 800603c:	d9f4      	bls.n	8006028 <_printf_i+0x110>
 800603e:	2b08      	cmp	r3, #8
 8006040:	d10b      	bne.n	800605a <_printf_i+0x142>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	07df      	lsls	r7, r3, #31
 8006046:	d508      	bpl.n	800605a <_printf_i+0x142>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	6861      	ldr	r1, [r4, #4]
 800604c:	4299      	cmp	r1, r3
 800604e:	bfde      	ittt	le
 8006050:	2330      	movle	r3, #48	@ 0x30
 8006052:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006056:	f106 36ff 	addle.w	r6, r6, #4294967295
 800605a:	1b92      	subs	r2, r2, r6
 800605c:	6122      	str	r2, [r4, #16]
 800605e:	f8cd a000 	str.w	sl, [sp]
 8006062:	464b      	mov	r3, r9
 8006064:	aa03      	add	r2, sp, #12
 8006066:	4621      	mov	r1, r4
 8006068:	4640      	mov	r0, r8
 800606a:	f7ff fee7 	bl	8005e3c <_printf_common>
 800606e:	3001      	adds	r0, #1
 8006070:	d14a      	bne.n	8006108 <_printf_i+0x1f0>
 8006072:	f04f 30ff 	mov.w	r0, #4294967295
 8006076:	b004      	add	sp, #16
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	4832      	ldr	r0, [pc, #200]	@ (8006150 <_printf_i+0x238>)
 8006086:	2778      	movs	r7, #120	@ 0x78
 8006088:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	6831      	ldr	r1, [r6, #0]
 8006090:	061f      	lsls	r7, r3, #24
 8006092:	f851 5b04 	ldr.w	r5, [r1], #4
 8006096:	d402      	bmi.n	800609e <_printf_i+0x186>
 8006098:	065f      	lsls	r7, r3, #25
 800609a:	bf48      	it	mi
 800609c:	b2ad      	uxthmi	r5, r5
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	07d9      	lsls	r1, r3, #31
 80060a2:	bf44      	itt	mi
 80060a4:	f043 0320 	orrmi.w	r3, r3, #32
 80060a8:	6023      	strmi	r3, [r4, #0]
 80060aa:	b11d      	cbz	r5, 80060b4 <_printf_i+0x19c>
 80060ac:	2310      	movs	r3, #16
 80060ae:	e7ad      	b.n	800600c <_printf_i+0xf4>
 80060b0:	4826      	ldr	r0, [pc, #152]	@ (800614c <_printf_i+0x234>)
 80060b2:	e7e9      	b.n	8006088 <_printf_i+0x170>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	f023 0320 	bic.w	r3, r3, #32
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	e7f6      	b.n	80060ac <_printf_i+0x194>
 80060be:	4616      	mov	r6, r2
 80060c0:	e7bd      	b.n	800603e <_printf_i+0x126>
 80060c2:	6833      	ldr	r3, [r6, #0]
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	6961      	ldr	r1, [r4, #20]
 80060c8:	1d18      	adds	r0, r3, #4
 80060ca:	6030      	str	r0, [r6, #0]
 80060cc:	062e      	lsls	r6, r5, #24
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	d501      	bpl.n	80060d6 <_printf_i+0x1be>
 80060d2:	6019      	str	r1, [r3, #0]
 80060d4:	e002      	b.n	80060dc <_printf_i+0x1c4>
 80060d6:	0668      	lsls	r0, r5, #25
 80060d8:	d5fb      	bpl.n	80060d2 <_printf_i+0x1ba>
 80060da:	8019      	strh	r1, [r3, #0]
 80060dc:	2300      	movs	r3, #0
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	4616      	mov	r6, r2
 80060e2:	e7bc      	b.n	800605e <_printf_i+0x146>
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	6032      	str	r2, [r6, #0]
 80060ea:	681e      	ldr	r6, [r3, #0]
 80060ec:	6862      	ldr	r2, [r4, #4]
 80060ee:	2100      	movs	r1, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7fa f895 	bl	8000220 <memchr>
 80060f6:	b108      	cbz	r0, 80060fc <_printf_i+0x1e4>
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	6060      	str	r0, [r4, #4]
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	2300      	movs	r3, #0
 8006102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006106:	e7aa      	b.n	800605e <_printf_i+0x146>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	4632      	mov	r2, r6
 800610c:	4649      	mov	r1, r9
 800610e:	4640      	mov	r0, r8
 8006110:	47d0      	blx	sl
 8006112:	3001      	adds	r0, #1
 8006114:	d0ad      	beq.n	8006072 <_printf_i+0x15a>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	079b      	lsls	r3, r3, #30
 800611a:	d413      	bmi.n	8006144 <_printf_i+0x22c>
 800611c:	68e0      	ldr	r0, [r4, #12]
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	4298      	cmp	r0, r3
 8006122:	bfb8      	it	lt
 8006124:	4618      	movlt	r0, r3
 8006126:	e7a6      	b.n	8006076 <_printf_i+0x15e>
 8006128:	2301      	movs	r3, #1
 800612a:	4632      	mov	r2, r6
 800612c:	4649      	mov	r1, r9
 800612e:	4640      	mov	r0, r8
 8006130:	47d0      	blx	sl
 8006132:	3001      	adds	r0, #1
 8006134:	d09d      	beq.n	8006072 <_printf_i+0x15a>
 8006136:	3501      	adds	r5, #1
 8006138:	68e3      	ldr	r3, [r4, #12]
 800613a:	9903      	ldr	r1, [sp, #12]
 800613c:	1a5b      	subs	r3, r3, r1
 800613e:	42ab      	cmp	r3, r5
 8006140:	dcf2      	bgt.n	8006128 <_printf_i+0x210>
 8006142:	e7eb      	b.n	800611c <_printf_i+0x204>
 8006144:	2500      	movs	r5, #0
 8006146:	f104 0619 	add.w	r6, r4, #25
 800614a:	e7f5      	b.n	8006138 <_printf_i+0x220>
 800614c:	0800a0e5 	.word	0x0800a0e5
 8006150:	0800a0f6 	.word	0x0800a0f6

08006154 <memmove>:
 8006154:	4288      	cmp	r0, r1
 8006156:	b510      	push	{r4, lr}
 8006158:	eb01 0402 	add.w	r4, r1, r2
 800615c:	d902      	bls.n	8006164 <memmove+0x10>
 800615e:	4284      	cmp	r4, r0
 8006160:	4623      	mov	r3, r4
 8006162:	d807      	bhi.n	8006174 <memmove+0x20>
 8006164:	1e43      	subs	r3, r0, #1
 8006166:	42a1      	cmp	r1, r4
 8006168:	d008      	beq.n	800617c <memmove+0x28>
 800616a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800616e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006172:	e7f8      	b.n	8006166 <memmove+0x12>
 8006174:	4402      	add	r2, r0
 8006176:	4601      	mov	r1, r0
 8006178:	428a      	cmp	r2, r1
 800617a:	d100      	bne.n	800617e <memmove+0x2a>
 800617c:	bd10      	pop	{r4, pc}
 800617e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006186:	e7f7      	b.n	8006178 <memmove+0x24>

08006188 <memcpy>:
 8006188:	440a      	add	r2, r1
 800618a:	4291      	cmp	r1, r2
 800618c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006190:	d100      	bne.n	8006194 <memcpy+0xc>
 8006192:	4770      	bx	lr
 8006194:	b510      	push	{r4, lr}
 8006196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800619a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619e:	4291      	cmp	r1, r2
 80061a0:	d1f9      	bne.n	8006196 <memcpy+0xe>
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <_realloc_r>:
 80061a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a8:	4607      	mov	r7, r0
 80061aa:	4614      	mov	r4, r2
 80061ac:	460d      	mov	r5, r1
 80061ae:	b921      	cbnz	r1, 80061ba <_realloc_r+0x16>
 80061b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	4611      	mov	r1, r2
 80061b6:	f7ff bbad 	b.w	8005914 <_malloc_r>
 80061ba:	b92a      	cbnz	r2, 80061c8 <_realloc_r+0x24>
 80061bc:	f7ff fc9c 	bl	8005af8 <_free_r>
 80061c0:	4625      	mov	r5, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c8:	f000 f81a 	bl	8006200 <_malloc_usable_size_r>
 80061cc:	4284      	cmp	r4, r0
 80061ce:	4606      	mov	r6, r0
 80061d0:	d802      	bhi.n	80061d8 <_realloc_r+0x34>
 80061d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061d6:	d8f4      	bhi.n	80061c2 <_realloc_r+0x1e>
 80061d8:	4621      	mov	r1, r4
 80061da:	4638      	mov	r0, r7
 80061dc:	f7ff fb9a 	bl	8005914 <_malloc_r>
 80061e0:	4680      	mov	r8, r0
 80061e2:	b908      	cbnz	r0, 80061e8 <_realloc_r+0x44>
 80061e4:	4645      	mov	r5, r8
 80061e6:	e7ec      	b.n	80061c2 <_realloc_r+0x1e>
 80061e8:	42b4      	cmp	r4, r6
 80061ea:	4622      	mov	r2, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	bf28      	it	cs
 80061f0:	4632      	movcs	r2, r6
 80061f2:	f7ff ffc9 	bl	8006188 <memcpy>
 80061f6:	4629      	mov	r1, r5
 80061f8:	4638      	mov	r0, r7
 80061fa:	f7ff fc7d 	bl	8005af8 <_free_r>
 80061fe:	e7f1      	b.n	80061e4 <_realloc_r+0x40>

08006200 <_malloc_usable_size_r>:
 8006200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006204:	1f18      	subs	r0, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfbc      	itt	lt
 800620a:	580b      	ldrlt	r3, [r1, r0]
 800620c:	18c0      	addlt	r0, r0, r3
 800620e:	4770      	bx	lr

08006210 <_init>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr

0800621c <_fini>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr
