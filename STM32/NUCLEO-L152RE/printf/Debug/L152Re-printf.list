
L152Re-printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002630  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002798  08002798  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002798  08002798  00003798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a0  080027a0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a0  080027a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027a4  080027a4  000037a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080027a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002810  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002810  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007374  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ed  00000000  00000000  0000b405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053f  00000000  00000000  0000d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016167  00000000  00000000  0000d627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082c0  00000000  00000000  0002378e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872ac  00000000  00000000  0002ba4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2cfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  000b2d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b4ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	08002754 	.word	0x08002754

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	08002754 	.word	0x08002754

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b98c 	b.w	80004ac <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	468e      	mov	lr, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d962      	bls.n	8000288 <__udivmoddi4+0xdc>
 80001c2:	fab2 f682 	clz	r6, r2
 80001c6:	b14e      	cbz	r6, 80001dc <__udivmoddi4+0x30>
 80001c8:	f1c6 0320 	rsb	r3, r6, #32
 80001cc:	fa01 f806 	lsl.w	r8, r1, r6
 80001d0:	fa20 f303 	lsr.w	r3, r0, r3
 80001d4:	40b7      	lsls	r7, r6
 80001d6:	ea43 0808 	orr.w	r8, r3, r8
 80001da:	40b4      	lsls	r4, r6
 80001dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	fa1f fc87 	uxth.w	ip, r7
 80001e8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ec:	fb01 f20c 	mul.w	r2, r1, ip
 80001f0:	0c23      	lsrs	r3, r4, #16
 80001f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x62>
 80001fa:	18fb      	adds	r3, r7, r3
 80001fc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000200:	f080 80eb 	bcs.w	80003da <__udivmoddi4+0x22e>
 8000204:	429a      	cmp	r2, r3
 8000206:	f240 80e8 	bls.w	80003da <__udivmoddi4+0x22e>
 800020a:	3902      	subs	r1, #2
 800020c:	443b      	add	r3, r7
 800020e:	1a9a      	subs	r2, r3, r2
 8000210:	fbb2 f0fe 	udiv	r0, r2, lr
 8000214:	fb0e 2210 	mls	r2, lr, r0, r2
 8000218:	fb00 fc0c 	mul.w	ip, r0, ip
 800021c:	b2a3      	uxth	r3, r4
 800021e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000222:	459c      	cmp	ip, r3
 8000224:	d909      	bls.n	800023a <__udivmoddi4+0x8e>
 8000226:	18fb      	adds	r3, r7, r3
 8000228:	f100 32ff 	add.w	r2, r0, #4294967295
 800022c:	f080 80d7 	bcs.w	80003de <__udivmoddi4+0x232>
 8000230:	459c      	cmp	ip, r3
 8000232:	f240 80d4 	bls.w	80003de <__udivmoddi4+0x232>
 8000236:	443b      	add	r3, r7
 8000238:	3802      	subs	r0, #2
 800023a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	eba3 030c 	sub.w	r3, r3, ip
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa2>
 8000246:	2200      	movs	r2, #0
 8000248:	40f3      	lsrs	r3, r6
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xb6>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb0>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa2>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x14c>
 800026a:	4573      	cmp	r3, lr
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xc8>
 800026e:	4282      	cmp	r2, r0
 8000270:	f200 8108 	bhi.w	8000484 <__udivmoddi4+0x2d8>
 8000274:	1a84      	subs	r4, r0, r2
 8000276:	eb6e 0203 	sbc.w	r2, lr, r3
 800027a:	2001      	movs	r0, #1
 800027c:	4690      	mov	r8, r2
 800027e:	2d00      	cmp	r5, #0
 8000280:	d0e5      	beq.n	800024e <__udivmoddi4+0xa2>
 8000282:	e9c5 4800 	strd	r4, r8, [r5]
 8000286:	e7e2      	b.n	800024e <__udivmoddi4+0xa2>
 8000288:	2a00      	cmp	r2, #0
 800028a:	f000 8091 	beq.w	80003b0 <__udivmoddi4+0x204>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	2e00      	cmp	r6, #0
 8000294:	f040 80a5 	bne.w	80003e2 <__udivmoddi4+0x236>
 8000298:	1a8a      	subs	r2, r1, r2
 800029a:	2101      	movs	r1, #1
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a2:	b280      	uxth	r0, r0
 80002a4:	b2bc      	uxth	r4, r7
 80002a6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002aa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb04 f20c 	mul.w	r2, r4, ip
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x11e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x11c>
 80002c2:	429a      	cmp	r2, r3
 80002c4:	f200 80e3 	bhi.w	800048e <__udivmoddi4+0x2e2>
 80002c8:	46c4      	mov	ip, r8
 80002ca:	1a9b      	subs	r3, r3, r2
 80002cc:	fbb3 f2fe 	udiv	r2, r3, lr
 80002d0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002dc:	429c      	cmp	r4, r3
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x144>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x142>
 80002e8:	429c      	cmp	r4, r3
 80002ea:	f200 80cd 	bhi.w	8000488 <__udivmoddi4+0x2dc>
 80002ee:	4602      	mov	r2, r0
 80002f0:	1b1b      	subs	r3, r3, r4
 80002f2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x98>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa2e fa06 	lsr.w	sl, lr, r6
 8000308:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800030c:	fbba f8f9 	udiv	r8, sl, r9
 8000310:	fa0e fe01 	lsl.w	lr, lr, r1
 8000314:	fa20 f306 	lsr.w	r3, r0, r6
 8000318:	fb09 aa18 	mls	sl, r9, r8, sl
 800031c:	fa1f fc87 	uxth.w	ip, r7
 8000320:	ea43 030e 	orr.w	r3, r3, lr
 8000324:	fa00 fe01 	lsl.w	lr, r0, r1
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c1c      	lsrs	r4, r3, #16
 800032e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000332:	42a0      	cmp	r0, r4
 8000334:	fa02 f201 	lsl.w	r2, r2, r1
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x1a4>
 800033a:	193c      	adds	r4, r7, r4
 800033c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000340:	f080 809e 	bcs.w	8000480 <__udivmoddi4+0x2d4>
 8000344:	42a0      	cmp	r0, r4
 8000346:	f240 809b 	bls.w	8000480 <__udivmoddi4+0x2d4>
 800034a:	f1a8 0802 	sub.w	r8, r8, #2
 800034e:	443c      	add	r4, r7
 8000350:	1a24      	subs	r4, r4, r0
 8000352:	b298      	uxth	r0, r3
 8000354:	fbb4 f3f9 	udiv	r3, r4, r9
 8000358:	fb09 4413 	mls	r4, r9, r3, r4
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x1d0>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f103 30ff 	add.w	r0, r3, #4294967295
 800036e:	f080 8085 	bcs.w	800047c <__udivmoddi4+0x2d0>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8082 	bls.w	800047c <__udivmoddi4+0x2d0>
 8000378:	3b02      	subs	r3, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	fba0 8c02 	umull	r8, ip, r0, r2
 8000388:	4564      	cmp	r4, ip
 800038a:	4643      	mov	r3, r8
 800038c:	46e1      	mov	r9, ip
 800038e:	d364      	bcc.n	800045a <__udivmoddi4+0x2ae>
 8000390:	d061      	beq.n	8000456 <__udivmoddi4+0x2aa>
 8000392:	b15d      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000394:	ebbe 0203 	subs.w	r2, lr, r3
 8000398:	eb64 0409 	sbc.w	r4, r4, r9
 800039c:	fa04 f606 	lsl.w	r6, r4, r6
 80003a0:	fa22 f301 	lsr.w	r3, r2, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e74e      	b.n	800024e <__udivmoddi4+0xa2>
 80003b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80003b4:	0c01      	lsrs	r1, r0, #16
 80003b6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003ba:	b280      	uxth	r0, r0
 80003bc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003c0:	463b      	mov	r3, r7
 80003c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80003c6:	4638      	mov	r0, r7
 80003c8:	463c      	mov	r4, r7
 80003ca:	46b8      	mov	r8, r7
 80003cc:	46be      	mov	lr, r7
 80003ce:	2620      	movs	r6, #32
 80003d0:	eba2 0208 	sub.w	r2, r2, r8
 80003d4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d8:	e765      	b.n	80002a6 <__udivmoddi4+0xfa>
 80003da:	4601      	mov	r1, r0
 80003dc:	e717      	b.n	800020e <__udivmoddi4+0x62>
 80003de:	4610      	mov	r0, r2
 80003e0:	e72b      	b.n	800023a <__udivmoddi4+0x8e>
 80003e2:	f1c6 0120 	rsb	r1, r6, #32
 80003e6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ea:	40b7      	lsls	r7, r6
 80003ec:	fa0e fe06 	lsl.w	lr, lr, r6
 80003f0:	fa20 f101 	lsr.w	r1, r0, r1
 80003f4:	ea41 010e 	orr.w	r1, r1, lr
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	fbbc f8fe 	udiv	r8, ip, lr
 8000400:	b2bc      	uxth	r4, r7
 8000402:	fb0e cc18 	mls	ip, lr, r8, ip
 8000406:	fb08 f904 	mul.w	r9, r8, r4
 800040a:	0c0a      	lsrs	r2, r1, #16
 800040c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000410:	40b0      	lsls	r0, r6
 8000412:	4591      	cmp	r9, r2
 8000414:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	d93e      	bls.n	800049a <__udivmoddi4+0x2ee>
 800041c:	18ba      	adds	r2, r7, r2
 800041e:	f108 3cff 	add.w	ip, r8, #4294967295
 8000422:	d201      	bcs.n	8000428 <__udivmoddi4+0x27c>
 8000424:	4591      	cmp	r9, r2
 8000426:	d81f      	bhi.n	8000468 <__udivmoddi4+0x2bc>
 8000428:	eba2 0209 	sub.w	r2, r2, r9
 800042c:	fbb2 f9fe 	udiv	r9, r2, lr
 8000430:	fb09 f804 	mul.w	r8, r9, r4
 8000434:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000438:	b28a      	uxth	r2, r1
 800043a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800043e:	4542      	cmp	r2, r8
 8000440:	d229      	bcs.n	8000496 <__udivmoddi4+0x2ea>
 8000442:	18ba      	adds	r2, r7, r2
 8000444:	f109 31ff 	add.w	r1, r9, #4294967295
 8000448:	d2c2      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044a:	4542      	cmp	r2, r8
 800044c:	d2c0      	bcs.n	80003d0 <__udivmoddi4+0x224>
 800044e:	f1a9 0102 	sub.w	r1, r9, #2
 8000452:	443a      	add	r2, r7
 8000454:	e7bc      	b.n	80003d0 <__udivmoddi4+0x224>
 8000456:	45c6      	cmp	lr, r8
 8000458:	d29b      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 800045a:	ebb8 0302 	subs.w	r3, r8, r2
 800045e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000462:	3801      	subs	r0, #1
 8000464:	46e1      	mov	r9, ip
 8000466:	e794      	b.n	8000392 <__udivmoddi4+0x1e6>
 8000468:	eba7 0909 	sub.w	r9, r7, r9
 800046c:	444a      	add	r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	f1a8 0c02 	sub.w	ip, r8, #2
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	e7db      	b.n	8000434 <__udivmoddi4+0x288>
 800047c:	4603      	mov	r3, r0
 800047e:	e77d      	b.n	800037c <__udivmoddi4+0x1d0>
 8000480:	46d0      	mov	r8, sl
 8000482:	e765      	b.n	8000350 <__udivmoddi4+0x1a4>
 8000484:	4608      	mov	r0, r1
 8000486:	e6fa      	b.n	800027e <__udivmoddi4+0xd2>
 8000488:	443b      	add	r3, r7
 800048a:	3a02      	subs	r2, #2
 800048c:	e730      	b.n	80002f0 <__udivmoddi4+0x144>
 800048e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000492:	443b      	add	r3, r7
 8000494:	e719      	b.n	80002ca <__udivmoddi4+0x11e>
 8000496:	4649      	mov	r1, r9
 8000498:	e79a      	b.n	80003d0 <__udivmoddi4+0x224>
 800049a:	eba2 0209 	sub.w	r2, r2, r9
 800049e:	fbb2 f9fe 	udiv	r9, r2, lr
 80004a2:	46c4      	mov	ip, r8
 80004a4:	fb09 f804 	mul.w	r8, r9, r4
 80004a8:	e7c4      	b.n	8000434 <__udivmoddi4+0x288>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d013      	beq.n	80004f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80004d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d00b      	beq.n	80004f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004d8:	e000      	b.n	80004dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80004da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f9      	beq.n	80004da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fa5d 	bl	80009be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80c 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f882 	bl	8000610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f856 	bl	80005bc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("running\n");
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <main+0x20>)
 8000512:	f001 fd91 	bl	8002038 <puts>
  {
 8000516:	bf00      	nop
 8000518:	e7fa      	b.n	8000510 <main+0x14>
 800051a:	bf00      	nop
 800051c:	0800276c 	.word	0x0800276c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	@ 0x48
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2234      	movs	r2, #52	@ 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fe62 	bl	80021f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <SystemClock_Config+0x98>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800054a:	4a1b      	ldr	r2, [pc, #108]	@ (80005b8 <SystemClock_Config+0x98>)
 800054c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000550:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000566:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800056c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fd1c 	bl	8000fb4 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000582:	f000 f8c7 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2303      	movs	r3, #3
 800058c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f838 	bl	8001614 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005aa:	f000 f8b3 	bl	8000714 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3748      	adds	r7, #72	@ 0x48
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_USART2_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f001 fad4 	bl	8001ba0 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f889 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000084 	.word	0x20000084
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b2a      	ldr	r3, [pc, #168]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a29      	ldr	r2, [pc, #164]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b24      	ldr	r3, [pc, #144]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a23      	ldr	r2, [pc, #140]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000644:	f043 0320 	orr.w	r3, r3, #32
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 0320 	and.w	r3, r3, #32
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066e:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_GPIO_Init+0xc0>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 800068c:	f000 fc7a 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000690:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000696:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <MX_GPIO_Init+0xc8>)
 80006a8:	f000 fadc 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ac:	2320      	movs	r3, #32
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 80006c4:	f000 face 	bl	8000c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020800 	.word	0x40020800

080006dc <_write>:

/* USER CODE BEGIN 4 */
/* Send a char through ITM */
int _write(int file, char *ptr, int len) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e009      	b.n	8000702 <_write+0x26>
    ITM_SendChar(*ptr++);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	60ba      	str	r2, [r7, #8]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff feda 	bl	80004b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	429a      	cmp	r2, r3
 8000708:	dbf1      	blt.n	80006ee <_write+0x12>
  }
  return len;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_MspInit+0x5c>)
 8000728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072a:	4a14      	ldr	r2, [pc, #80]	@ (800077c <HAL_MspInit+0x5c>)
 800072c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000730:	6253      	str	r3, [r2, #36]	@ 0x24
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_MspInit+0x5c>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_MspInit+0x5c>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6213      	str	r3, [r2, #32]
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_MspInit+0x5c>)
 800074c:	6a1b      	ldr	r3, [r3, #32]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_MspInit+0x5c>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	6253      	str	r3, [r2, #36]	@ 0x24
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_MspInit+0x5c>)
 8000764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076e:	2007      	movs	r0, #7
 8000770:	f000 fa44 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <HAL_UART_MspInit+0x7c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d127      	bne.n	80007f2 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a6:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_UART_MspInit+0x80>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e2:	2307      	movs	r3, #7
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <HAL_UART_MspInit+0x84>)
 80007ee:	f000 fa39 	bl	8000c64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	@ 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000858:	f000 f904 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	e00a      	b.n	8000888 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000872:	f3af 8000 	nop.w
 8000876:	4601      	mov	r1, r0
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	60ba      	str	r2, [r7, #8]
 800087e:	b2ca      	uxtb	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	dbf0      	blt.n	8000872 <_read+0x12>
  }

  return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_close>:
  }
  return len;
}

int _close(int file)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c0:	605a      	str	r2, [r3, #4]
  return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <_isatty>:

int _isatty(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b085      	sub	sp, #20
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f001 fcb2 	bl	8002294 <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	@ (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20014000 	.word	0x20014000
 800095c:	00000400 	.word	0x00000400
 8000960:	200000cc 	.word	0x200000cc
 8000964:	20000220 	.word	0x20000220

08000968 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff fff8 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800097a:	490c      	ldr	r1, [pc, #48]	@ (80009ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800097c:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a09      	ldr	r2, [pc, #36]	@ (80009b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000990:	4c09      	ldr	r4, [pc, #36]	@ (80009b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f001 fc7f 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a2:	f7ff fdab 	bl	80004fc <main>
  bx lr
 80009a6:	4770      	bx	lr
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009b0:	080027a8 	.word	0x080027a8
  ldr r2, =_sbss
 80009b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009b8:	20000220 	.word	0x20000220

080009bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_IRQHandler>

080009be <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f917 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f80e 	bl	80009f0 <HAL_InitTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	e001      	b.n	80009e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e0:	f7ff fe9e 	bl	8000720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_InitTick+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d022      	beq.n	8000a4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <HAL_InitTick+0x6c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <HAL_InitTick+0x68>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f916 	bl	8000c4a <HAL_SYSTICK_Config>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10f      	bne.n	8000a44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d809      	bhi.n	8000a3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a32:	f000 f8ee 	bl	8000c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_InitTick+0x70>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e007      	b.n	8000a4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	e004      	b.n	8000a4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e001      	b.n	8000a4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a03      	ldr	r2, [pc, #12]	@ (8000a80 <HAL_IncTick+0x1c>)
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	20000008 	.word	0x20000008

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	@ (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	200000d0 	.word	0x200000d0

08000a9c <__NVIC_SetPriorityGrouping>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	@ (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff49 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb0 	bl	8000bb8 <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c7a:	e160      	b.n	8000f3e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8152 	beq.w	8000f38 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d005      	beq.n	8000cac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d130      	bne.n	8000d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	f003 0201 	and.w	r2, r3, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d017      	beq.n	8000d4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d123      	bne.n	8000d9e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	6939      	ldr	r1, [r7, #16]
 8000d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0203 	and.w	r2, r3, #3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80ac 	beq.w	8000f38 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	4b5e      	ldr	r3, [pc, #376]	@ (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	4a5d      	ldr	r2, [pc, #372]	@ (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6213      	str	r3, [r2, #32]
 8000dec:	4b5b      	ldr	r3, [pc, #364]	@ (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000df8:	4a59      	ldr	r2, [pc, #356]	@ (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a51      	ldr	r2, [pc, #324]	@ (8000f64 <HAL_GPIO_Init+0x300>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d025      	beq.n	8000e70 <HAL_GPIO_Init+0x20c>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a50      	ldr	r2, [pc, #320]	@ (8000f68 <HAL_GPIO_Init+0x304>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d01f      	beq.n	8000e6c <HAL_GPIO_Init+0x208>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8000f6c <HAL_GPIO_Init+0x308>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d019      	beq.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a4e      	ldr	r2, [pc, #312]	@ (8000f70 <HAL_GPIO_Init+0x30c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d013      	beq.n	8000e64 <HAL_GPIO_Init+0x200>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8000f74 <HAL_GPIO_Init+0x310>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00d      	beq.n	8000e60 <HAL_GPIO_Init+0x1fc>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_GPIO_Init+0x314>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x1f8>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4b      	ldr	r2, [pc, #300]	@ (8000f7c <HAL_GPIO_Init+0x318>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_GPIO_Init+0x1f4>
 8000e54:	2306      	movs	r3, #6
 8000e56:	e00c      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e58:	2307      	movs	r3, #7
 8000e5a:	e00a      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e008      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e60:	2304      	movs	r3, #4
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e004      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e68:	2302      	movs	r3, #2
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e70:	2300      	movs	r3, #0
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e82:	4937      	ldr	r1, [pc, #220]	@ (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a32      	ldr	r2, [pc, #200]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a28      	ldr	r2, [pc, #160]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f32:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f ae97 	bne.w	8000c7c <HAL_GPIO_Init+0x18>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e31d      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc6:	4b94      	ldr	r3, [pc, #592]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd0:	4b91      	ldr	r3, [pc, #580]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d07b      	beq.n	80010de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d006      	beq.n	8000ffa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d10f      	bne.n	8001012 <HAL_RCC_OscConfig+0x5e>
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff8:	d10b      	bne.n	8001012 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffa:	4b87      	ldr	r3, [pc, #540]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d06a      	beq.n	80010dc <HAL_RCC_OscConfig+0x128>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d166      	bne.n	80010dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e2f7      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d106      	bne.n	8001028 <HAL_RCC_OscConfig+0x74>
 800101a:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7e      	ldr	r2, [pc, #504]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e02d      	b.n	8001084 <HAL_RCC_OscConfig+0xd0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10c      	bne.n	800104a <HAL_RCC_OscConfig+0x96>
 8001030:	4b79      	ldr	r3, [pc, #484]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a78      	ldr	r2, [pc, #480]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b76      	ldr	r3, [pc, #472]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a75      	ldr	r2, [pc, #468]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e01c      	b.n	8001084 <HAL_RCC_OscConfig+0xd0>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b05      	cmp	r3, #5
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0xb8>
 8001052:	4b71      	ldr	r3, [pc, #452]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a70      	ldr	r2, [pc, #448]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b6e      	ldr	r3, [pc, #440]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6d      	ldr	r2, [pc, #436]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0xd0>
 800106c:	4b6a      	ldr	r3, [pc, #424]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a69      	ldr	r2, [pc, #420]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b67      	ldr	r3, [pc, #412]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a66      	ldr	r2, [pc, #408]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800107e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcfc 	bl	8000a88 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcf8 	bl	8000a88 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	@ 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e2ad      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0xe0>
 80010b2:	e014      	b.n	80010de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fce8 	bl	8000a88 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fce4 	bl	8000a88 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	@ 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e299      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ce:	4b52      	ldr	r3, [pc, #328]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x108>
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d05a      	beq.n	80011a0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b0c      	cmp	r3, #12
 80010f4:	d119      	bne.n	800112a <HAL_RCC_OscConfig+0x176>
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d116      	bne.n	800112a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fc:	4b46      	ldr	r3, [pc, #280]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_OscConfig+0x160>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d001      	beq.n	8001114 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e276      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b40      	ldr	r3, [pc, #256]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	493d      	ldr	r1, [pc, #244]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001128:	e03a      	b.n	80011a0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d020      	beq.n	8001174 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001132:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <HAL_RCC_OscConfig+0x268>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fca6 	bl	8000a88 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001140:	f7ff fca2 	bl	8000a88 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e257      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001152:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	492a      	ldr	r1, [pc, #168]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
 8001172:	e015      	b.n	80011a0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <HAL_RCC_OscConfig+0x268>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc85 	bl	8000a88 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc81 	bl	8000a88 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e236      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001194:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f0      	bne.n	8001182 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80b8 	beq.w	800131e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d170      	bne.n	8001296 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x218>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e21a      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80011d8:	429a      	cmp	r2, r3
 80011da:	d921      	bls.n	8001220 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc7d 	bl	8001ae0 <RCC_SetFlashLatencyFromMSIRange>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e208      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4906      	ldr	r1, [pc, #24]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	061b      	lsls	r3, r3, #24
 8001210:	4901      	ldr	r1, [pc, #4]	@ (8001218 <HAL_RCC_OscConfig+0x264>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
 8001216:	e020      	b.n	800125a <HAL_RCC_OscConfig+0x2a6>
 8001218:	40023800 	.word	0x40023800
 800121c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001220:	4b99      	ldr	r3, [pc, #612]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4996      	ldr	r1, [pc, #600]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001232:	4b95      	ldr	r3, [pc, #596]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	061b      	lsls	r3, r3, #24
 8001240:	4991      	ldr	r1, [pc, #580]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fc48 	bl	8001ae0 <RCC_SetFlashLatencyFromMSIRange>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1d3      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	0b5b      	lsrs	r3, r3, #13
 8001260:	3301      	adds	r3, #1
 8001262:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800126a:	4a87      	ldr	r2, [pc, #540]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 800126c:	6892      	ldr	r2, [r2, #8]
 800126e:	0912      	lsrs	r2, r2, #4
 8001270:	f002 020f 	and.w	r2, r2, #15
 8001274:	4985      	ldr	r1, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x4d8>)
 8001276:	5c8a      	ldrb	r2, [r1, r2]
 8001278:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800127a:	4a85      	ldr	r2, [pc, #532]	@ (8001490 <HAL_RCC_OscConfig+0x4dc>)
 800127c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800127e:	4b85      	ldr	r3, [pc, #532]	@ (8001494 <HAL_RCC_OscConfig+0x4e0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fbb4 	bl	80009f0 <HAL_InitTick>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d045      	beq.n	800131e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	e1b5      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d029      	beq.n	80012f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800129e:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <HAL_RCC_OscConfig+0x4e4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fbf0 	bl	8000a88 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012ac:	f7ff fbec 	bl	8000a88 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1a1      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012be:	4b72      	ldr	r3, [pc, #456]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	496c      	ldr	r1, [pc, #432]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	4967      	ldr	r1, [pc, #412]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f2:	4b69      	ldr	r3, [pc, #420]	@ (8001498 <HAL_RCC_OscConfig+0x4e4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fbc6 	bl	8000a88 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001300:	f7ff fbc2 	bl	8000a88 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e177      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001312:	4b5d      	ldr	r3, [pc, #372]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d030      	beq.n	800138c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d016      	beq.n	8001360 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b5a      	ldr	r3, [pc, #360]	@ (800149c <HAL_RCC_OscConfig+0x4e8>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fba6 	bl	8000a88 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fba2 	bl	8000a88 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e157      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001352:	4b4d      	ldr	r3, [pc, #308]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x38c>
 800135e:	e015      	b.n	800138c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b4e      	ldr	r3, [pc, #312]	@ (800149c <HAL_RCC_OscConfig+0x4e8>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fb8f 	bl	8000a88 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fb8b 	bl	8000a88 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e140      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001380:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80b5 	beq.w	8001504 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139e:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10d      	bne.n	80013c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b37      	ldr	r3, [pc, #220]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	4a36      	ldr	r2, [pc, #216]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80013b6:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c2:	2301      	movs	r3, #1
 80013c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b36      	ldr	r3, [pc, #216]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d2:	4b33      	ldr	r3, [pc, #204]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb53 	bl	8000a88 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e6:	f7ff fb4f 	bl	8000a88 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b64      	cmp	r3, #100	@ 0x64
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e104      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <HAL_RCC_OscConfig+0x4ec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x466>
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001416:	6353      	str	r3, [r2, #52]	@ 0x34
 8001418:	e02d      	b.n	8001476 <HAL_RCC_OscConfig+0x4c2>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x488>
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001426:	4a18      	ldr	r2, [pc, #96]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800142c:	6353      	str	r3, [r2, #52]	@ 0x34
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001438:	6353      	str	r3, [r2, #52]	@ 0x34
 800143a:	e01c      	b.n	8001476 <HAL_RCC_OscConfig+0x4c2>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x4aa>
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001448:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001450:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001454:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	6353      	str	r3, [r2, #52]	@ 0x34
 800145c:	e00b      	b.n	8001476 <HAL_RCC_OscConfig+0x4c2>
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001468:	6353      	str	r3, [r2, #52]	@ 0x34
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 800146c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146e:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_RCC_OscConfig+0x4d4>)
 8001470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001474:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d024      	beq.n	80014c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fb03 	bl	8000a88 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001484:	e019      	b.n	80014ba <HAL_RCC_OscConfig+0x506>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	08002780 	.word	0x08002780
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004
 8001498:	42470020 	.word	0x42470020
 800149c:	42470680 	.word	0x42470680
 80014a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff faf0 	bl	8000a88 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0a3      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ba:	4b54      	ldr	r3, [pc, #336]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80014bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4f0>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fade 	bl	8000a88 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fada 	bl	8000a88 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e08d      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014e6:	4b49      	ldr	r3, [pc, #292]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b44      	ldr	r3, [pc, #272]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	4a43      	ldr	r2, [pc, #268]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	2b00      	cmp	r3, #0
 800150a:	d079      	beq.n	8001600 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d056      	beq.n	80015c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	2b02      	cmp	r3, #2
 8001518:	d13b      	bne.n	8001592 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <HAL_RCC_OscConfig+0x65c>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fab2 	bl	8000a88 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff faae 	bl	8000a88 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e063      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800153a:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	4319      	orrs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	430b      	orrs	r3, r1
 800155e:	492b      	ldr	r1, [pc, #172]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001564:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <HAL_RCC_OscConfig+0x65c>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff fa8d 	bl	8000a88 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff fa89 	bl	8000a88 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e03e      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x5be>
 8001590:	e036      	b.n	8001600 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <HAL_RCC_OscConfig+0x65c>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fa76 	bl	8000a88 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fa72 	bl	8000a88 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e027      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5ec>
 80015be:	e01f      	b.n	8001600 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_RCC_OscConfig+0x658>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10d      	bne.n	80015fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	42470060 	.word	0x42470060

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e11a      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b8f      	ldr	r3, [pc, #572]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d919      	bls.n	800166a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_ClockConfig+0x34>
 800163c:	4b8a      	ldr	r3, [pc, #552]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a89      	ldr	r2, [pc, #548]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b87      	ldr	r3, [pc, #540]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 0201 	bic.w	r2, r3, #1
 8001650:	4985      	ldr	r1, [pc, #532]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0f9      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001676:	4b7d      	ldr	r3, [pc, #500]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	497a      	ldr	r1, [pc, #488]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 808e 	beq.w	80017b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800169e:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d121      	bne.n	80016ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0d7      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b6:	4b6d      	ldr	r3, [pc, #436]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0cb      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ce:	4b67      	ldr	r3, [pc, #412]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0bf      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016de:	4b63      	ldr	r3, [pc, #396]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0b7      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b5f      	ldr	r3, [pc, #380]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	495c      	ldr	r1, [pc, #368]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff f9c2 	bl	8000a88 <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d112      	bne.n	8001734 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f9ba 	bl	8000a88 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e09b      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001726:	4b51      	ldr	r3, [pc, #324]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_ClockConfig+0xfc>
 8001732:	e03e      	b.n	80017b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d112      	bne.n	8001762 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173e:	f7ff f9a3 	bl	8000a88 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e084      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001754:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d1ee      	bne.n	800173e <HAL_RCC_ClockConfig+0x12a>
 8001760:	e027      	b.n	80017b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d11d      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f98c 	bl	8000a88 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e06d      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d1ee      	bne.n	800176c <HAL_RCC_ClockConfig+0x158>
 800178e:	e010      	b.n	80017b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff f97a 	bl	8000a88 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e05b      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d219      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x1be>
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0201 	bic.w	r2, r3, #1
 80017da:	4923      	ldr	r1, [pc, #140]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_RCC_ClockConfig+0x254>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e034      	b.n	800185e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4917      	ldr	r1, [pc, #92]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490f      	ldr	r1, [pc, #60]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f823 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <HAL_RCC_ClockConfig+0x258>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490b      	ldr	r1, [pc, #44]	@ (8001870 <HAL_RCC_ClockConfig+0x25c>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_RCC_ClockConfig+0x260>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_RCC_ClockConfig+0x264>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f8cc 	bl	80009f0 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	72fb      	strb	r3, [r7, #11]

  return status;
 800185c:	7afb      	ldrb	r3, [r7, #11]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00
 800186c:	40023800 	.word	0x40023800
 8001870:	08002780 	.word	0x08002780
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001880:	b092      	sub	sp, #72	@ 0x48
 8001882:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001884:	4b79      	ldr	r3, [pc, #484]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800188a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d00d      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x34>
 8001894:	2b0c      	cmp	r3, #12
 8001896:	f200 80d5 	bhi.w	8001a44 <HAL_RCC_GetSysClockFreq+0x1c8>
 800189a:	2b04      	cmp	r3, #4
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x28>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x2e>
 80018a2:	e0cf      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b72      	ldr	r3, [pc, #456]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80018a6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80018a8:	e0da      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018aa:	4b72      	ldr	r3, [pc, #456]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80018ac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80018ae:	e0d7      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	f003 020f 	and.w	r2, r3, #15
 80018b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c0:	0d9b      	lsrs	r3, r3, #22
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ca:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d05d      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d8:	2200      	movs	r2, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	4611      	mov	r1, r2
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
 80018e2:	4622      	mov	r2, r4
 80018e4:	462b      	mov	r3, r5
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	0159      	lsls	r1, r3, #5
 80018f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f4:	0150      	lsls	r0, r2, #5
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4621      	mov	r1, r4
 80018fc:	1a51      	subs	r1, r2, r1
 80018fe:	6139      	str	r1, [r7, #16]
 8001900:	4629      	mov	r1, r5
 8001902:	eb63 0301 	sbc.w	r3, r3, r1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001914:	4659      	mov	r1, fp
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	4651      	mov	r1, sl
 800191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191e:	4651      	mov	r1, sl
 8001920:	018a      	lsls	r2, r1, #6
 8001922:	46d4      	mov	ip, sl
 8001924:	ebb2 080c 	subs.w	r8, r2, ip
 8001928:	4659      	mov	r1, fp
 800192a:	eb63 0901 	sbc.w	r9, r3, r1
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800193a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800193e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001942:	4690      	mov	r8, r2
 8001944:	4699      	mov	r9, r3
 8001946:	4623      	mov	r3, r4
 8001948:	eb18 0303 	adds.w	r3, r8, r3
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	462b      	mov	r3, r5
 8001950:	eb49 0303 	adc.w	r3, r9, r3
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001962:	4629      	mov	r1, r5
 8001964:	024b      	lsls	r3, r1, #9
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	4604      	mov	r4, r0
 800196c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001970:	4601      	mov	r1, r0
 8001972:	024a      	lsls	r2, r1, #9
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800197a:	2200      	movs	r2, #0
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001984:	f7fe fbfa 	bl	800017c <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001990:	e055      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001994:	2200      	movs	r2, #0
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	627a      	str	r2, [r7, #36]	@ 0x24
 800199a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800199e:	4642      	mov	r2, r8
 80019a0:	464b      	mov	r3, r9
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	46c4      	mov	ip, r8
 80019b8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	468c      	mov	ip, r1
 80019c2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019da:	ebb2 040a 	subs.w	r4, r2, sl
 80019de:	eb63 050b 	sbc.w	r5, r3, fp
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	00eb      	lsls	r3, r5, #3
 80019ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f0:	00e2      	lsls	r2, r4, #3
 80019f2:	4614      	mov	r4, r2
 80019f4:	461d      	mov	r5, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	18e3      	adds	r3, r4, r3
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	460b      	mov	r3, r1
 80019fe:	eb45 0303 	adc.w	r3, r5, r3
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a10:	4629      	mov	r1, r5
 8001a12:	028b      	lsls	r3, r1, #10
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	4604      	mov	r4, r0
 8001a1a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001a1e:	4601      	mov	r1, r0
 8001a20:	028a      	lsls	r2, r1, #10
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	61fa      	str	r2, [r7, #28]
 8001a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a32:	f7fe fba3 	bl	800017c <__aeabi_uldivmod>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a40:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001a42:	e00d      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0b5b      	lsrs	r3, r3, #13
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a52:	3301      	adds	r3, #1
 8001a54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3748      	adds	r7, #72	@ 0x48
 8001a66:	46bd      	mov	sp, r7
 8001a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200
 8001a78:	08002774 	.word	0x08002774

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b02      	ldr	r3, [pc, #8]	@ (8001a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff2 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	@ (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08002790 	.word	0x08002790

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0adb      	lsrs	r3, r3, #11
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	@ (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08002790 	.word	0x08002790

08001ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001aec:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d12c      	bne.n	8001b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e016      	b.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001b30:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001b44:	d105      	bne.n	8001b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001b4c:	d101      	bne.n	8001b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0201 	bic.w	r2, r3, #1
 8001b6c:	490b      	ldr	r1, [pc, #44]	@ (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e042      	b.n	8001c38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fdda 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	@ 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f82b 	bl	8001c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8001c80:	f023 030c 	bic.w	r3, r3, #12
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <UART_SetConfig+0x1c0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d103      	bne.n	8001cb6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cae:	f7ff ff03 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	e002      	b.n	8001cbc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cb6:	f7ff feeb 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8001cba:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cc4:	d14c      	bne.n	8001d60 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	4a49      	ldr	r2, [pc, #292]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	0119      	lsls	r1, r3, #4
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009a      	lsls	r2, r3, #2
 8001cf0:	441a      	add	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cfc:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2064      	movs	r0, #100	@ 0x64
 8001d06:	fb00 f303 	mul.w	r3, r0, r3
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	3332      	adds	r3, #50	@ 0x32
 8001d10:	4a3c      	ldr	r2, [pc, #240]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001d1e:	4419      	add	r1, r3
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	441a      	add	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d36:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001d38:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	2064      	movs	r0, #100	@ 0x64
 8001d40:	fb00 f303 	mul.w	r3, r0, r3
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	3332      	adds	r3, #50	@ 0x32
 8001d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	095b      	lsrs	r3, r3, #5
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d5e:	e04a      	b.n	8001df6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	441a      	add	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4a23      	ldr	r2, [pc, #140]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	0119      	lsls	r1, r3, #4
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	009a      	lsls	r2, r3, #2
 8001d8a:	441a      	add	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001d98:	fba3 0302 	umull	r0, r3, r3, r2
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	2064      	movs	r0, #100	@ 0x64
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	3332      	adds	r3, #50	@ 0x32
 8001daa:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db6:	4419      	add	r1, r3
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	441a      	add	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001dd0:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	2064      	movs	r0, #100	@ 0x64
 8001dd8:	fb00 f303 	mul.w	r3, r0, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	3332      	adds	r3, #50	@ 0x32
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <UART_SetConfig+0x1c4>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	440a      	add	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40013800 	.word	0x40013800
 8001e04:	51eb851f 	.word	0x51eb851f

08001e08 <std>:
 8001e08:	2300      	movs	r3, #0
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e16:	6083      	str	r3, [r0, #8]
 8001e18:	8181      	strh	r1, [r0, #12]
 8001e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001e1c:	81c2      	strh	r2, [r0, #14]
 8001e1e:	6183      	str	r3, [r0, #24]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2208      	movs	r2, #8
 8001e24:	305c      	adds	r0, #92	@ 0x5c
 8001e26:	f000 f9e7 	bl	80021f8 <memset>
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <std+0x58>)
 8001e2c:	6224      	str	r4, [r4, #32]
 8001e2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <std+0x5c>)
 8001e32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <std+0x60>)
 8001e36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <std+0x64>)
 8001e3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <std+0x68>)
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d006      	beq.n	8001e50 <std+0x48>
 8001e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001e46:	4294      	cmp	r4, r2
 8001e48:	d002      	beq.n	8001e50 <std+0x48>
 8001e4a:	33d0      	adds	r3, #208	@ 0xd0
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d105      	bne.n	8001e5c <std+0x54>
 8001e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e58:	f000 ba46 	b.w	80022e8 <__retarget_lock_init_recursive>
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop
 8001e60:	08002049 	.word	0x08002049
 8001e64:	0800206b 	.word	0x0800206b
 8001e68:	080020a3 	.word	0x080020a3
 8001e6c:	080020c7 	.word	0x080020c7
 8001e70:	200000d4 	.word	0x200000d4

08001e74 <stdio_exit_handler>:
 8001e74:	4a02      	ldr	r2, [pc, #8]	@ (8001e80 <stdio_exit_handler+0xc>)
 8001e76:	4903      	ldr	r1, [pc, #12]	@ (8001e84 <stdio_exit_handler+0x10>)
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <stdio_exit_handler+0x14>)
 8001e7a:	f000 b869 	b.w	8001f50 <_fwalk_sglue>
 8001e7e:	bf00      	nop
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	080025dd 	.word	0x080025dd
 8001e88:	2000001c 	.word	0x2000001c

08001e8c <cleanup_stdio>:
 8001e8c:	6841      	ldr	r1, [r0, #4]
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <cleanup_stdio+0x34>)
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4299      	cmp	r1, r3
 8001e94:	4604      	mov	r4, r0
 8001e96:	d001      	beq.n	8001e9c <cleanup_stdio+0x10>
 8001e98:	f000 fba0 	bl	80025dc <_fflush_r>
 8001e9c:	68a1      	ldr	r1, [r4, #8]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <cleanup_stdio+0x38>)
 8001ea0:	4299      	cmp	r1, r3
 8001ea2:	d002      	beq.n	8001eaa <cleanup_stdio+0x1e>
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f000 fb99 	bl	80025dc <_fflush_r>
 8001eaa:	68e1      	ldr	r1, [r4, #12]
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <cleanup_stdio+0x3c>)
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d004      	beq.n	8001ebc <cleanup_stdio+0x30>
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb8:	f000 bb90 	b.w	80025dc <_fflush_r>
 8001ebc:	bd10      	pop	{r4, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000d4 	.word	0x200000d4
 8001ec4:	2000013c 	.word	0x2000013c
 8001ec8:	200001a4 	.word	0x200001a4

08001ecc <global_stdio_init.part.0>:
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <global_stdio_init.part.0+0x30>)
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8001f00 <global_stdio_init.part.0+0x34>)
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f04 <global_stdio_init.part.0+0x38>)
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	2104      	movs	r1, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	f7ff ff94 	bl	8001e08 <std>
 8001ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2109      	movs	r1, #9
 8001ee8:	f7ff ff8e 	bl	8001e08 <std>
 8001eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef6:	2112      	movs	r1, #18
 8001ef8:	f7ff bf86 	b.w	8001e08 <std>
 8001efc:	2000020c 	.word	0x2000020c
 8001f00:	200000d4 	.word	0x200000d4
 8001f04:	08001e75 	.word	0x08001e75

08001f08 <__sfp_lock_acquire>:
 8001f08:	4801      	ldr	r0, [pc, #4]	@ (8001f10 <__sfp_lock_acquire+0x8>)
 8001f0a:	f000 b9ee 	b.w	80022ea <__retarget_lock_acquire_recursive>
 8001f0e:	bf00      	nop
 8001f10:	20000215 	.word	0x20000215

08001f14 <__sfp_lock_release>:
 8001f14:	4801      	ldr	r0, [pc, #4]	@ (8001f1c <__sfp_lock_release+0x8>)
 8001f16:	f000 b9e9 	b.w	80022ec <__retarget_lock_release_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	20000215 	.word	0x20000215

08001f20 <__sinit>:
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	f7ff fff0 	bl	8001f08 <__sfp_lock_acquire>
 8001f28:	6a23      	ldr	r3, [r4, #32]
 8001f2a:	b11b      	cbz	r3, 8001f34 <__sinit+0x14>
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f30:	f7ff bff0 	b.w	8001f14 <__sfp_lock_release>
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <__sinit+0x28>)
 8001f36:	6223      	str	r3, [r4, #32]
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <__sinit+0x2c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f5      	bne.n	8001f2c <__sinit+0xc>
 8001f40:	f7ff ffc4 	bl	8001ecc <global_stdio_init.part.0>
 8001f44:	e7f2      	b.n	8001f2c <__sinit+0xc>
 8001f46:	bf00      	nop
 8001f48:	08001e8d 	.word	0x08001e8d
 8001f4c:	2000020c 	.word	0x2000020c

08001f50 <_fwalk_sglue>:
 8001f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f54:	4607      	mov	r7, r0
 8001f56:	4688      	mov	r8, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f60:	f1b9 0901 	subs.w	r9, r9, #1
 8001f64:	d505      	bpl.n	8001f72 <_fwalk_sglue+0x22>
 8001f66:	6824      	ldr	r4, [r4, #0]
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d1f7      	bne.n	8001f5c <_fwalk_sglue+0xc>
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f72:	89ab      	ldrh	r3, [r5, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d907      	bls.n	8001f88 <_fwalk_sglue+0x38>
 8001f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	d003      	beq.n	8001f88 <_fwalk_sglue+0x38>
 8001f80:	4629      	mov	r1, r5
 8001f82:	4638      	mov	r0, r7
 8001f84:	47c0      	blx	r8
 8001f86:	4306      	orrs	r6, r0
 8001f88:	3568      	adds	r5, #104	@ 0x68
 8001f8a:	e7e9      	b.n	8001f60 <_fwalk_sglue+0x10>

08001f8c <_puts_r>:
 8001f8c:	6a03      	ldr	r3, [r0, #32]
 8001f8e:	b570      	push	{r4, r5, r6, lr}
 8001f90:	4605      	mov	r5, r0
 8001f92:	460e      	mov	r6, r1
 8001f94:	6884      	ldr	r4, [r0, #8]
 8001f96:	b90b      	cbnz	r3, 8001f9c <_puts_r+0x10>
 8001f98:	f7ff ffc2 	bl	8001f20 <__sinit>
 8001f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f9e:	07db      	lsls	r3, r3, #31
 8001fa0:	d405      	bmi.n	8001fae <_puts_r+0x22>
 8001fa2:	89a3      	ldrh	r3, [r4, #12]
 8001fa4:	0598      	lsls	r0, r3, #22
 8001fa6:	d402      	bmi.n	8001fae <_puts_r+0x22>
 8001fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001faa:	f000 f99e 	bl	80022ea <__retarget_lock_acquire_recursive>
 8001fae:	89a3      	ldrh	r3, [r4, #12]
 8001fb0:	0719      	lsls	r1, r3, #28
 8001fb2:	d502      	bpl.n	8001fba <_puts_r+0x2e>
 8001fb4:	6923      	ldr	r3, [r4, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d135      	bne.n	8002026 <_puts_r+0x9a>
 8001fba:	4621      	mov	r1, r4
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 f8c5 	bl	800214c <__swsetup_r>
 8001fc2:	b380      	cbz	r0, 8002026 <_puts_r+0x9a>
 8001fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8001fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001fca:	07da      	lsls	r2, r3, #31
 8001fcc:	d405      	bmi.n	8001fda <_puts_r+0x4e>
 8001fce:	89a3      	ldrh	r3, [r4, #12]
 8001fd0:	059b      	lsls	r3, r3, #22
 8001fd2:	d402      	bmi.n	8001fda <_puts_r+0x4e>
 8001fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fd6:	f000 f989 	bl	80022ec <__retarget_lock_release_recursive>
 8001fda:	4628      	mov	r0, r5
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da04      	bge.n	8001fec <_puts_r+0x60>
 8001fe2:	69a2      	ldr	r2, [r4, #24]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dc17      	bgt.n	8002018 <_puts_r+0x8c>
 8001fe8:	290a      	cmp	r1, #10
 8001fea:	d015      	beq.n	8002018 <_puts_r+0x8c>
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	6022      	str	r2, [r4, #0]
 8001ff2:	7019      	strb	r1, [r3, #0]
 8001ff4:	68a3      	ldr	r3, [r4, #8]
 8001ff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60a3      	str	r3, [r4, #8]
 8001ffe:	2900      	cmp	r1, #0
 8002000:	d1ed      	bne.n	8001fde <_puts_r+0x52>
 8002002:	2b00      	cmp	r3, #0
 8002004:	da11      	bge.n	800202a <_puts_r+0x9e>
 8002006:	4622      	mov	r2, r4
 8002008:	210a      	movs	r1, #10
 800200a:	4628      	mov	r0, r5
 800200c:	f000 f85f 	bl	80020ce <__swbuf_r>
 8002010:	3001      	adds	r0, #1
 8002012:	d0d7      	beq.n	8001fc4 <_puts_r+0x38>
 8002014:	250a      	movs	r5, #10
 8002016:	e7d7      	b.n	8001fc8 <_puts_r+0x3c>
 8002018:	4622      	mov	r2, r4
 800201a:	4628      	mov	r0, r5
 800201c:	f000 f857 	bl	80020ce <__swbuf_r>
 8002020:	3001      	adds	r0, #1
 8002022:	d1e7      	bne.n	8001ff4 <_puts_r+0x68>
 8002024:	e7ce      	b.n	8001fc4 <_puts_r+0x38>
 8002026:	3e01      	subs	r6, #1
 8002028:	e7e4      	b.n	8001ff4 <_puts_r+0x68>
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	6022      	str	r2, [r4, #0]
 8002030:	220a      	movs	r2, #10
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e7ee      	b.n	8002014 <_puts_r+0x88>
	...

08002038 <puts>:
 8002038:	4b02      	ldr	r3, [pc, #8]	@ (8002044 <puts+0xc>)
 800203a:	4601      	mov	r1, r0
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	f7ff bfa5 	b.w	8001f8c <_puts_r>
 8002042:	bf00      	nop
 8002044:	20000018 	.word	0x20000018

08002048 <__sread>:
 8002048:	b510      	push	{r4, lr}
 800204a:	460c      	mov	r4, r1
 800204c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002050:	f000 f8fc 	bl	800224c <_read_r>
 8002054:	2800      	cmp	r0, #0
 8002056:	bfab      	itete	ge
 8002058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800205a:	89a3      	ldrhlt	r3, [r4, #12]
 800205c:	181b      	addge	r3, r3, r0
 800205e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002062:	bfac      	ite	ge
 8002064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002066:	81a3      	strhlt	r3, [r4, #12]
 8002068:	bd10      	pop	{r4, pc}

0800206a <__swrite>:
 800206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800206e:	461f      	mov	r7, r3
 8002070:	898b      	ldrh	r3, [r1, #12]
 8002072:	4605      	mov	r5, r0
 8002074:	05db      	lsls	r3, r3, #23
 8002076:	460c      	mov	r4, r1
 8002078:	4616      	mov	r6, r2
 800207a:	d505      	bpl.n	8002088 <__swrite+0x1e>
 800207c:	2302      	movs	r3, #2
 800207e:	2200      	movs	r2, #0
 8002080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002084:	f000 f8d0 	bl	8002228 <_lseek_r>
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	4632      	mov	r2, r6
 800208c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	4628      	mov	r0, r5
 8002094:	463b      	mov	r3, r7
 8002096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800209a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800209e:	f000 b8e7 	b.w	8002270 <_write_r>

080020a2 <__sseek>:
 80020a2:	b510      	push	{r4, lr}
 80020a4:	460c      	mov	r4, r1
 80020a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020aa:	f000 f8bd 	bl	8002228 <_lseek_r>
 80020ae:	1c43      	adds	r3, r0, #1
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	bf15      	itete	ne
 80020b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80020b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80020ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80020be:	81a3      	strheq	r3, [r4, #12]
 80020c0:	bf18      	it	ne
 80020c2:	81a3      	strhne	r3, [r4, #12]
 80020c4:	bd10      	pop	{r4, pc}

080020c6 <__sclose>:
 80020c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ca:	f000 b89d 	b.w	8002208 <_close_r>

080020ce <__swbuf_r>:
 80020ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d0:	460e      	mov	r6, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	4605      	mov	r5, r0
 80020d6:	b118      	cbz	r0, 80020e0 <__swbuf_r+0x12>
 80020d8:	6a03      	ldr	r3, [r0, #32]
 80020da:	b90b      	cbnz	r3, 80020e0 <__swbuf_r+0x12>
 80020dc:	f7ff ff20 	bl	8001f20 <__sinit>
 80020e0:	69a3      	ldr	r3, [r4, #24]
 80020e2:	60a3      	str	r3, [r4, #8]
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	071a      	lsls	r2, r3, #28
 80020e8:	d501      	bpl.n	80020ee <__swbuf_r+0x20>
 80020ea:	6923      	ldr	r3, [r4, #16]
 80020ec:	b943      	cbnz	r3, 8002100 <__swbuf_r+0x32>
 80020ee:	4621      	mov	r1, r4
 80020f0:	4628      	mov	r0, r5
 80020f2:	f000 f82b 	bl	800214c <__swsetup_r>
 80020f6:	b118      	cbz	r0, 8002100 <__swbuf_r+0x32>
 80020f8:	f04f 37ff 	mov.w	r7, #4294967295
 80020fc:	4638      	mov	r0, r7
 80020fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	6922      	ldr	r2, [r4, #16]
 8002104:	b2f6      	uxtb	r6, r6
 8002106:	1a98      	subs	r0, r3, r2
 8002108:	6963      	ldr	r3, [r4, #20]
 800210a:	4637      	mov	r7, r6
 800210c:	4283      	cmp	r3, r0
 800210e:	dc05      	bgt.n	800211c <__swbuf_r+0x4e>
 8002110:	4621      	mov	r1, r4
 8002112:	4628      	mov	r0, r5
 8002114:	f000 fa62 	bl	80025dc <_fflush_r>
 8002118:	2800      	cmp	r0, #0
 800211a:	d1ed      	bne.n	80020f8 <__swbuf_r+0x2a>
 800211c:	68a3      	ldr	r3, [r4, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	60a3      	str	r3, [r4, #8]
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	6022      	str	r2, [r4, #0]
 8002128:	701e      	strb	r6, [r3, #0]
 800212a:	6962      	ldr	r2, [r4, #20]
 800212c:	1c43      	adds	r3, r0, #1
 800212e:	429a      	cmp	r2, r3
 8002130:	d004      	beq.n	800213c <__swbuf_r+0x6e>
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	07db      	lsls	r3, r3, #31
 8002136:	d5e1      	bpl.n	80020fc <__swbuf_r+0x2e>
 8002138:	2e0a      	cmp	r6, #10
 800213a:	d1df      	bne.n	80020fc <__swbuf_r+0x2e>
 800213c:	4621      	mov	r1, r4
 800213e:	4628      	mov	r0, r5
 8002140:	f000 fa4c 	bl	80025dc <_fflush_r>
 8002144:	2800      	cmp	r0, #0
 8002146:	d0d9      	beq.n	80020fc <__swbuf_r+0x2e>
 8002148:	e7d6      	b.n	80020f8 <__swbuf_r+0x2a>
	...

0800214c <__swsetup_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <__swsetup_r+0xa8>)
 8002150:	4605      	mov	r5, r0
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	460c      	mov	r4, r1
 8002156:	b118      	cbz	r0, 8002160 <__swsetup_r+0x14>
 8002158:	6a03      	ldr	r3, [r0, #32]
 800215a:	b90b      	cbnz	r3, 8002160 <__swsetup_r+0x14>
 800215c:	f7ff fee0 	bl	8001f20 <__sinit>
 8002160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002164:	0719      	lsls	r1, r3, #28
 8002166:	d422      	bmi.n	80021ae <__swsetup_r+0x62>
 8002168:	06da      	lsls	r2, r3, #27
 800216a:	d407      	bmi.n	800217c <__swsetup_r+0x30>
 800216c:	2209      	movs	r2, #9
 800216e:	602a      	str	r2, [r5, #0]
 8002170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	81a3      	strh	r3, [r4, #12]
 800217a:	e033      	b.n	80021e4 <__swsetup_r+0x98>
 800217c:	0758      	lsls	r0, r3, #29
 800217e:	d512      	bpl.n	80021a6 <__swsetup_r+0x5a>
 8002180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002182:	b141      	cbz	r1, 8002196 <__swsetup_r+0x4a>
 8002184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002188:	4299      	cmp	r1, r3
 800218a:	d002      	beq.n	8002192 <__swsetup_r+0x46>
 800218c:	4628      	mov	r0, r5
 800218e:	f000 f8af 	bl	80022f0 <_free_r>
 8002192:	2300      	movs	r3, #0
 8002194:	6363      	str	r3, [r4, #52]	@ 0x34
 8002196:	89a3      	ldrh	r3, [r4, #12]
 8002198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800219c:	81a3      	strh	r3, [r4, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	6063      	str	r3, [r4, #4]
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	6023      	str	r3, [r4, #0]
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	81a3      	strh	r3, [r4, #12]
 80021ae:	6923      	ldr	r3, [r4, #16]
 80021b0:	b94b      	cbnz	r3, 80021c6 <__swsetup_r+0x7a>
 80021b2:	89a3      	ldrh	r3, [r4, #12]
 80021b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80021b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021bc:	d003      	beq.n	80021c6 <__swsetup_r+0x7a>
 80021be:	4621      	mov	r1, r4
 80021c0:	4628      	mov	r0, r5
 80021c2:	f000 fa58 	bl	8002676 <__smakebuf_r>
 80021c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ca:	f013 0201 	ands.w	r2, r3, #1
 80021ce:	d00a      	beq.n	80021e6 <__swsetup_r+0x9a>
 80021d0:	2200      	movs	r2, #0
 80021d2:	60a2      	str	r2, [r4, #8]
 80021d4:	6962      	ldr	r2, [r4, #20]
 80021d6:	4252      	negs	r2, r2
 80021d8:	61a2      	str	r2, [r4, #24]
 80021da:	6922      	ldr	r2, [r4, #16]
 80021dc:	b942      	cbnz	r2, 80021f0 <__swsetup_r+0xa4>
 80021de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80021e2:	d1c5      	bne.n	8002170 <__swsetup_r+0x24>
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	0799      	lsls	r1, r3, #30
 80021e8:	bf58      	it	pl
 80021ea:	6962      	ldrpl	r2, [r4, #20]
 80021ec:	60a2      	str	r2, [r4, #8]
 80021ee:	e7f4      	b.n	80021da <__swsetup_r+0x8e>
 80021f0:	2000      	movs	r0, #0
 80021f2:	e7f7      	b.n	80021e4 <__swsetup_r+0x98>
 80021f4:	20000018 	.word	0x20000018

080021f8 <memset>:
 80021f8:	4603      	mov	r3, r0
 80021fa:	4402      	add	r2, r0
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d100      	bne.n	8002202 <memset+0xa>
 8002200:	4770      	bx	lr
 8002202:	f803 1b01 	strb.w	r1, [r3], #1
 8002206:	e7f9      	b.n	80021fc <memset+0x4>

08002208 <_close_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	2300      	movs	r3, #0
 800220c:	4d05      	ldr	r5, [pc, #20]	@ (8002224 <_close_r+0x1c>)
 800220e:	4604      	mov	r4, r0
 8002210:	4608      	mov	r0, r1
 8002212:	602b      	str	r3, [r5, #0]
 8002214:	f7fe fb41 	bl	800089a <_close>
 8002218:	1c43      	adds	r3, r0, #1
 800221a:	d102      	bne.n	8002222 <_close_r+0x1a>
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	b103      	cbz	r3, 8002222 <_close_r+0x1a>
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	20000210 	.word	0x20000210

08002228 <_lseek_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4604      	mov	r4, r0
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	2200      	movs	r2, #0
 8002232:	4d05      	ldr	r5, [pc, #20]	@ (8002248 <_lseek_r+0x20>)
 8002234:	602a      	str	r2, [r5, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	f7fe fb53 	bl	80008e2 <_lseek>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_lseek_r+0x1e>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_lseek_r+0x1e>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000210 	.word	0x20000210

0800224c <_read_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	2200      	movs	r2, #0
 8002256:	4d05      	ldr	r5, [pc, #20]	@ (800226c <_read_r+0x20>)
 8002258:	602a      	str	r2, [r5, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f7fe fb00 	bl	8000860 <_read>
 8002260:	1c43      	adds	r3, r0, #1
 8002262:	d102      	bne.n	800226a <_read_r+0x1e>
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	b103      	cbz	r3, 800226a <_read_r+0x1e>
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	20000210 	.word	0x20000210

08002270 <_write_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4604      	mov	r4, r0
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	2200      	movs	r2, #0
 800227a:	4d05      	ldr	r5, [pc, #20]	@ (8002290 <_write_r+0x20>)
 800227c:	602a      	str	r2, [r5, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f7fe fa2c 	bl	80006dc <_write>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_write_r+0x1e>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	b103      	cbz	r3, 800228e <_write_r+0x1e>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000210 	.word	0x20000210

08002294 <__errno>:
 8002294:	4b01      	ldr	r3, [pc, #4]	@ (800229c <__errno+0x8>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000018 	.word	0x20000018

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2600      	movs	r6, #0
 80022a4:	4d0c      	ldr	r5, [pc, #48]	@ (80022d8 <__libc_init_array+0x38>)
 80022a6:	4c0d      	ldr	r4, [pc, #52]	@ (80022dc <__libc_init_array+0x3c>)
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	42a6      	cmp	r6, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	f000 fa50 	bl	8002754 <_init>
 80022b4:	2600      	movs	r6, #0
 80022b6:	4d0a      	ldr	r5, [pc, #40]	@ (80022e0 <__libc_init_array+0x40>)
 80022b8:	4c0a      	ldr	r4, [pc, #40]	@ (80022e4 <__libc_init_array+0x44>)
 80022ba:	1b64      	subs	r4, r4, r5
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	42a6      	cmp	r6, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c8:	4798      	blx	r3
 80022ca:	3601      	adds	r6, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d2:	4798      	blx	r3
 80022d4:	3601      	adds	r6, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	080027a0 	.word	0x080027a0
 80022dc:	080027a0 	.word	0x080027a0
 80022e0:	080027a0 	.word	0x080027a0
 80022e4:	080027a4 	.word	0x080027a4

080022e8 <__retarget_lock_init_recursive>:
 80022e8:	4770      	bx	lr

080022ea <__retarget_lock_acquire_recursive>:
 80022ea:	4770      	bx	lr

080022ec <__retarget_lock_release_recursive>:
 80022ec:	4770      	bx	lr
	...

080022f0 <_free_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4605      	mov	r5, r0
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d040      	beq.n	800237a <_free_r+0x8a>
 80022f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022fc:	1f0c      	subs	r4, r1, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	18e4      	addlt	r4, r4, r3
 8002304:	f000 f8de 	bl	80024c4 <__malloc_lock>
 8002308:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <_free_r+0x8c>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	b933      	cbnz	r3, 800231c <_free_r+0x2c>
 800230e:	6063      	str	r3, [r4, #4]
 8002310:	6014      	str	r4, [r2, #0]
 8002312:	4628      	mov	r0, r5
 8002314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002318:	f000 b8da 	b.w	80024d0 <__malloc_unlock>
 800231c:	42a3      	cmp	r3, r4
 800231e:	d908      	bls.n	8002332 <_free_r+0x42>
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	1821      	adds	r1, r4, r0
 8002324:	428b      	cmp	r3, r1
 8002326:	bf01      	itttt	eq
 8002328:	6819      	ldreq	r1, [r3, #0]
 800232a:	685b      	ldreq	r3, [r3, #4]
 800232c:	1809      	addeq	r1, r1, r0
 800232e:	6021      	streq	r1, [r4, #0]
 8002330:	e7ed      	b.n	800230e <_free_r+0x1e>
 8002332:	461a      	mov	r2, r3
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	b10b      	cbz	r3, 800233c <_free_r+0x4c>
 8002338:	42a3      	cmp	r3, r4
 800233a:	d9fa      	bls.n	8002332 <_free_r+0x42>
 800233c:	6811      	ldr	r1, [r2, #0]
 800233e:	1850      	adds	r0, r2, r1
 8002340:	42a0      	cmp	r0, r4
 8002342:	d10b      	bne.n	800235c <_free_r+0x6c>
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	4401      	add	r1, r0
 8002348:	1850      	adds	r0, r2, r1
 800234a:	4283      	cmp	r3, r0
 800234c:	6011      	str	r1, [r2, #0]
 800234e:	d1e0      	bne.n	8002312 <_free_r+0x22>
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4408      	add	r0, r1
 8002356:	6010      	str	r0, [r2, #0]
 8002358:	6053      	str	r3, [r2, #4]
 800235a:	e7da      	b.n	8002312 <_free_r+0x22>
 800235c:	d902      	bls.n	8002364 <_free_r+0x74>
 800235e:	230c      	movs	r3, #12
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	e7d6      	b.n	8002312 <_free_r+0x22>
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	1821      	adds	r1, r4, r0
 8002368:	428b      	cmp	r3, r1
 800236a:	bf01      	itttt	eq
 800236c:	6819      	ldreq	r1, [r3, #0]
 800236e:	685b      	ldreq	r3, [r3, #4]
 8002370:	1809      	addeq	r1, r1, r0
 8002372:	6021      	streq	r1, [r4, #0]
 8002374:	6063      	str	r3, [r4, #4]
 8002376:	6054      	str	r4, [r2, #4]
 8002378:	e7cb      	b.n	8002312 <_free_r+0x22>
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	2000021c 	.word	0x2000021c

08002380 <sbrk_aligned>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4e0f      	ldr	r6, [pc, #60]	@ (80023c0 <sbrk_aligned+0x40>)
 8002384:	460c      	mov	r4, r1
 8002386:	6831      	ldr	r1, [r6, #0]
 8002388:	4605      	mov	r5, r0
 800238a:	b911      	cbnz	r1, 8002392 <sbrk_aligned+0x12>
 800238c:	f000 f9d2 	bl	8002734 <_sbrk_r>
 8002390:	6030      	str	r0, [r6, #0]
 8002392:	4621      	mov	r1, r4
 8002394:	4628      	mov	r0, r5
 8002396:	f000 f9cd 	bl	8002734 <_sbrk_r>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	d103      	bne.n	80023a6 <sbrk_aligned+0x26>
 800239e:	f04f 34ff 	mov.w	r4, #4294967295
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	1cc4      	adds	r4, r0, #3
 80023a8:	f024 0403 	bic.w	r4, r4, #3
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d0f8      	beq.n	80023a2 <sbrk_aligned+0x22>
 80023b0:	1a21      	subs	r1, r4, r0
 80023b2:	4628      	mov	r0, r5
 80023b4:	f000 f9be 	bl	8002734 <_sbrk_r>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d1f2      	bne.n	80023a2 <sbrk_aligned+0x22>
 80023bc:	e7ef      	b.n	800239e <sbrk_aligned+0x1e>
 80023be:	bf00      	nop
 80023c0:	20000218 	.word	0x20000218

080023c4 <_malloc_r>:
 80023c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023c8:	1ccd      	adds	r5, r1, #3
 80023ca:	f025 0503 	bic.w	r5, r5, #3
 80023ce:	3508      	adds	r5, #8
 80023d0:	2d0c      	cmp	r5, #12
 80023d2:	bf38      	it	cc
 80023d4:	250c      	movcc	r5, #12
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	4606      	mov	r6, r0
 80023da:	db01      	blt.n	80023e0 <_malloc_r+0x1c>
 80023dc:	42a9      	cmp	r1, r5
 80023de:	d904      	bls.n	80023ea <_malloc_r+0x26>
 80023e0:	230c      	movs	r3, #12
 80023e2:	6033      	str	r3, [r6, #0]
 80023e4:	2000      	movs	r0, #0
 80023e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024c0 <_malloc_r+0xfc>
 80023ee:	f000 f869 	bl	80024c4 <__malloc_lock>
 80023f2:	f8d8 3000 	ldr.w	r3, [r8]
 80023f6:	461c      	mov	r4, r3
 80023f8:	bb44      	cbnz	r4, 800244c <_malloc_r+0x88>
 80023fa:	4629      	mov	r1, r5
 80023fc:	4630      	mov	r0, r6
 80023fe:	f7ff ffbf 	bl	8002380 <sbrk_aligned>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	4604      	mov	r4, r0
 8002406:	d158      	bne.n	80024ba <_malloc_r+0xf6>
 8002408:	f8d8 4000 	ldr.w	r4, [r8]
 800240c:	4627      	mov	r7, r4
 800240e:	2f00      	cmp	r7, #0
 8002410:	d143      	bne.n	800249a <_malloc_r+0xd6>
 8002412:	2c00      	cmp	r4, #0
 8002414:	d04b      	beq.n	80024ae <_malloc_r+0xea>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	4639      	mov	r1, r7
 800241a:	4630      	mov	r0, r6
 800241c:	eb04 0903 	add.w	r9, r4, r3
 8002420:	f000 f988 	bl	8002734 <_sbrk_r>
 8002424:	4581      	cmp	r9, r0
 8002426:	d142      	bne.n	80024ae <_malloc_r+0xea>
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	4630      	mov	r0, r6
 800242c:	1a6d      	subs	r5, r5, r1
 800242e:	4629      	mov	r1, r5
 8002430:	f7ff ffa6 	bl	8002380 <sbrk_aligned>
 8002434:	3001      	adds	r0, #1
 8002436:	d03a      	beq.n	80024ae <_malloc_r+0xea>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	442b      	add	r3, r5
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	f8d8 3000 	ldr.w	r3, [r8]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	bb62      	cbnz	r2, 80024a0 <_malloc_r+0xdc>
 8002446:	f8c8 7000 	str.w	r7, [r8]
 800244a:	e00f      	b.n	800246c <_malloc_r+0xa8>
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	1b52      	subs	r2, r2, r5
 8002450:	d420      	bmi.n	8002494 <_malloc_r+0xd0>
 8002452:	2a0b      	cmp	r2, #11
 8002454:	d917      	bls.n	8002486 <_malloc_r+0xc2>
 8002456:	1961      	adds	r1, r4, r5
 8002458:	42a3      	cmp	r3, r4
 800245a:	6025      	str	r5, [r4, #0]
 800245c:	bf18      	it	ne
 800245e:	6059      	strne	r1, [r3, #4]
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	bf08      	it	eq
 8002464:	f8c8 1000 	streq.w	r1, [r8]
 8002468:	5162      	str	r2, [r4, r5]
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	4630      	mov	r0, r6
 800246e:	f000 f82f 	bl	80024d0 <__malloc_unlock>
 8002472:	f104 000b 	add.w	r0, r4, #11
 8002476:	1d23      	adds	r3, r4, #4
 8002478:	f020 0007 	bic.w	r0, r0, #7
 800247c:	1ac2      	subs	r2, r0, r3
 800247e:	bf1c      	itt	ne
 8002480:	1a1b      	subne	r3, r3, r0
 8002482:	50a3      	strne	r3, [r4, r2]
 8002484:	e7af      	b.n	80023e6 <_malloc_r+0x22>
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	42a3      	cmp	r3, r4
 800248a:	bf0c      	ite	eq
 800248c:	f8c8 2000 	streq.w	r2, [r8]
 8002490:	605a      	strne	r2, [r3, #4]
 8002492:	e7eb      	b.n	800246c <_malloc_r+0xa8>
 8002494:	4623      	mov	r3, r4
 8002496:	6864      	ldr	r4, [r4, #4]
 8002498:	e7ae      	b.n	80023f8 <_malloc_r+0x34>
 800249a:	463c      	mov	r4, r7
 800249c:	687f      	ldr	r7, [r7, #4]
 800249e:	e7b6      	b.n	800240e <_malloc_r+0x4a>
 80024a0:	461a      	mov	r2, r3
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	42a3      	cmp	r3, r4
 80024a6:	d1fb      	bne.n	80024a0 <_malloc_r+0xdc>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e7de      	b.n	800246c <_malloc_r+0xa8>
 80024ae:	230c      	movs	r3, #12
 80024b0:	4630      	mov	r0, r6
 80024b2:	6033      	str	r3, [r6, #0]
 80024b4:	f000 f80c 	bl	80024d0 <__malloc_unlock>
 80024b8:	e794      	b.n	80023e4 <_malloc_r+0x20>
 80024ba:	6005      	str	r5, [r0, #0]
 80024bc:	e7d6      	b.n	800246c <_malloc_r+0xa8>
 80024be:	bf00      	nop
 80024c0:	2000021c 	.word	0x2000021c

080024c4 <__malloc_lock>:
 80024c4:	4801      	ldr	r0, [pc, #4]	@ (80024cc <__malloc_lock+0x8>)
 80024c6:	f7ff bf10 	b.w	80022ea <__retarget_lock_acquire_recursive>
 80024ca:	bf00      	nop
 80024cc:	20000214 	.word	0x20000214

080024d0 <__malloc_unlock>:
 80024d0:	4801      	ldr	r0, [pc, #4]	@ (80024d8 <__malloc_unlock+0x8>)
 80024d2:	f7ff bf0b 	b.w	80022ec <__retarget_lock_release_recursive>
 80024d6:	bf00      	nop
 80024d8:	20000214 	.word	0x20000214

080024dc <__sflush_r>:
 80024dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	0716      	lsls	r6, r2, #28
 80024e4:	4605      	mov	r5, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	d454      	bmi.n	8002594 <__sflush_r+0xb8>
 80024ea:	684b      	ldr	r3, [r1, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dc02      	bgt.n	80024f6 <__sflush_r+0x1a>
 80024f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	dd48      	ble.n	8002588 <__sflush_r+0xac>
 80024f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	d045      	beq.n	8002588 <__sflush_r+0xac>
 80024fc:	2300      	movs	r3, #0
 80024fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002502:	682f      	ldr	r7, [r5, #0]
 8002504:	6a21      	ldr	r1, [r4, #32]
 8002506:	602b      	str	r3, [r5, #0]
 8002508:	d030      	beq.n	800256c <__sflush_r+0x90>
 800250a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800250c:	89a3      	ldrh	r3, [r4, #12]
 800250e:	0759      	lsls	r1, r3, #29
 8002510:	d505      	bpl.n	800251e <__sflush_r+0x42>
 8002512:	6863      	ldr	r3, [r4, #4]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002518:	b10b      	cbz	r3, 800251e <__sflush_r+0x42>
 800251a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800251c:	1ad2      	subs	r2, r2, r3
 800251e:	2300      	movs	r3, #0
 8002520:	4628      	mov	r0, r5
 8002522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002524:	6a21      	ldr	r1, [r4, #32]
 8002526:	47b0      	blx	r6
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	d106      	bne.n	800253c <__sflush_r+0x60>
 800252e:	6829      	ldr	r1, [r5, #0]
 8002530:	291d      	cmp	r1, #29
 8002532:	d82b      	bhi.n	800258c <__sflush_r+0xb0>
 8002534:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <__sflush_r+0xfc>)
 8002536:	40ca      	lsrs	r2, r1
 8002538:	07d6      	lsls	r6, r2, #31
 800253a:	d527      	bpl.n	800258c <__sflush_r+0xb0>
 800253c:	2200      	movs	r2, #0
 800253e:	6062      	str	r2, [r4, #4]
 8002540:	6922      	ldr	r2, [r4, #16]
 8002542:	04d9      	lsls	r1, r3, #19
 8002544:	6022      	str	r2, [r4, #0]
 8002546:	d504      	bpl.n	8002552 <__sflush_r+0x76>
 8002548:	1c42      	adds	r2, r0, #1
 800254a:	d101      	bne.n	8002550 <__sflush_r+0x74>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b903      	cbnz	r3, 8002552 <__sflush_r+0x76>
 8002550:	6560      	str	r0, [r4, #84]	@ 0x54
 8002552:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002554:	602f      	str	r7, [r5, #0]
 8002556:	b1b9      	cbz	r1, 8002588 <__sflush_r+0xac>
 8002558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800255c:	4299      	cmp	r1, r3
 800255e:	d002      	beq.n	8002566 <__sflush_r+0x8a>
 8002560:	4628      	mov	r0, r5
 8002562:	f7ff fec5 	bl	80022f0 <_free_r>
 8002566:	2300      	movs	r3, #0
 8002568:	6363      	str	r3, [r4, #52]	@ 0x34
 800256a:	e00d      	b.n	8002588 <__sflush_r+0xac>
 800256c:	2301      	movs	r3, #1
 800256e:	4628      	mov	r0, r5
 8002570:	47b0      	blx	r6
 8002572:	4602      	mov	r2, r0
 8002574:	1c50      	adds	r0, r2, #1
 8002576:	d1c9      	bne.n	800250c <__sflush_r+0x30>
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0c6      	beq.n	800250c <__sflush_r+0x30>
 800257e:	2b1d      	cmp	r3, #29
 8002580:	d001      	beq.n	8002586 <__sflush_r+0xaa>
 8002582:	2b16      	cmp	r3, #22
 8002584:	d11d      	bne.n	80025c2 <__sflush_r+0xe6>
 8002586:	602f      	str	r7, [r5, #0]
 8002588:	2000      	movs	r0, #0
 800258a:	e021      	b.n	80025d0 <__sflush_r+0xf4>
 800258c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002590:	b21b      	sxth	r3, r3
 8002592:	e01a      	b.n	80025ca <__sflush_r+0xee>
 8002594:	690f      	ldr	r7, [r1, #16]
 8002596:	2f00      	cmp	r7, #0
 8002598:	d0f6      	beq.n	8002588 <__sflush_r+0xac>
 800259a:	0793      	lsls	r3, r2, #30
 800259c:	bf18      	it	ne
 800259e:	2300      	movne	r3, #0
 80025a0:	680e      	ldr	r6, [r1, #0]
 80025a2:	bf08      	it	eq
 80025a4:	694b      	ldreq	r3, [r1, #20]
 80025a6:	1bf6      	subs	r6, r6, r7
 80025a8:	600f      	str	r7, [r1, #0]
 80025aa:	608b      	str	r3, [r1, #8]
 80025ac:	2e00      	cmp	r6, #0
 80025ae:	ddeb      	ble.n	8002588 <__sflush_r+0xac>
 80025b0:	4633      	mov	r3, r6
 80025b2:	463a      	mov	r2, r7
 80025b4:	4628      	mov	r0, r5
 80025b6:	6a21      	ldr	r1, [r4, #32]
 80025b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80025bc:	47e0      	blx	ip
 80025be:	2800      	cmp	r0, #0
 80025c0:	dc07      	bgt.n	80025d2 <__sflush_r+0xf6>
 80025c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ca:	f04f 30ff 	mov.w	r0, #4294967295
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025d2:	4407      	add	r7, r0
 80025d4:	1a36      	subs	r6, r6, r0
 80025d6:	e7e9      	b.n	80025ac <__sflush_r+0xd0>
 80025d8:	20400001 	.word	0x20400001

080025dc <_fflush_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	690b      	ldr	r3, [r1, #16]
 80025e0:	4605      	mov	r5, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	b913      	cbnz	r3, 80025ec <_fflush_r+0x10>
 80025e6:	2500      	movs	r5, #0
 80025e8:	4628      	mov	r0, r5
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	b118      	cbz	r0, 80025f6 <_fflush_r+0x1a>
 80025ee:	6a03      	ldr	r3, [r0, #32]
 80025f0:	b90b      	cbnz	r3, 80025f6 <_fflush_r+0x1a>
 80025f2:	f7ff fc95 	bl	8001f20 <__sinit>
 80025f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f3      	beq.n	80025e6 <_fflush_r+0xa>
 80025fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002600:	07d0      	lsls	r0, r2, #31
 8002602:	d404      	bmi.n	800260e <_fflush_r+0x32>
 8002604:	0599      	lsls	r1, r3, #22
 8002606:	d402      	bmi.n	800260e <_fflush_r+0x32>
 8002608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800260a:	f7ff fe6e 	bl	80022ea <__retarget_lock_acquire_recursive>
 800260e:	4628      	mov	r0, r5
 8002610:	4621      	mov	r1, r4
 8002612:	f7ff ff63 	bl	80024dc <__sflush_r>
 8002616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002618:	4605      	mov	r5, r0
 800261a:	07da      	lsls	r2, r3, #31
 800261c:	d4e4      	bmi.n	80025e8 <_fflush_r+0xc>
 800261e:	89a3      	ldrh	r3, [r4, #12]
 8002620:	059b      	lsls	r3, r3, #22
 8002622:	d4e1      	bmi.n	80025e8 <_fflush_r+0xc>
 8002624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002626:	f7ff fe61 	bl	80022ec <__retarget_lock_release_recursive>
 800262a:	e7dd      	b.n	80025e8 <_fflush_r+0xc>

0800262c <__swhatbuf_r>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	460c      	mov	r4, r1
 8002630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002634:	4615      	mov	r5, r2
 8002636:	2900      	cmp	r1, #0
 8002638:	461e      	mov	r6, r3
 800263a:	b096      	sub	sp, #88	@ 0x58
 800263c:	da0c      	bge.n	8002658 <__swhatbuf_r+0x2c>
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	2100      	movs	r1, #0
 8002642:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002646:	bf14      	ite	ne
 8002648:	2340      	movne	r3, #64	@ 0x40
 800264a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800264e:	2000      	movs	r0, #0
 8002650:	6031      	str	r1, [r6, #0]
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	b016      	add	sp, #88	@ 0x58
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	466a      	mov	r2, sp
 800265a:	f000 f849 	bl	80026f0 <_fstat_r>
 800265e:	2800      	cmp	r0, #0
 8002660:	dbed      	blt.n	800263e <__swhatbuf_r+0x12>
 8002662:	9901      	ldr	r1, [sp, #4]
 8002664:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002668:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800266c:	4259      	negs	r1, r3
 800266e:	4159      	adcs	r1, r3
 8002670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002674:	e7eb      	b.n	800264e <__swhatbuf_r+0x22>

08002676 <__smakebuf_r>:
 8002676:	898b      	ldrh	r3, [r1, #12]
 8002678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800267a:	079d      	lsls	r5, r3, #30
 800267c:	4606      	mov	r6, r0
 800267e:	460c      	mov	r4, r1
 8002680:	d507      	bpl.n	8002692 <__smakebuf_r+0x1c>
 8002682:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002686:	6023      	str	r3, [r4, #0]
 8002688:	6123      	str	r3, [r4, #16]
 800268a:	2301      	movs	r3, #1
 800268c:	6163      	str	r3, [r4, #20]
 800268e:	b003      	add	sp, #12
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002692:	466a      	mov	r2, sp
 8002694:	ab01      	add	r3, sp, #4
 8002696:	f7ff ffc9 	bl	800262c <__swhatbuf_r>
 800269a:	9f00      	ldr	r7, [sp, #0]
 800269c:	4605      	mov	r5, r0
 800269e:	4639      	mov	r1, r7
 80026a0:	4630      	mov	r0, r6
 80026a2:	f7ff fe8f 	bl	80023c4 <_malloc_r>
 80026a6:	b948      	cbnz	r0, 80026bc <__smakebuf_r+0x46>
 80026a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ac:	059a      	lsls	r2, r3, #22
 80026ae:	d4ee      	bmi.n	800268e <__smakebuf_r+0x18>
 80026b0:	f023 0303 	bic.w	r3, r3, #3
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	e7e2      	b.n	8002682 <__smakebuf_r+0xc>
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80026c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c6:	81a3      	strh	r3, [r4, #12]
 80026c8:	9b01      	ldr	r3, [sp, #4]
 80026ca:	6020      	str	r0, [r4, #0]
 80026cc:	b15b      	cbz	r3, 80026e6 <__smakebuf_r+0x70>
 80026ce:	4630      	mov	r0, r6
 80026d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d4:	f000 f81e 	bl	8002714 <_isatty_r>
 80026d8:	b128      	cbz	r0, 80026e6 <__smakebuf_r+0x70>
 80026da:	89a3      	ldrh	r3, [r4, #12]
 80026dc:	f023 0303 	bic.w	r3, r3, #3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	81a3      	strh	r3, [r4, #12]
 80026e6:	89a3      	ldrh	r3, [r4, #12]
 80026e8:	431d      	orrs	r5, r3
 80026ea:	81a5      	strh	r5, [r4, #12]
 80026ec:	e7cf      	b.n	800268e <__smakebuf_r+0x18>
	...

080026f0 <_fstat_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	2300      	movs	r3, #0
 80026f4:	4d06      	ldr	r5, [pc, #24]	@ (8002710 <_fstat_r+0x20>)
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	f7fe f8d7 	bl	80008b0 <_fstat>
 8002702:	1c43      	adds	r3, r0, #1
 8002704:	d102      	bne.n	800270c <_fstat_r+0x1c>
 8002706:	682b      	ldr	r3, [r5, #0]
 8002708:	b103      	cbz	r3, 800270c <_fstat_r+0x1c>
 800270a:	6023      	str	r3, [r4, #0]
 800270c:	bd38      	pop	{r3, r4, r5, pc}
 800270e:	bf00      	nop
 8002710:	20000210 	.word	0x20000210

08002714 <_isatty_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	2300      	movs	r3, #0
 8002718:	4d05      	ldr	r5, [pc, #20]	@ (8002730 <_isatty_r+0x1c>)
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7fe f8d5 	bl	80008ce <_isatty>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_isatty_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_isatty_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	20000210 	.word	0x20000210

08002734 <_sbrk_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	2300      	movs	r3, #0
 8002738:	4d05      	ldr	r5, [pc, #20]	@ (8002750 <_sbrk_r+0x1c>)
 800273a:	4604      	mov	r4, r0
 800273c:	4608      	mov	r0, r1
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	f7fe f8dc 	bl	80008fc <_sbrk>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_sbrk_r+0x1a>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_sbrk_r+0x1a>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	20000210 	.word	0x20000210

08002754 <_init>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr

08002760 <_fini>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr
