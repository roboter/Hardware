
STM32F429-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc4c  0800bc4c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc4c  0800bc4c  0001bc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc54  0800bc54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800bc5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d14  20000090  0800bcec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008da4  0800bcec  00028da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299cf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006813  00000000  00000000  00049a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  000502a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb8  00000000  00000000  00052548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d33f  00000000  00000000  00054500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002be24  00000000  00000000  0008183f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a1a  00000000  00000000  000ad663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f07d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091d0  00000000  00000000  0019f0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bbb0 	.word	0x0800bbb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800bbb0 	.word	0x0800bbb0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <HAL_Init+0x40>)
 80004fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_Init+0x40>)
 800050a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_Init+0x40>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_Init+0x40>)
 8000516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f8fc 	bl	800071a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f00a fcce 	bl	800aec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f00a fca0 	bl	800ae6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40023c00 	.word	0x40023c00

08000538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x20>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	461a      	mov	r2, r3
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_IncTick+0x24>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4413      	add	r3, r2
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <HAL_IncTick+0x24>)
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000
 800055c:	200000ac 	.word	0x200000ac

08000560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return uwTick;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <HAL_GetTick+0x14>)
 8000566:	681b      	ldr	r3, [r3, #0]
}
 8000568:	4618      	mov	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200000ac 	.word	0x200000ac

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000580:	f7ff ffee 	bl	8000560 <HAL_GetTick>
 8000584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000590:	d005      	beq.n	800059e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_Delay+0x44>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059e:	bf00      	nop
 80005a0:	f7ff ffde 	bl	8000560 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d8f7      	bhi.n	80005a0 <HAL_Delay+0x28>
  {
  }
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db0b      	blt.n	800064e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 021f 	and.w	r2, r3, #31
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <__NVIC_EnableIRQ+0x38>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff ff4c 	bl	80005c0 <__NVIC_SetPriorityGrouping>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000742:	f7ff ff61 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	68b9      	ldr	r1, [r7, #8]
 800074c:	6978      	ldr	r0, [r7, #20]
 800074e:	f7ff ffb1 	bl	80006b4 <NVIC_EncodePriority>
 8000752:	4602      	mov	r2, r0
 8000754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <__NVIC_SetPriority>
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff54 	bl	8000624 <__NVIC_EnableIRQ>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e011      	b.n	80007ba <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d105      	bne.n	80007ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f009 fd0a 	bl	800a1c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2202      	movs	r2, #2
 80007b0:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2201      	movs	r2, #1
 80007b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e03b      	b.n	800084c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f009 fd3d 	bl	800a268 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2202      	movs	r2, #2
 80007f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	430a      	orrs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	f023 0107 	bic.w	r1, r3, #7
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800082c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	68d1      	ldr	r1, [r2, #12]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	430b      	orrs	r3, r1
 800083a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d026      	beq.n	80008c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087c:	2b00      	cmp	r3, #0
 800087e:	d021      	beq.n	80008c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800088e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000894:	f043 0201 	orr.w	r2, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2201      	movs	r2, #1
 80008a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2204      	movs	r2, #4
 80008a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d026      	beq.n	800091c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d021      	beq.n	800091c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80008e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2220      	movs	r2, #32
 80008ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008f4:	f043 0202 	orr.w	r2, r3, #2
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2204      	movs	r2, #4
 8000900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d003      	beq.n	800091c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	2b00      	cmp	r3, #0
 8000924:	d026      	beq.n	8000974 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092c:	2b00      	cmp	r3, #0
 800092e:	d021      	beq.n	8000974 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800093e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2208      	movs	r2, #8
 8000946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094c:	f043 0204 	orr.w	r2, r3, #4
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	2b00      	cmp	r3, #0
 800097c:	d013      	beq.n	80009a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00e      	beq.n	80009a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000996:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2204      	movs	r2, #4
 800099e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f853 	bl	8000a4c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d024      	beq.n	80009fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d01f      	beq.n	80009fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2202      	movs	r2, #2
 80009d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2201      	movs	r2, #1
 80009de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f003 0310 	and.w	r3, r3, #16
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d01f      	beq.n	8000a44 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d01a      	beq.n	8000a44 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2210      	movs	r2, #16
 8000a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f80e 	bl	8000a60 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <HAL_DMA2D_ConfigLayer+0x20>
 8000a90:	2302      	movs	r3, #2
 8000a92:	e079      	b.n	8000b88 <HAL_DMA2D_ConfigLayer+0x114>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	3318      	adds	r3, #24
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	4313      	orrs	r3, r2
 8000abc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HAL_DMA2D_ConfigLayer+0x120>)
 8000ac0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d003      	beq.n	8000ad2 <HAL_DMA2D_ConfigLayer+0x5e>
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d107      	bne.n	8000ae2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e005      	b.n	8000aee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	061b      	lsls	r3, r3, #24
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d120      	bne.n	8000b36 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	ea02 0103 	and.w	r1, r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	6812      	ldr	r2, [r2, #0]
 8000b14:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d003      	beq.n	8000b26 <HAL_DMA2D_ConfigLayer+0xb2>
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b09      	cmp	r3, #9
 8000b24:	d127      	bne.n	8000b76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
 8000b34:	e01f      	b.n	8000b76 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69da      	ldr	r2, [r3, #28]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	ea02 0103 	and.w	r1, r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b0a      	cmp	r3, #10
 8000b5e:	d003      	beq.n	8000b68 <HAL_DMA2D_ConfigLayer+0xf4>
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b09      	cmp	r3, #9
 8000b66:	d106      	bne.n	8000b76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b74:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	371c      	adds	r7, #28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	ff03000f 	.word	0xff03000f

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	e177      	b.n	8000ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	f040 8166 	bne.w	8000e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x4a>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d123      	bne.n	8000c2a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3208      	adds	r2, #8
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	08da      	lsrs	r2, r3, #3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3208      	adds	r2, #8
 8000c24:	69b9      	ldr	r1, [r7, #24]
 8000c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0203 	and.w	r2, r3, #3
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d00b      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c72:	2b11      	cmp	r3, #17
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d130      	bne.n	8000ce0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80c0 	beq.w	8000e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a65      	ldr	r2, [pc, #404]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_GPIO_Init+0x324>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3a:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a58      	ldr	r2, [pc, #352]	; (8000ec4 <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d037      	beq.n	8000dd6 <HAL_GPIO_Init+0x23e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0x23a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_GPIO_Init+0x334>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d02b      	beq.n	8000dce <HAL_GPIO_Init+0x236>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x338>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x232>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a54      	ldr	r2, [pc, #336]	; (8000ed4 <HAL_GPIO_Init+0x33c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x22e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a53      	ldr	r2, [pc, #332]	; (8000ed8 <HAL_GPIO_Init+0x340>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x22a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a52      	ldr	r2, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x344>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x226>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <HAL_GPIO_Init+0x348>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x222>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a50      	ldr	r2, [pc, #320]	; (8000ee4 <HAL_GPIO_Init+0x34c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x21e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	; (8000ee8 <HAL_GPIO_Init+0x350>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x21a>
 8000dae:	2309      	movs	r3, #9
 8000db0:	e012      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db2:	230a      	movs	r3, #10
 8000db4:	e010      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x240>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x328>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1a:	4a34      	ldr	r2, [pc, #208]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e20:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e44:	4a29      	ldr	r2, [pc, #164]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <HAL_GPIO_Init+0x354>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae84 	bls.w	8000bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40022400 	.word	0x40022400
 8000eec:	40013c00 	.word	0x40013c00

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	401a      	ands	r2, r3
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d104      	bne.n	8000f46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	041a      	lsls	r2, r3, #16
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b08f      	sub	sp, #60	; 0x3c
 8000f5c:	af0a      	add	r7, sp, #40	; 0x28
 8000f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e054      	b.n	8001014 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d106      	bne.n	8000f8a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f00a f9e5 	bl	800b354 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 ffb1 	bl	8004f10 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	687e      	ldr	r6, [r7, #4]
 8000fb6:	466d      	mov	r5, sp
 8000fb8:	f106 0410 	add.w	r4, r6, #16
 8000fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fcc:	1d33      	adds	r3, r6, #4
 8000fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd0:	6838      	ldr	r0, [r7, #0]
 8000fd2:	f003 ff2b 	bl	8004e2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 ffa8 	bl	8004f32 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	687e      	ldr	r6, [r7, #4]
 8000fea:	466d      	mov	r5, sp
 8000fec:	f106 0410 	add.w	r4, r6, #16
 8000ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ffc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001000:	1d33      	adds	r3, r6, #4
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f004 f8bb 	bl	8005180 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800101c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af04      	add	r7, sp, #16
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4603      	mov	r3, r0
 800102c:	70fb      	strb	r3, [r7, #3]
 800102e:	460b      	mov	r3, r1
 8001030:	70bb      	strb	r3, [r7, #2]
 8001032:	4613      	mov	r3, r2
 8001034:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_HCD_HC_Init+0x28>
 8001040:	2302      	movs	r3, #2
 8001042:	e07f      	b.n	8001144 <HAL_HCD_HC_Init+0x128>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	333d      	adds	r3, #61	; 0x3d
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001060:	78fa      	ldrb	r2, [r7, #3]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3338      	adds	r3, #56	; 0x38
 8001070:	787a      	ldrb	r2, [r7, #1]
 8001072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	3340      	adds	r3, #64	; 0x40
 8001084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001086:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3339      	adds	r3, #57	; 0x39
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	333f      	adds	r3, #63	; 0x3f
 80010ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	78bb      	ldrb	r3, [r7, #2]
 80010b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	333a      	adds	r3, #58	; 0x3a
 80010ca:	4602      	mov	r2, r0
 80010cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80010ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da0a      	bge.n	80010ec <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	333b      	adds	r3, #59	; 0x3b
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e009      	b.n	8001100 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	333b      	adds	r3, #59	; 0x3b
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	333c      	adds	r3, #60	; 0x3c
 8001110:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001114:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	787c      	ldrb	r4, [r7, #1]
 800111c:	78ba      	ldrb	r2, [r7, #2]
 800111e:	78f9      	ldrb	r1, [r7, #3]
 8001120:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4623      	mov	r3, r4
 8001132:	f004 f9a7 	bl	8005484 <USB_HC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}

0800114c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_HCD_HC_Halt+0x1e>
 8001166:	2302      	movs	r3, #2
 8001168:	e00f      	b.n	800118a <HAL_HCD_HC_Halt+0x3e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	78fa      	ldrb	r2, [r7, #3]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f004 fbdf 	bl	800593e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	333b      	adds	r3, #59	; 0x3b
 80011be:	78ba      	ldrb	r2, [r7, #2]
 80011c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80011c2:	78fa      	ldrb	r2, [r7, #3]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	333f      	adds	r3, #63	; 0x3f
 80011d2:	787a      	ldrb	r2, [r7, #1]
 80011d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	3342      	adds	r3, #66	; 0x42
 80011ec:	2203      	movs	r2, #3
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e009      	b.n	8001206 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3342      	adds	r3, #66	; 0x42
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001206:	787b      	ldrb	r3, [r7, #1]
 8001208:	2b03      	cmp	r3, #3
 800120a:	f200 80d6 	bhi.w	80013ba <HAL_HCD_HC_SubmitRequest+0x226>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001225 	.word	0x08001225
 8001218:	080013a5 	.word	0x080013a5
 800121c:	08001291 	.word	0x08001291
 8001220:	0800131b 	.word	0x0800131b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	2b01      	cmp	r3, #1
 8001228:	f040 80c9 	bne.w	80013be <HAL_HCD_HC_SubmitRequest+0x22a>
 800122c:	78bb      	ldrb	r3, [r7, #2]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80c5 	bne.w	80013be <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001234:	8b3b      	ldrh	r3, [r7, #24]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	3351      	adds	r3, #81	; 0x51
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3351      	adds	r3, #81	; 0x51
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10a      	bne.n	800127a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3342      	adds	r3, #66	; 0x42
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001278:	e0a1      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	3342      	adds	r3, #66	; 0x42
 800128a:	2202      	movs	r2, #2
 800128c:	701a      	strb	r2, [r3, #0]
      break;
 800128e:	e096      	b.n	80013be <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001290:	78bb      	ldrb	r3, [r7, #2]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d120      	bne.n	80012d8 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001296:	78fa      	ldrb	r2, [r7, #3]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3351      	adds	r3, #81	; 0x51
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10a      	bne.n	80012c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3342      	adds	r3, #66	; 0x42
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80012c0:	e07e      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3342      	adds	r3, #66	; 0x42
 80012d2:	2202      	movs	r2, #2
 80012d4:	701a      	strb	r2, [r3, #0]
      break;
 80012d6:	e073      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3350      	adds	r3, #80	; 0x50
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	3342      	adds	r3, #66	; 0x42
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
      break;
 8001302:	e05d      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001304:	78fa      	ldrb	r2, [r7, #3]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3342      	adds	r3, #66	; 0x42
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
      break;
 8001318:	e052      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800131a:	78bb      	ldrb	r3, [r7, #2]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d120      	bne.n	8001362 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3351      	adds	r3, #81	; 0x51
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	3342      	adds	r3, #66	; 0x42
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800134a:	e039      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800134c:	78fa      	ldrb	r2, [r7, #3]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3342      	adds	r3, #66	; 0x42
 800135c:	2202      	movs	r2, #2
 800135e:	701a      	strb	r2, [r3, #0]
      break;
 8001360:	e02e      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3350      	adds	r3, #80	; 0x50
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10a      	bne.n	800138e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001378:	78fa      	ldrb	r2, [r7, #3]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	3342      	adds	r3, #66	; 0x42
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
      break;
 800138c:	e018      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	3342      	adds	r3, #66	; 0x42
 800139e:	2202      	movs	r2, #2
 80013a0:	701a      	strb	r2, [r3, #0]
      break;
 80013a2:	e00d      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3342      	adds	r3, #66	; 0x42
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
      break;
 80013b8:	e002      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80013ba:	bf00      	nop
 80013bc:	e000      	b.n	80013c0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80013be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3344      	adds	r3, #68	; 0x44
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	8b39      	ldrh	r1, [r7, #24]
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4403      	add	r3, r0
 80013e4:	3348      	adds	r3, #72	; 0x48
 80013e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	335c      	adds	r3, #92	; 0x5c
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	334c      	adds	r3, #76	; 0x4c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001410:	78fa      	ldrb	r2, [r7, #3]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	440b      	add	r3, r1
 800141e:	3339      	adds	r3, #57	; 0x39
 8001420:	78fa      	ldrb	r2, [r7, #3]
 8001422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	335d      	adds	r3, #93	; 0x5d
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	3338      	adds	r3, #56	; 0x38
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	18d1      	adds	r1, r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	f004 f920 	bl	8005698 <USB_HC_StartXfer>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop

08001464 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fe3d 	bl	80050fa <USB_GetMode>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	f040 80f1 	bne.w	800166a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fe21 	bl	80050d4 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80e7 	beq.w	8001668 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fe18 	bl	80050d4 <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014ae:	d104      	bne.n	80014ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fe08 	bl	80050d4 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ce:	d104      	bne.n	80014da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fdf8 	bl	80050d4 <USB_ReadInterrupts>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014ee:	d104      	bne.n	80014fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 fde8 	bl	80050d4 <USB_ReadInterrupts>
 8001504:	4603      	mov	r3, r0
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d103      	bne.n	8001516 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2202      	movs	r2, #2
 8001514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fdda 	bl	80050d4 <USB_ReadInterrupts>
 8001520:	4603      	mov	r3, r0
 8001522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800152a:	d117      	bne.n	800155c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800153a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800153e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f009 ff81 	bl	800b448 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fed3 	bl	80052f8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800155a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fdb7 	bl	80050d4 <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d102      	bne.n	8001578 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f001 f8ca 	bl	800270c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fda9 	bl	80050d4 <USB_ReadInterrupts>
 8001582:	4603      	mov	r3, r0
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d106      	bne.n	800159a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f009 ff3f 	bl	800b410 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2208      	movs	r2, #8
 8001598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fd98 	bl	80050d4 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015ae:	d138      	bne.n	8001622 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f9b1 	bl	800591c <USB_HC_ReadInterrupt>
 80015ba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	e025      	b.n	800160e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ec:	d106      	bne.n	80015fc <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4619      	mov	r1, r3
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8cf 	bl	8001798 <HCD_HC_IN_IRQHandler>
 80015fa:	e005      	b.n	8001608 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fc5f 	bl	8001ec6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3d4      	bcc.n	80015c2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fd54 	bl	80050d4 <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b10      	cmp	r3, #16
 8001634:	d101      	bne.n	800163a <HAL_HCD_IRQHandler+0x1d6>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_HCD_IRQHandler+0x1d8>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d014      	beq.n	800166a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0210 	bic.w	r2, r2, #16
 800164e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 ffad 	bl	80025b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0210 	orr.w	r2, r2, #16
 8001664:	619a      	str	r2, [r3, #24]
 8001666:	e000      	b.n	800166a <HAL_HCD_IRQHandler+0x206>
      return;
 8001668:	bf00      	nop
    }
  }
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_HCD_Start+0x16>
 8001682:	2302      	movs	r3, #2
 8001684:	e013      	b.n	80016ae <HAL_HCD_Start+0x3e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fc2b 	bl	8004eee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fe8e 	bl	80053c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_HCD_Stop+0x16>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e00d      	b.n	80016e8 <HAL_HCD_Stop+0x32>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fa6b 	bl	8005bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fe35 	bl	800536c <USB_ResetPort>
 8001702:	4603      	mov	r3, r0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	335c      	adds	r3, #92	; 0x5c
 8001728:	781b      	ldrb	r3, [r3, #0]
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	334c      	adds	r3, #76	; 0x4c
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fe77 	bl	8005460 <USB_GetCurrentFrame>
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fe52 	bl	8005432 <USB_GetHostSpeed>
 800178e:	4603      	mov	r3, r0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d119      	bne.n	80017fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d4:	461a      	mov	r2, r3
 80017d6:	2304      	movs	r3, #4
 80017d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	0151      	lsls	r1, r2, #5
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	440a      	add	r2, r1
 80017f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	60d3      	str	r3, [r2, #12]
 80017fa:	e095      	b.n	8001928 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4413      	add	r3, r2
 8001804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b20      	cmp	r3, #32
 8001810:	d109      	bne.n	8001826 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4413      	add	r3, r2
 800181a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181e:	461a      	mov	r2, r3
 8001820:	2320      	movs	r3, #32
 8001822:	6093      	str	r3, [r2, #8]
 8001824:	e080      	b.n	8001928 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4413      	add	r3, r2
 800182e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b08      	cmp	r3, #8
 800183a:	d134      	bne.n	80018a6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	015a      	lsls	r2, r3, #5
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4413      	add	r3, r2
 8001844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	0151      	lsls	r1, r2, #5
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	440a      	add	r2, r1
 8001852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	335d      	adds	r3, #93	; 0x5d
 800186c:	2205      	movs	r2, #5
 800186e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187c:	461a      	mov	r2, r3
 800187e:	2310      	movs	r3, #16
 8001880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	461a      	mov	r2, r3
 8001890:	2308      	movs	r3, #8
 8001892:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 f84d 	bl	800593e <USB_HC_Halt>
 80018a4:	e040      	b.n	8001928 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018bc:	d134      	bne.n	8001928 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	0151      	lsls	r1, r2, #5
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	440a      	add	r2, r1
 80018d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f004 f828 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018fa:	461a      	mov	r2, r3
 80018fc:	2310      	movs	r3, #16
 80018fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	335d      	adds	r3, #93	; 0x5d
 8001910:	2208      	movs	r2, #8
 8001912:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001920:	461a      	mov	r2, r3
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4413      	add	r3, r2
 8001930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193e:	d122      	bne.n	8001986 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	0151      	lsls	r1, r2, #5
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	440a      	add	r2, r1
 8001956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f003 ffe7 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	015a      	lsls	r2, r3, #5
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4413      	add	r3, r2
 8001978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197c:	461a      	mov	r2, r3
 800197e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001982:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001984:	e29b      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 80c1 	bne.w	8001b20 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01b      	beq.n	80019de <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3348      	adds	r3, #72	; 0x48
 80019b6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	440b      	add	r3, r1
 80019c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80019ca:	1ad1      	subs	r1, r2, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4403      	add	r3, r0
 80019da:	334c      	adds	r3, #76	; 0x4c
 80019dc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	335d      	adds	r3, #93	; 0x5d
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3358      	adds	r3, #88	; 0x58
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	461a      	mov	r2, r3
 8001a14:	2301      	movs	r3, #1
 8001a16:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	333f      	adds	r3, #63	; 0x3f
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00a      	beq.n	8001a44 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	333f      	adds	r3, #63	; 0x3f
 8001a3e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d121      	bne.n	8001a88 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	0151      	lsls	r1, r2, #5
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	440a      	add	r2, r1
 8001a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 ff65 	bl	800593e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a80:	461a      	mov	r2, r3
 8001a82:	2310      	movs	r3, #16
 8001a84:	6093      	str	r3, [r2, #8]
 8001a86:	e034      	b.n	8001af2 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	333f      	adds	r3, #63	; 0x3f
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d129      	bne.n	8001af2 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	0151      	lsls	r1, r2, #5
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001abc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	335c      	adds	r3, #92	; 0x5c
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	335c      	adds	r3, #92	; 0x5c
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4601      	mov	r1, r0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f009 fcb9 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3350      	adds	r3, #80	; 0x50
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3350      	adds	r3, #80	; 0x50
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	e1ce      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	015a      	lsls	r2, r3, #5
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	f040 80f1 	bne.w	8001d1a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	0151      	lsls	r1, r2, #5
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	440a      	add	r2, r1
 8001b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b52:	f023 0302 	bic.w	r3, r3, #2
 8001b56:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	335d      	adds	r3, #93	; 0x5d
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d10a      	bne.n	8001b84 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	335c      	adds	r3, #92	; 0x5c
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e0b0      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	335d      	adds	r3, #93	; 0x5d
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d10a      	bne.n	8001bb0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	335c      	adds	r3, #92	; 0x5c
 8001baa:	2205      	movs	r2, #5
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e09a      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	335d      	adds	r3, #93	; 0x5d
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d00a      	beq.n	8001bdc <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	335d      	adds	r3, #93	; 0x5d
 8001bd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d156      	bne.n	8001c8a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3358      	adds	r3, #88	; 0x58
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1c59      	adds	r1, r3, #1
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4403      	add	r3, r0
 8001bfe:	3358      	adds	r3, #88	; 0x58
 8001c00:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3358      	adds	r3, #88	; 0x58
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d914      	bls.n	8001c42 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	3358      	adds	r3, #88	; 0x58
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	335c      	adds	r3, #92	; 0x5c
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e009      	b.n	8001c56 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	335c      	adds	r3, #92	; 0x5c
 8001c52:	2202      	movs	r2, #2
 8001c54:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c6c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c74:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02d      	b.n	8001ce6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	335d      	adds	r3, #93	; 0x5d
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d122      	bne.n	8001ce6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	335c      	adds	r3, #92	; 0x5c
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	335c      	adds	r3, #92	; 0x5c
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4601      	mov	r1, r0
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f009 fba6 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d18:	e0d1      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d13e      	bne.n	8001dae <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	0151      	lsls	r1, r2, #5
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	440a      	add	r2, r1
 8001d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3358      	adds	r3, #88	; 0x58
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1c59      	adds	r1, r3, #1
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4403      	add	r3, r0
 8001d72:	3358      	adds	r3, #88	; 0x58
 8001d74:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	335d      	adds	r3, #93	; 0x5d
 8001d86:	2206      	movs	r2, #6
 8001d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fdd2 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	461a      	mov	r2, r3
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	6093      	str	r3, [r2, #8]
}
 8001dac:	e087      	b.n	8001ebe <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d17c      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	333f      	adds	r3, #63	; 0x3f
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d122      	bne.n	8001e20 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	3358      	adds	r3, #88	; 0x58
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	0151      	lsls	r1, r2, #5
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	440a      	add	r2, r1
 8001e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fd90 	bl	800593e <USB_HC_Halt>
 8001e1e:	e045      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	333f      	adds	r3, #63	; 0x3f
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	333f      	adds	r3, #63	; 0x3f
 8001e46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d12f      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3358      	adds	r3, #88	; 0x58
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d121      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	335d      	adds	r3, #93	; 0x5d
 8001e78:	2203      	movs	r2, #3
 8001e7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	0151      	lsls	r1, r2, #5
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	440a      	add	r2, r1
 8001e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fd49 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2310      	movs	r3, #16
 8001ebc:	6093      	str	r3, [r2, #8]
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d119      	bne.n	8001f2a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	461a      	mov	r2, r3
 8001f04:	2304      	movs	r3, #4
 8001f06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	0151      	lsls	r1, r2, #5
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001f28:	e33e      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d141      	bne.n	8001fc4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2320      	movs	r3, #32
 8001f50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	333d      	adds	r3, #61	; 0x3d
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 831f 	bne.w	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	333d      	adds	r3, #61	; 0x3d
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	335c      	adds	r3, #92	; 0x5c
 8001f8e:	2202      	movs	r2, #2
 8001f90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fcbe 	bl	800593e <USB_HC_Halt>
}
 8001fc2:	e2f1      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d13f      	bne.n	800205a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	335d      	adds	r3, #93	; 0x5d
 8001fea:	2204      	movs	r2, #4
 8001fec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	333d      	adds	r3, #61	; 0x3d
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3358      	adds	r3, #88	; 0x58
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	440a      	add	r2, r1
 800202c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fc7c 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002052:	461a      	mov	r2, r3
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	6093      	str	r3, [r2, #8]
}
 8002058:	e2a6      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002070:	d122      	bne.n	80020b8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	0151      	lsls	r1, r2, #5
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	440a      	add	r2, r1
 8002088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fc4e 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b4:	6093      	str	r3, [r2, #8]
}
 80020b6:	e277      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d135      	bne.n	800213a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	3358      	adds	r3, #88	; 0x58
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fc16 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	2301      	movs	r3, #1
 8002122:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	335d      	adds	r3, #93	; 0x5d
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
}
 8002138:	e236      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d12b      	bne.n	80021a8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2308      	movs	r3, #8
 8002160:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	0151      	lsls	r1, r2, #5
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	440a      	add	r2, r1
 8002178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fbd6 	bl	800593e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	335d      	adds	r3, #93	; 0x5d
 80021a2:	2205      	movs	r2, #5
 80021a4:	701a      	strb	r2, [r3, #0]
}
 80021a6:	e1ff      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d155      	bne.n	800226a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	3358      	adds	r3, #88	; 0x58
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	335d      	adds	r3, #93	; 0x5d
 80021e2:	2203      	movs	r2, #3
 80021e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	333d      	adds	r3, #61	; 0x3d
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	333c      	adds	r3, #60	; 0x3c
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	333d      	adds	r3, #61	; 0x3d
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	0151      	lsls	r1, r2, #5
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	440a      	add	r2, r1
 800223c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fb74 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	461a      	mov	r2, r3
 8002264:	2310      	movs	r3, #16
 8002266:	6093      	str	r3, [r2, #8]
}
 8002268:	e19e      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d12b      	bne.n	80022d8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	0151      	lsls	r1, r2, #5
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	440a      	add	r2, r1
 8002296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fb47 	bl	800593e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	335d      	adds	r3, #93	; 0x5d
 80022c0:	2206      	movs	r2, #6
 80022c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	461a      	mov	r2, r3
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	6093      	str	r3, [r2, #8]
}
 80022d6:	e167      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ee:	d135      	bne.n	800235c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	0151      	lsls	r1, r2, #5
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	440a      	add	r2, r1
 8002306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fb0f 	bl	800593e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	2310      	movs	r3, #16
 8002330:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	335d      	adds	r3, #93	; 0x5d
 8002356:	2208      	movs	r2, #8
 8002358:	701a      	strb	r2, [r3, #0]
}
 800235a:	e125      	b.n	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	f040 811a 	bne.w	80025a8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	440a      	add	r2, r1
 800238a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238e:	f023 0302 	bic.w	r3, r3, #2
 8002392:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	335d      	adds	r3, #93	; 0x5d
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d137      	bne.n	800241a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	335c      	adds	r3, #92	; 0x5c
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	333f      	adds	r3, #63	; 0x3f
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d00b      	beq.n	80023ec <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	333f      	adds	r3, #63	; 0x3f
 80023e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f040 80c5 	bne.w	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	3351      	adds	r3, #81	; 0x51
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	f083 0301 	eor.w	r3, r3, #1
 8002402:	b2d8      	uxtb	r0, r3
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3351      	adds	r3, #81	; 0x51
 8002414:	4602      	mov	r2, r0
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e0ad      	b.n	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	335d      	adds	r3, #93	; 0x5d
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10a      	bne.n	8002446 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	e097      	b.n	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	335d      	adds	r3, #93	; 0x5d
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d10a      	bne.n	8002472 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	2202      	movs	r2, #2
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e081      	b.n	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	335d      	adds	r3, #93	; 0x5d
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b05      	cmp	r3, #5
 8002486:	d10a      	bne.n	800249e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	335c      	adds	r3, #92	; 0x5c
 8002498:	2205      	movs	r2, #5
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e06b      	b.n	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	335d      	adds	r3, #93	; 0x5d
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d00a      	beq.n	80024ca <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	335d      	adds	r3, #93	; 0x5d
 80024c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d155      	bne.n	8002576 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	3358      	adds	r3, #88	; 0x58
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	1c59      	adds	r1, r3, #1
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4403      	add	r3, r0
 80024ec:	3358      	adds	r3, #88	; 0x58
 80024ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3358      	adds	r3, #88	; 0x58
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d914      	bls.n	8002530 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3358      	adds	r3, #88	; 0x58
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	335c      	adds	r3, #92	; 0x5c
 800252a:	2204      	movs	r2, #4
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e009      	b.n	8002544 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002562:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	2302      	movs	r3, #2
 8002586:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	335c      	adds	r3, #92	; 0x5c
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4601      	mov	r1, r0
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f008 ff5e 	bl	800b464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	0c5b      	lsrs	r3, r3, #17
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d004      	beq.n	80025f6 <HCD_RXQLVL_IRQHandler+0x46>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	f000 8082 	beq.w	80026f8 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80025f4:	e083      	b.n	80026fe <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d07f      	beq.n	80026fc <HCD_RXQLVL_IRQHandler+0x14c>
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	3344      	adds	r3, #68	; 0x44
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d074      	beq.n	80026fc <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	3344      	adds	r3, #68	; 0x44
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	b292      	uxth	r2, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f002 fd28 	bl	8005082 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	3344      	adds	r3, #68	; 0x44
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	18d1      	adds	r1, r2, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4403      	add	r3, r0
 8002656:	3344      	adds	r3, #68	; 0x44
 8002658:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4613      	mov	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	334c      	adds	r3, #76	; 0x4c
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	18d1      	adds	r1, r2, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4403      	add	r3, r0
 800267e:	334c      	adds	r3, #76	; 0x4c
 8002680:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HCD_RXQLVL_IRQHandler+0x158>)
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3350      	adds	r3, #80	; 0x50
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2d8      	uxtb	r0, r3
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	3350      	adds	r3, #80	; 0x50
 80026f2:	4602      	mov	r2, r0
 80026f4:	701a      	strb	r2, [r3, #0]
      break;
 80026f6:	e001      	b.n	80026fc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80026fc:	bf00      	nop
  }
}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	1ff80000 	.word	0x1ff80000

0800270c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002738:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d113      	bne.n	800276c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10a      	bne.n	8002764 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800275c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f008 fe64 	bl	800b42c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b08      	cmp	r3, #8
 8002774:	d147      	bne.n	8002806 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d129      	bne.n	80027dc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d113      	bne.n	80027b8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800279a:	d106      	bne.n	80027aa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 fda8 	bl	80052f8 <USB_InitFSLSPClkSel>
 80027a8:	e011      	b.n	80027ce <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fda1 	bl	80052f8 <USB_InitFSLSPClkSel>
 80027b6:	e00a      	b.n	80027ce <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c6:	461a      	mov	r2, r3
 80027c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80027cc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f008 fe5a 	bl	800b488 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f008 fe29 	bl	800b42c <HAL_HCD_Connect_Callback>
 80027da:	e014      	b.n	8002806 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f008 fe61 	bl	800b4a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80027f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027f4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002804:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b20      	cmp	r3, #32
 800280e:	d103      	bne.n	8002818 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f043 0320 	orr.w	r3, r3, #32
 8002816:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800281e:	461a      	mov	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e11b      	b.n	8002a76 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f007 ffc6 	bl	800a7e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002870:	f001 f926 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a81      	ldr	r2, [pc, #516]	; (8002a80 <HAL_I2C_Init+0x254>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d807      	bhi.n	8002890 <HAL_I2C_Init+0x64>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_I2C_Init+0x258>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e006      	b.n	800289e <HAL_I2C_Init+0x72>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a7d      	ldr	r2, [pc, #500]	; (8002a88 <HAL_I2C_Init+0x25c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e7      	b.n	8002a76 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a78      	ldr	r2, [pc, #480]	; (8002a8c <HAL_I2C_Init+0x260>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9b      	lsrs	r3, r3, #18
 80028b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_I2C_Init+0x254>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d802      	bhi.n	80028e0 <HAL_I2C_Init+0xb4>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	e009      	b.n	80028f4 <HAL_I2C_Init+0xc8>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_I2C_Init+0x264>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	3301      	adds	r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	495c      	ldr	r1, [pc, #368]	; (8002a80 <HAL_I2C_Init+0x254>)
 8002910:	428b      	cmp	r3, r1
 8002912:	d819      	bhi.n	8002948 <HAL_I2C_Init+0x11c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e59      	subs	r1, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002922:	1c59      	adds	r1, r3, #1
 8002924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002928:	400b      	ands	r3, r1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_I2C_Init+0x118>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e59      	subs	r1, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fbb1 f3f3 	udiv	r3, r1, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	e051      	b.n	80029e8 <HAL_I2C_Init+0x1bc>
 8002944:	2304      	movs	r3, #4
 8002946:	e04f      	b.n	80029e8 <HAL_I2C_Init+0x1bc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_I2C_Init+0x148>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e012      	b.n	800299a <HAL_I2C_Init+0x16e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x176>
 800299e:	2301      	movs	r3, #1
 80029a0:	e022      	b.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_I2C_Init+0x19c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	440b      	add	r3, r1
 80029b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6809      	ldr	r1, [r1, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6911      	ldr	r1, [r2, #16]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000186a0 	.word	0x000186a0
 8002a84:	001e847f 	.word	0x001e847f
 8002a88:	003d08ff 	.word	0x003d08ff
 8002a8c:	431bde83 	.word	0x431bde83
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d129      	bne.n	8002afe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2224      	movs	r2, #36	; 0x24
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0210 	bic.w	r2, r2, #16
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d12a      	bne.n	8002b7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2224      	movs	r2, #36	; 0x24
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	f023 030f 	bic.w	r3, r3, #15
 8002b4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	89fb      	ldrh	r3, [r7, #14]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	89fa      	ldrh	r2, [r7, #14]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0bf      	b.n	8002d1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f007 ff00 	bl	800a9b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002bce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002be4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_LTDC_Init+0x19c>)
 8002c00:	400b      	ands	r3, r1
 8002c02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68d9      	ldr	r1, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_LTDC_Init+0x19c>)
 8002c2e:	400b      	ands	r3, r1
 8002c30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	041b      	lsls	r3, r3, #16
 8002c38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68d9      	ldr	r1, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6919      	ldr	r1, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_LTDC_Init+0x19c>)
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6959      	ldr	r1, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_LTDC_Init+0x19c>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6959      	ldr	r1, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0206 	orr.w	r2, r2, #6
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	f000f800 	.word	0xf000f800

08002d2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d023      	beq.n	8002d96 <HAL_LTDC_IRQHandler+0x6a>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01e      	beq.n	8002d96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2204      	movs	r2, #4
 8002d84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f86f 	bl	8002e74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_LTDC_IRQHandler+0xbc>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01e      	beq.n	8002de8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0202 	bic.w	r2, r2, #2
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002dc8:	f043 0202 	orr.w	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f846 	bl	8002e74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01b      	beq.n	8002e2a <HAL_LTDC_IRQHandler+0xfe>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2201      	movs	r2, #1
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f82f 	bl	8002e88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <HAL_LTDC_IRQHandler+0x140>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0208 	bic.w	r2, r2, #8
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2208      	movs	r2, #8
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f818 	bl	8002e9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002eb0:	b5b0      	push	{r4, r5, r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_LTDC_ConfigLayer+0x1a>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e02c      	b.n	8002f24 <HAL_LTDC_ConfigLayer+0x74>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2134      	movs	r1, #52	; 0x34
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f811 	bl	8002f2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdb0      	pop	{r4, r5, r7, pc}

08002f2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	4413      	add	r3, r2
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	01db      	lsls	r3, r3, #7
 8002f58:	4413      	add	r3, r2
 8002f5a:	3384      	adds	r3, #132	; 0x84
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4611      	mov	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	01d2      	lsls	r2, r2, #7
 8002f68:	440a      	add	r2, r1
 8002f6a:	3284      	adds	r2, #132	; 0x84
 8002f6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	4413      	add	r3, r2
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	440b      	add	r3, r1
 8002f92:	3384      	adds	r3, #132	; 0x84
 8002f94:	4619      	mov	r1, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002faa:	4413      	add	r3, r2
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4413      	add	r3, r2
 8002fbc:	3384      	adds	r3, #132	; 0x84
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	01d2      	lsls	r2, r2, #7
 8002fca:	440a      	add	r2, r1
 8002fcc:	3284      	adds	r2, #132	; 0x84
 8002fce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe2:	4413      	add	r3, r2
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	01db      	lsls	r3, r3, #7
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3384      	adds	r3, #132	; 0x84
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	01db      	lsls	r3, r3, #7
 8003006:	4413      	add	r3, r2
 8003008:	3384      	adds	r3, #132	; 0x84
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4611      	mov	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	01d2      	lsls	r2, r2, #7
 8003016:	440a      	add	r2, r1
 8003018:	3284      	adds	r2, #132	; 0x84
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	01db      	lsls	r3, r3, #7
 800302a:	4413      	add	r3, r2
 800302c:	3384      	adds	r3, #132	; 0x84
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	01db      	lsls	r3, r3, #7
 800305c:	4413      	add	r3, r2
 800305e:	3384      	adds	r3, #132	; 0x84
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4413      	add	r3, r2
 800306e:	3384      	adds	r3, #132	; 0x84
 8003070:	461a      	mov	r2, r3
 8003072:	2300      	movs	r3, #0
 8003074:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800307c:	461a      	mov	r2, r3
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	431a      	orrs	r2, r3
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	01db      	lsls	r3, r3, #7
 8003090:	440b      	add	r3, r1
 8003092:	3384      	adds	r3, #132	; 0x84
 8003094:	4619      	mov	r1, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	01db      	lsls	r3, r3, #7
 80030a6:	4413      	add	r3, r2
 80030a8:	3384      	adds	r3, #132	; 0x84
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4611      	mov	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	01d2      	lsls	r2, r2, #7
 80030b6:	440a      	add	r2, r1
 80030b8:	3284      	adds	r2, #132	; 0x84
 80030ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	01db      	lsls	r3, r3, #7
 80030ca:	4413      	add	r3, r2
 80030cc:	3384      	adds	r3, #132	; 0x84
 80030ce:	461a      	mov	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	01db      	lsls	r3, r3, #7
 80030e0:	4413      	add	r3, r2
 80030e2:	3384      	adds	r3, #132	; 0x84
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	4611      	mov	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	01d2      	lsls	r2, r2, #7
 80030f0:	440a      	add	r2, r1
 80030f2:	3284      	adds	r2, #132	; 0x84
 80030f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030f8:	f023 0307 	bic.w	r3, r3, #7
 80030fc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	6809      	ldr	r1, [r1, #0]
 800310a:	4608      	mov	r0, r1
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	01c9      	lsls	r1, r1, #7
 8003110:	4401      	add	r1, r0
 8003112:	3184      	adds	r1, #132	; 0x84
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	01db      	lsls	r3, r3, #7
 8003122:	4413      	add	r3, r2
 8003124:	3384      	adds	r3, #132	; 0x84
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4413      	add	r3, r2
 8003134:	3384      	adds	r3, #132	; 0x84
 8003136:	461a      	mov	r2, r3
 8003138:	2300      	movs	r3, #0
 800313a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	4413      	add	r3, r2
 8003148:	3384      	adds	r3, #132	; 0x84
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800315a:	2304      	movs	r3, #4
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e01b      	b.n	8003198 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003168:	2303      	movs	r3, #3
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e014      	b.n	8003198 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00b      	beq.n	800318e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800317a:	2b02      	cmp	r3, #2
 800317c:	d007      	beq.n	800318e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003182:	2b03      	cmp	r3, #3
 8003184:	d003      	beq.n	800318e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800318a:	2b07      	cmp	r3, #7
 800318c:	d102      	bne.n	8003194 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800318e:	2302      	movs	r3, #2
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	e001      	b.n	8003198 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	4413      	add	r3, r2
 80031a4:	3384      	adds	r3, #132	; 0x84
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	4611      	mov	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	01d2      	lsls	r2, r2, #7
 80031b2:	440a      	add	r2, r1
 80031b4:	3284      	adds	r2, #132	; 0x84
 80031b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80031ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	041a      	lsls	r2, r3, #16
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1acb      	subs	r3, r1, r3
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	3303      	adds	r3, #3
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	6809      	ldr	r1, [r1, #0]
 80031de:	4608      	mov	r0, r1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	4401      	add	r1, r0
 80031e6:	3184      	adds	r1, #132	; 0x84
 80031e8:	4313      	orrs	r3, r2
 80031ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	01db      	lsls	r3, r3, #7
 80031f6:	4413      	add	r3, r2
 80031f8:	3384      	adds	r3, #132	; 0x84
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	4611      	mov	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	01d2      	lsls	r2, r2, #7
 8003206:	440a      	add	r2, r1
 8003208:	3284      	adds	r2, #132	; 0x84
 800320a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800320e:	f023 0307 	bic.w	r3, r3, #7
 8003212:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	01db      	lsls	r3, r3, #7
 800321e:	4413      	add	r3, r2
 8003220:	3384      	adds	r3, #132	; 0x84
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	01db      	lsls	r3, r3, #7
 8003234:	4413      	add	r3, r2
 8003236:	3384      	adds	r3, #132	; 0x84
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	4611      	mov	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	01d2      	lsls	r2, r2, #7
 8003244:	440a      	add	r2, r1
 8003246:	3284      	adds	r2, #132	; 0x84
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6013      	str	r3, [r2, #0]
}
 800324e:	bf00      	nop
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e22a      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b85      	ldr	r3, [pc, #532]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b82      	ldr	r3, [pc, #520]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b7e      	ldr	r3, [pc, #504]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e205      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a75      	ldr	r2, [pc, #468]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6f      	ldr	r2, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6c      	ldr	r2, [pc, #432]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a68      	ldr	r2, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b66      	ldr	r3, [pc, #408]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a65      	ldr	r2, [pc, #404]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd f924 	bl	8000560 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd f920 	bl	8000560 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1ca      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd f910 	bl	8000560 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fd f90c 	bl	8000560 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1b6      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b44      	ldr	r3, [pc, #272]	; (800349c <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e18a      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x244>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fd f8c5 	bl	8000560 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7fd f8c1 	bl	8000560 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e16b      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4925      	ldr	r1, [pc, #148]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_OscConfig+0x244>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd f8a4 	bl	8000560 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341c:	f7fd f8a0 	bl	8000560 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e14a      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d036      	beq.n	80034b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCC_OscConfig+0x248>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fd f884 	bl	8000560 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345c:	f7fd f880 	bl	8000560 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e12a      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_OscConfig+0x248>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fd f86d 	bl	8000560 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e00e      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd f869 	bl	8000560 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d907      	bls.n	80034a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e113      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
 80034a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ea      	bne.n	800348a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8097 	beq.w	80035f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a7c      	ldr	r2, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b77      	ldr	r3, [pc, #476]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b74      	ldr	r3, [pc, #464]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a73      	ldr	r2, [pc, #460]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fd f829 	bl	8000560 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fd f825 	bl	8000560 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0cf      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x2ea>
 8003538:	4b64      	ldr	r3, [pc, #400]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a63      	ldr	r2, [pc, #396]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x30c>
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003568:	4b58      	ldr	r3, [pc, #352]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	4b55      	ldr	r3, [pc, #340]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fc ffea 	bl	8000560 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fc ffe6 	bl	8000560 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e08e      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ee      	beq.n	8003590 <HAL_RCC_OscConfig+0x334>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fc ffd4 	bl	8000560 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fc ffd0 	bl	8000560 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e078      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d064      	beq.n	80036c2 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f8:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d05c      	beq.n	80036be <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d141      	bne.n	8003690 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fc ffa5 	bl	8000560 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fc ffa1 	bl	8000560 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e04b      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	019b      	lsls	r3, r3, #6
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	491b      	ldr	r1, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003664:	2201      	movs	r2, #1
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fc ff7a 	bl	8000560 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fc ff76 	bl	8000560 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e020      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x414>
 800368e:	e018      	b.n	80036c2 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fc ff63 	bl	8000560 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369e:	f7fc ff5f 	bl	8000560 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e009      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x442>
 80036bc:	e001      	b.n	80036c2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42470060 	.word	0x42470060

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0ca      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d90c      	bls.n	8003714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b64      	ldr	r3, [pc, #400]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b6      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b58      	ldr	r3, [pc, #352]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a57      	ldr	r2, [pc, #348]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a51      	ldr	r2, [pc, #324]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800374e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494c      	ldr	r1, [pc, #304]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d044      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07d      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d003      	beq.n	8003796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	2b03      	cmp	r3, #3
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06d      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a6:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e065      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4933      	ldr	r1, [pc, #204]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c8:	f7fc feca 	bl	8000560 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fc fec6 	bl	8000560 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e04d      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20c      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_ClockConfig+0x1b4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e030      	b.n	8003882 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4915      	ldr	r1, [pc, #84]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	490d      	ldr	r1, [pc, #52]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800385e:	f000 f81d 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4909      	ldr	r1, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800387a:	2000      	movs	r0, #0
 800387c:	f007 fb22 	bl	800aec4 <HAL_InitTick>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40023c00 	.word	0x40023c00
 8003890:	40023800 	.word	0x40023800
 8003894:	0800bc34 	.word	0x0800bc34
 8003898:	20000028 	.word	0x20000028

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b094      	sub	sp, #80	; 0x50
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
 80038a8:	2300      	movs	r3, #0
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	2300      	movs	r3, #0
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b79      	ldr	r3, [pc, #484]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80e1 	bhi.w	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e0db      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b73      	ldr	r3, [pc, #460]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038d4:	e0db      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80038d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038da:	e0d8      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80038fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003920:	0150      	lsls	r0, r2, #5
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4621      	mov	r1, r4
 8003928:	1a51      	subs	r1, r2, r1
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	4629      	mov	r1, r5
 800392e:	eb63 0301 	sbc.w	r3, r3, r1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003940:	4659      	mov	r1, fp
 8003942:	018b      	lsls	r3, r1, #6
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800394a:	4651      	mov	r1, sl
 800394c:	018a      	lsls	r2, r1, #6
 800394e:	4651      	mov	r1, sl
 8003950:	ebb2 0801 	subs.w	r8, r2, r1
 8003954:	4659      	mov	r1, fp
 8003956:	eb63 0901 	sbc.w	r9, r3, r1
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800396a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396e:	4690      	mov	r8, r2
 8003970:	4699      	mov	r9, r3
 8003972:	4623      	mov	r3, r4
 8003974:	eb18 0303 	adds.w	r3, r8, r3
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	462b      	mov	r3, r5
 800397c:	eb49 0303 	adc.w	r3, r9, r3
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800398e:	4629      	mov	r1, r5
 8003990:	024b      	lsls	r3, r1, #9
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003998:	4621      	mov	r1, r4
 800399a:	024a      	lsls	r2, r1, #9
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ac:	f7fc fc20 	bl	80001f0 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b8:	e058      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	4611      	mov	r1, r2
 80039c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039d4:	4642      	mov	r2, r8
 80039d6:	464b      	mov	r3, r9
 80039d8:	f04f 0000 	mov.w	r0, #0
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	0159      	lsls	r1, r3, #5
 80039e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e6:	0150      	lsls	r0, r2, #5
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4641      	mov	r1, r8
 80039ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80039f2:	4649      	mov	r1, r9
 80039f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a10:	eb63 050b 	sbc.w	r5, r3, fp
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	00eb      	lsls	r3, r5, #3
 8003a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a22:	00e2      	lsls	r2, r4, #3
 8003a24:	4614      	mov	r4, r2
 8003a26:	461d      	mov	r5, r3
 8003a28:	4643      	mov	r3, r8
 8003a2a:	18e3      	adds	r3, r4, r3
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	464b      	mov	r3, r9
 8003a30:	eb45 0303 	adc.w	r3, r5, r3
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a42:	4629      	mov	r1, r5
 8003a44:	028b      	lsls	r3, r1, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	028a      	lsls	r2, r1, #10
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	61fa      	str	r2, [r7, #28]
 8003a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a60:	f7fc fbc6 	bl	80001f0 <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3750      	adds	r7, #80	; 0x50
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000028 	.word	0x20000028

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800bc44 	.word	0x0800bc44

08003ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aec:	f7ff ffdc 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	0800bc44 	.word	0x0800bc44

08003b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0203 	and.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	08db      	lsrs	r3, r3, #3
 8003b4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCC_GetClockConfig+0x60>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 020f 	and.w	r2, r3, #15
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40023c00 	.word	0x40023c00

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d061      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b9c:	4ba3      	ldr	r3, [pc, #652]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba2:	f7fc fcdd 	bl	8000560 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003baa:	f7fc fcd9 	bl	8000560 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e177      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bbc:	4b9c      	ldr	r3, [pc, #624]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	019a      	lsls	r2, r3, #6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	071b      	lsls	r3, r3, #28
 8003be0:	4993      	ldr	r1, [pc, #588]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01f      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf4:	4b8e      	ldr	r3, [pc, #568]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	071b      	lsls	r3, r3, #28
 8003c14:	4986      	ldr	r1, [pc, #536]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c22:	f023 021f 	bic.w	r2, r3, #31
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	4980      	ldr	r1, [pc, #512]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c34:	4b7d      	ldr	r3, [pc, #500]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3a:	f7fc fc91 	bl	8000560 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c42:	f7fc fc8d 	bl	8000560 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e12b      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c54:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d079      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c78:	4b6e      	ldr	r3, [pc, #440]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7e:	f7fc fc6f 	bl	8000560 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c86:	f7fc fc6b 	bl	8000560 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e109      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c98:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca4:	d0ef      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	0f1b      	lsrs	r3, r3, #28
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	019a      	lsls	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	4957      	ldr	r1, [pc, #348]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cda:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	4950      	ldr	r1, [pc, #320]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01e      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d00:	4b4b      	ldr	r3, [pc, #300]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	0e1b      	lsrs	r3, r3, #24
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	019a      	lsls	r2, r3, #6
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	071b      	lsls	r3, r3, #28
 8003d20:	4943      	ldr	r1, [pc, #268]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	493e      	ldr	r1, [pc, #248]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fc fc0c 	bl	8000560 <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d4c:	f7fc fc08 	bl	8000560 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0a6      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d6a:	d1ef      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808d 	beq.w	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d96:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da2:	f7fc fbdd 	bl	8000560 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fc fbd9 	bl	8000560 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e077      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d039      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d032      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d11e      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fc fba7 	bl	8000560 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e014      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fc fba3 	bl	8000560 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d90b      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e03f      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003e2c:	42470068 	.word	0x42470068
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470070 	.word	0x42470070
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0e4      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	4911      	ldr	r1, [pc, #68]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
 8003e74:	e005      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8e:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ea8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	424711e0 	.word	0x424711e0

08003ebc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e025      	b.n	8003f1c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f006 fac9 	bl	800a47c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fea3 	bl	8004c48 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	f000 ff0e 	bl	8004d2e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e056      	b.n	8003fe4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f006 ff43 	bl	800addc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	ea42 0103 	orr.w	r1, r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	f003 0104 	and.w	r1, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e01d      	b.n	800403a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f007 f8b0 	bl	800b178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fa22 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b06      	cmp	r3, #6
 800406a:	d007      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d122      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d11b      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0202 	mvn.w	r2, #2
 80040b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9b2 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 80040d2:	e005      	b.n	80040e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f9a4 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9b5 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d122      	bne.n	800413a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d11b      	bne.n	800413a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0204 	mvn.w	r2, #4
 800410a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f988 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 8004126:	e005      	b.n	8004134 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f97a 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f98b 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d122      	bne.n	800418e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11b      	bne.n	800418e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f06f 0208 	mvn.w	r2, #8
 800415e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f95e 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 800417a:	e005      	b.n	8004188 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f950 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f961 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d122      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d11b      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0210 	mvn.w	r2, #16
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2208      	movs	r2, #8
 80041b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f934 	bl	8004436 <HAL_TIM_IC_CaptureCallback>
 80041ce:	e005      	b.n	80041dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f926 	bl	8004422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f937 	bl	800444a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0201 	mvn.w	r2, #1
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f006 fd91 	bl	800ad30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 faa6 	bl	8004786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8fc 	bl	800445e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b20      	cmp	r3, #32
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0220 	mvn.w	r2, #32
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fa70 	bl	8004772 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_ConfigClockSource+0x18>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0b3      	b.n	800441a <HAL_TIM_ConfigClockSource+0x180>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d03e      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xd0>
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	f200 8087 	bhi.w	8004402 <HAL_TIM_ConfigClockSource+0x168>
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	f000 8085 	beq.w	8004406 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d87f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 8004302:	2b70      	cmp	r3, #112	; 0x70
 8004304:	d01a      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xa2>
 8004306:	2b70      	cmp	r3, #112	; 0x70
 8004308:	d87b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 800430a:	2b60      	cmp	r3, #96	; 0x60
 800430c:	d050      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x116>
 800430e:	2b60      	cmp	r3, #96	; 0x60
 8004310:	d877      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 8004312:	2b50      	cmp	r3, #80	; 0x50
 8004314:	d03c      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0xf6>
 8004316:	2b50      	cmp	r3, #80	; 0x50
 8004318:	d873      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d058      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x136>
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d86f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d064      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x156>
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d86b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d060      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x156>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d867      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05c      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x156>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d05a      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800433a:	e062      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 f9ac 	bl	80046a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800435e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e04e      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 f995 	bl	80046a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	609a      	str	r2, [r3, #8]
      break;
 800438e:	e03b      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f909 	bl	80045b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2150      	movs	r1, #80	; 0x50
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f962 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 80043ae:	e02b      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 f928 	bl	8004612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2160      	movs	r1, #96	; 0x60
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f952 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 80043ce:	e01b      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	f000 f8e9 	bl	80045b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f942 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e00b      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 f939 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 8004400:	e002      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a40      	ldr	r2, [pc, #256]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d00f      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3d      	ldr	r2, [pc, #244]	; (800458c <TIM_Base_SetConfig+0x118>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00b      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d007      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d108      	bne.n	80044c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2f      	ldr	r2, [pc, #188]	; (8004588 <TIM_Base_SetConfig+0x114>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d027      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <TIM_Base_SetConfig+0x118>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d023      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <TIM_Base_SetConfig+0x11c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <TIM_Base_SetConfig+0x120>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <TIM_Base_SetConfig+0x124>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d017      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <TIM_Base_SetConfig+0x128>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <TIM_Base_SetConfig+0x12c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00f      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_Base_SetConfig+0x130>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_Base_SetConfig+0x134>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <TIM_Base_SetConfig+0x138>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <TIM_Base_SetConfig+0x13c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d108      	bne.n	8004538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <TIM_Base_SetConfig+0x114>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0xf8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800
 80045a8:	40001800 	.word	0x40001800
 80045ac:	40001c00 	.word	0x40001c00
 80045b0:	40002000 	.word	0x40002000

080045b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 030a 	bic.w	r3, r3, #10
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004612:	b480      	push	{r7}
 8004614:	b087      	sub	sp, #28
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0210 	bic.w	r2, r3, #16
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800463c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800464e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	f043 0307 	orr.w	r3, r3, #7
 8004694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	021a      	lsls	r2, r3, #8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e032      	b.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e03f      	b.n	800482c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f006 fd2b 	bl	800b21c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2224      	movs	r2, #36	; 0x24
 80047ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f828 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004802:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004812:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b5b0      	push	{r4, r5, r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004874:	f023 030c 	bic.w	r3, r3, #12
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	430b      	orrs	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a0:	f040 80e4 	bne.w	8004a6c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4aab      	ldr	r2, [pc, #684]	; (8004b58 <UART_SetConfig+0x324>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <UART_SetConfig+0x84>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4aaa      	ldr	r2, [pc, #680]	; (8004b5c <UART_SetConfig+0x328>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d16c      	bne.n	8004992 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048b8:	f7ff f916 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009a      	lsls	r2, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4aa3      	ldr	r2, [pc, #652]	; (8004b60 <UART_SetConfig+0x32c>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	011c      	lsls	r4, r3, #4
 80048dc:	f7ff f904 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80048f6:	f7ff f8f7 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	4a93      	ldr	r2, [pc, #588]	; (8004b60 <UART_SetConfig+0x32c>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2264      	movs	r2, #100	; 0x64
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	1aeb      	subs	r3, r5, r3
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a8e      	ldr	r2, [pc, #568]	; (8004b60 <UART_SetConfig+0x32c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004932:	441c      	add	r4, r3
 8004934:	f7ff f8d8 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004938:	4602      	mov	r2, r0
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009a      	lsls	r2, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fbb2 f5f3 	udiv	r5, r2, r3
 800494e:	f7ff f8cb 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004952:	4602      	mov	r2, r0
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	4a7d      	ldr	r2, [pc, #500]	; (8004b60 <UART_SetConfig+0x32c>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <UART_SetConfig+0x32c>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 0207 	and.w	r2, r3, #7
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4422      	add	r2, r4
 800498e:	609a      	str	r2, [r3, #8]
 8004990:	e154      	b.n	8004c3c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004992:	f7ff f895 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004996:	4602      	mov	r2, r0
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	4a6c      	ldr	r2, [pc, #432]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011c      	lsls	r4, r3, #4
 80049b6:	f7ff f883 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 80049ba:	4602      	mov	r2, r0
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80049d0:	f7ff f876 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009a      	lsls	r2, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	4a5d      	ldr	r2, [pc, #372]	; (8004b60 <UART_SetConfig+0x32c>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	2264      	movs	r2, #100	; 0x64
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	1aeb      	subs	r3, r5, r3
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3332      	adds	r3, #50	; 0x32
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a0c:	441c      	add	r4, r3
 8004a0e:	f7ff f857 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a28:	f7ff f84a 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009a      	lsls	r2, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2264      	movs	r2, #100	; 0x64
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	1aeb      	subs	r3, r5, r3
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 0207 	and.w	r2, r3, #7
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4422      	add	r2, r4
 8004a68:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004a6a:	e0e7      	b.n	8004c3c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <UART_SetConfig+0x324>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <UART_SetConfig+0x24c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <UART_SetConfig+0x328>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d171      	bne.n	8004b64 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a80:	f7ff f832 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	4a31      	ldr	r2, [pc, #196]	; (8004b60 <UART_SetConfig+0x32c>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	011c      	lsls	r4, r3, #4
 8004aa4:	f7ff f820 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009a      	lsls	r2, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	fbb2 f5f3 	udiv	r5, r2, r3
 8004abe:	f7ff f813 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <UART_SetConfig+0x32c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	1aeb      	subs	r3, r5, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <UART_SetConfig+0x32c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af8:	441c      	add	r4, r3
 8004afa:	f7fe fff5 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b14:	f7fe ffe8 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009a      	lsls	r2, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2264      	movs	r2, #100	; 0x64
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	1aeb      	subs	r3, r5, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <UART_SetConfig+0x32c>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4422      	add	r2, r4
 8004b54:	609a      	str	r2, [r3, #8]
 8004b56:	e071      	b.n	8004c3c <UART_SetConfig+0x408>
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b64:	f7fe ffac 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009a      	lsls	r2, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <UART_SetConfig+0x410>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	011c      	lsls	r4, r3, #4
 8004b88:	f7fe ff9a 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009a      	lsls	r2, r3, #2
 8004b96:	441a      	add	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ba2:	f7fe ff8d 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <UART_SetConfig+0x410>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	; 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1aeb      	subs	r3, r5, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	; 0x32
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <UART_SetConfig+0x410>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f7fe ff6f 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004be2:	4602      	mov	r2, r0
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004bf8:	f7fe ff62 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009a      	lsls	r2, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <UART_SetConfig+0x410>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2264      	movs	r2, #100	; 0x64
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	1aeb      	subs	r3, r5, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <UART_SetConfig+0x410>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 020f 	and.w	r2, r3, #15
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4422      	add	r2, r4
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	e7ff      	b.n	8004c3c <UART_SetConfig+0x408>
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bdb0      	pop	{r4, r5, r7, pc}
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d029      	beq.n	8004cb6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c72:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004c7c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8004c82:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8004c88:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8004c8e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8004c94:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8004c9a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8004ca0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004ca6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e034      	b.n	8004d20 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cc2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004ccc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004cd2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004cf4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004cfa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004d00:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004d06:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004d0c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d02e      	beq.n	8004da6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d54:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004d64:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8004d6e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8004d78:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004d82:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8004d8c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004d96:	4313      	orrs	r3, r2
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	609a      	str	r2, [r3, #8]
 8004da4:	e03b      	b.n	8004e1e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ddc:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004dec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004df6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004e00:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	f107 001c 	add.w	r0, r7, #28
 8004e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d122      	bne.n	8004e8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d105      	bne.n	8004e7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f94a 	bl	8005118 <USB_CoreReset>
 8004e84:	4603      	mov	r3, r0
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e01a      	b.n	8004ec0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f93e 	bl	8005118 <USB_CoreReset>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004eb2:	e005      	b.n	8004ec0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10b      	bne.n	8004ede <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f043 0206 	orr.w	r2, r3, #6
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eea:	b004      	add	sp, #16
 8004eec:	4770      	bx	lr

08004eee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 0201 	bic.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d106      	bne.n	8004f5e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	e00b      	b.n	8004f76 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e001      	b.n	8004f76 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e003      	b.n	8004f7e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f76:	2032      	movs	r0, #50	; 0x32
 8004f78:	f7fb fafe 	bl	8000578 <HAL_Delay>

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <USB_FlushTxFifo+0x48>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d0f0      	beq.n	8004fa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	00030d40 	.word	0x00030d40

08004fd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <USB_FlushRxFifo+0x40>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e006      	b.n	8005006 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d0f0      	beq.n	8004fe6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	00030d40 	.word	0x00030d40

08005018 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	460b      	mov	r3, r1
 8005028:	71fb      	strb	r3, [r7, #7]
 800502a:	4613      	mov	r3, r2
 800502c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11a      	bne.n	8005074 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800503e:	88bb      	ldrh	r3, [r7, #4]
 8005040:	3303      	adds	r3, #3
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e00f      	b.n	800506c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	031a      	lsls	r2, r3, #12
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005058:	461a      	mov	r2, r3
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3304      	adds	r3, #4
 8005064:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	3301      	adds	r3, #1
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	429a      	cmp	r2, r3
 8005072:	d3eb      	bcc.n	800504c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005082:	b480      	push	{r7}
 8005084:	b089      	sub	sp, #36	; 0x24
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	3303      	adds	r3, #3
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e00b      	b.n	80050be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3304      	adds	r3, #4
 80050b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d3ef      	bcc.n	80050a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3724      	adds	r7, #36	; 0x24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ec:	68fb      	ldr	r3, [r7, #12]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0301 	and.w	r3, r3, #1
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <USB_CoreReset+0x64>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e01b      	b.n	800516e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	daf2      	bge.n	8005124 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f043 0201 	orr.w	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <USB_CoreReset+0x64>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e006      	b.n	800516e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d0f0      	beq.n	800514e <USB_CoreReset+0x36>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	00030d40 	.word	0x00030d40

08005180 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005180:	b084      	sub	sp, #16
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	f107 001c 	add.w	r0, r7, #28
 800518e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800519c:	461a      	mov	r2, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d018      	beq.n	8005204 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d10a      	bne.n	80051ee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051e6:	f043 0304 	orr.w	r3, r3, #4
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e014      	b.n	8005218 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051fc:	f023 0304 	bic.w	r3, r3, #4
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e009      	b.n	8005218 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005212:	f023 0304 	bic.w	r3, r3, #4
 8005216:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005218:	2110      	movs	r1, #16
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff feb4 	bl	8004f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fed7 	bl	8004fd4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e015      	b.n	8005258 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d3e5      	bcc.n	800522c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005260:	2101      	movs	r1, #1
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8ac 	bl	80053c0 <USB_DriveVbus>

  HAL_Delay(200U);
 8005268:	20c8      	movs	r0, #200	; 0xc8
 800526a:	f7fb f985 	bl	8000578 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <USB_HostInit+0x164>)
 8005294:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <USB_HostInit+0x168>)
 800529a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800529e:	e009      	b.n	80052b4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a10      	ldr	r2, [pc, #64]	; (80052ec <USB_HostInit+0x16c>)
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <USB_HostInit+0x170>)
 80052b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d105      	bne.n	80052c6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f043 0210 	orr.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <USB_HostInit+0x174>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052de:	b004      	add	sp, #16
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	01000200 	.word	0x01000200
 80052e8:	00e00300 	.word	0x00e00300
 80052ec:	00600080 	.word	0x00600080
 80052f0:	004000e0 	.word	0x004000e0
 80052f4:	a3200008 	.word	0xa3200008

080052f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	461a      	mov	r2, r3
 8005342:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005346:	6053      	str	r3, [r2, #4]
 8005348:	e009      	b.n	800535e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d106      	bne.n	800535e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005356:	461a      	mov	r2, r3
 8005358:	f241 7370 	movw	r3, #6000	; 0x1770
 800535c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800538c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800539c:	2064      	movs	r0, #100	; 0x64
 800539e:	f7fb f8eb 	bl	8000578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80053b0:	200a      	movs	r0, #10
 80053b2:	f7fb f8e1 	bl	8000578 <HAL_Delay>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <USB_DriveVbus+0x44>
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d106      	bne.n	8005404 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005402:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	d109      	bne.n	8005424 <USB_DriveVbus+0x64>
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	0c5b      	lsrs	r3, r3, #17
 8005450:	f003 0303 	and.w	r3, r3, #3
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	b29b      	uxth	r3, r3
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4603      	mov	r3, r0
 8005494:	70fb      	strb	r3, [r7, #3]
 8005496:	460b      	mov	r3, r1
 8005498:	70bb      	strb	r3, [r7, #2]
 800549a:	4613      	mov	r3, r2
 800549c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b2:	461a      	mov	r2, r3
 80054b4:	f04f 33ff 	mov.w	r3, #4294967295
 80054b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80054ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d87e      	bhi.n	80055c0 <USB_HC_Init+0x13c>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <USB_HC_Init+0x44>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	08005583 	.word	0x08005583
 80054d0:	080054d9 	.word	0x080054d9
 80054d4:	08005545 	.word	0x08005545
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80054ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80054ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da10      	bge.n	8005516 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	440a      	add	r2, r1
 800550a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005512:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005514:	e057      	b.n	80055c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551e:	2b00      	cmp	r3, #0
 8005520:	d051      	beq.n	80055c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	440a      	add	r2, r1
 8005538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005540:	60d3      	str	r3, [r2, #12]
      break;
 8005542:	e040      	b.n	80055c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	461a      	mov	r2, r3
 8005552:	f240 639d 	movw	r3, #1693	; 0x69d
 8005556:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005558:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da34      	bge.n	80055ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	0151      	lsls	r1, r2, #5
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	440a      	add	r2, r1
 8005576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005580:	e023      	b.n	80055ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	f240 2325 	movw	r3, #549	; 0x225
 8005594:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005596:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800559a:	2b00      	cmp	r3, #0
 800559c:	da17      	bge.n	80055ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80055bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80055be:	e006      	b.n	80055ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	75fb      	strb	r3, [r7, #23]
      break;
 80055c4:	e004      	b.n	80055d0 <USB_HC_Init+0x14c>
      break;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <USB_HC_Init+0x14c>
      break;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <USB_HC_Init+0x14c>
      break;
 80055ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	2101      	movs	r1, #1
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055ea:	4313      	orrs	r3, r2
 80055ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da03      	bge.n	800560a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e001      	b.n	800560e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800560e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e001      	b.n	8005622 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005622:	787b      	ldrb	r3, [r7, #1]
 8005624:	059b      	lsls	r3, r3, #22
 8005626:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800562a:	78bb      	ldrb	r3, [r7, #2]
 800562c:	02db      	lsls	r3, r3, #11
 800562e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005632:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005638:	049b      	lsls	r3, r3, #18
 800563a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800563e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005646:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	0159      	lsls	r1, r3, #5
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	440b      	add	r3, r1
 8005654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005658:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800565e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005664:	2b03      	cmp	r3, #3
 8005666:	d10f      	bne.n	8005688 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	440a      	add	r2, r1
 800567e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005686:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
}
 800568a:	4618      	mov	r0, r3
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop

08005698 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08c      	sub	sp, #48	; 0x30
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80056b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d028      	beq.n	8005714 <USB_HC_StartXfer+0x7c>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d124      	bne.n	8005714 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <USB_HC_StartXfer+0x50>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	795b      	ldrb	r3, [r3, #5]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fa2c 	bl	8005b3c <USB_DoPing>
      return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e111      	b.n	800590c <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d112      	bne.n	8005714 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	440a      	add	r2, r1
 8005704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005708:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800570c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d018      	beq.n	800574e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	8912      	ldrh	r2, [r2, #8]
 8005724:	4413      	add	r3, r2
 8005726:	3b01      	subs	r3, #1
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	8912      	ldrh	r2, [r2, #8]
 800572c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005730:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005732:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005734:	8b7b      	ldrh	r3, [r7, #26]
 8005736:	429a      	cmp	r2, r3
 8005738:	d90b      	bls.n	8005752 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800573a:	8b7b      	ldrh	r3, [r7, #26]
 800573c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800573e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	8912      	ldrh	r2, [r2, #8]
 8005744:	fb03 f202 	mul.w	r2, r3, r2
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	611a      	str	r2, [r3, #16]
 800574c:	e001      	b.n	8005752 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800574e:	2301      	movs	r3, #1
 8005750:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	78db      	ldrb	r3, [r3, #3]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800575a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	8912      	ldrh	r2, [r2, #8]
 8005760:	fb03 f202 	mul.w	r2, r3, r2
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005772:	04d9      	lsls	r1, r3, #19
 8005774:	4b67      	ldr	r3, [pc, #412]	; (8005914 <USB_HC_StartXfer+0x27c>)
 8005776:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005778:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	7a9b      	ldrb	r3, [r3, #10]
 800577e:	075b      	lsls	r3, r3, #29
 8005780:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	0148      	lsls	r0, r1, #5
 8005788:	6a39      	ldr	r1, [r7, #32]
 800578a:	4401      	add	r1, r0
 800578c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005790:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005792:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68d9      	ldr	r1, [r3, #12]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	460a      	mov	r2, r1
 80057ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	7e7b      	ldrb	r3, [r7, #25]
 80057f6:	075b      	lsls	r3, r3, #29
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	0148      	lsls	r0, r1, #5
 80057fc:	6a39      	ldr	r1, [r7, #32]
 80057fe:	4401      	add	r1, r0
 8005800:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a40      	ldr	r2, [pc, #256]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005818:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800581a:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <USB_HC_StartXfer+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005824:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800582e:	4b3a      	ldr	r3, [pc, #232]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005836:	4a38      	ldr	r2, [pc, #224]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e005      	b.n	8005848 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800583c:	4b36      	ldr	r3, [pc, #216]	; (8005918 <USB_HC_StartXfer+0x280>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005844:	4a34      	ldr	r2, [pc, #208]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005846:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005848:	4b33      	ldr	r3, [pc, #204]	; (8005918 <USB_HC_StartXfer+0x280>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005850:	4a31      	ldr	r2, [pc, #196]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005852:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	461a      	mov	r2, r3
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <USB_HC_StartXfer+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d14d      	bne.n	800590a <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d149      	bne.n	800590a <USB_HC_StartXfer+0x272>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d045      	beq.n	800590a <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	79db      	ldrb	r3, [r3, #7]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d830      	bhi.n	80058e8 <USB_HC_StartXfer+0x250>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <USB_HC_StartXfer+0x1f4>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058c1 	.word	0x080058c1
 8005894:	0800589d 	.word	0x0800589d
 8005898:	080058c1 	.word	0x080058c1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	3303      	adds	r3, #3
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80058a6:	8afa      	ldrh	r2, [r7, #22]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d91c      	bls.n	80058ec <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f043 0220 	orr.w	r2, r3, #32
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80058be:	e015      	b.n	80058ec <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	3303      	adds	r3, #3
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80058ca:	8afa      	ldrh	r2, [r7, #22]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90a      	bls.n	80058f0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	619a      	str	r2, [r3, #24]
          }
          break;
 80058e6:	e003      	b.n	80058f0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80058e8:	bf00      	nop
 80058ea:	e002      	b.n	80058f2 <USB_HC_StartXfer+0x25a>
          break;
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <USB_HC_StartXfer+0x25a>
          break;
 80058f0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68d9      	ldr	r1, [r3, #12]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	785a      	ldrb	r2, [r3, #1]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2000      	movs	r0, #0
 8005902:	9000      	str	r0, [sp, #0]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fb87 	bl	8005018 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	1ff80000 	.word	0x1ff80000
 8005918:	200000b0 	.word	0x200000b0

0800591c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	b29b      	uxth	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4413      	add	r3, r2
 800595e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	0c9b      	lsrs	r3, r3, #18
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <USB_HC_Halt+0x3a>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d16c      	bne.n	8005a52 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005996:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d143      	bne.n	8005a2c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a02:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	3301      	adds	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a10:	d81d      	bhi.n	8005a4e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a28:	d0ec      	beq.n	8005a04 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a2a:	e080      	b.n	8005b2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a4a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a4c:	e06f      	b.n	8005b2e <USB_HC_Halt+0x1f0>
          break;
 8005a4e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a50:	e06d      	b.n	8005b2e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a70:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d143      	bne.n	8005b0a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ae0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aee:	d81d      	bhi.n	8005b2c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b06:	d0ec      	beq.n	8005ae2 <USB_HC_Halt+0x1a4>
 8005b08:	e011      	b.n	8005b2e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e000      	b.n	8005b2e <USB_HC_Halt+0x1f0>
          break;
 8005b2c:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	371c      	adds	r7, #28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	04da      	lsls	r2, r3, #19
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <USB_DoPing+0x74>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	1ff80000 	.word	0x1ff80000

08005bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff f9a3 	bl	8004f10 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005bca:	2110      	movs	r1, #16
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff f9db 	bl	8004f88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff f9fe 	bl	8004fd4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bd8:	2300      	movs	r3, #0
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	e01f      	b.n	8005c1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	461a      	mov	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d9dc      	bls.n	8005bde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e034      	b.n	8005c94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	3301      	adds	r3, #1
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c70:	d80c      	bhi.n	8005c8c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c88:	d0ec      	beq.n	8005c64 <USB_StopHost+0xb0>
 8005c8a:	e000      	b.n	8005c8e <USB_StopHost+0xda>
        break;
 8005c8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3301      	adds	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d9c7      	bls.n	8005c2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cae:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff f91c 	bl	8004eee <USB_EnableGlobalInt>

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8005ccc:	2301      	movs	r3, #1
 8005cce:	2202      	movs	r2, #2
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fc8a 	bl	80065ec <USBH_FindInterface>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2bff      	cmp	r3, #255	; 0xff
 8005ce0:	f000 812a 	beq.w	8005f38 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005ce4:	7bbb      	ldrb	r3, [r7, #14]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc63 	bl	80065b4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005cf4:	2050      	movs	r0, #80	; 0x50
 8005cf6:	f005 fe37 	bl	800b968 <malloc>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	211a      	movs	r1, #26
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da15      	bge.n	8005d4c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	211a      	movs	r1, #26
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	211a      	movs	r1, #26
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 ff2b 	bl	8007bae <USBH_AllocPipe>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	7819      	ldrb	r1, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	7858      	ldrb	r0, [r3, #1]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	8952      	ldrh	r2, [r2, #10]
 8005d78:	9202      	str	r2, [sp, #8]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4623      	mov	r3, r4
 8005d82:	4602      	mov	r2, r0
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fee3 	bl	8007b50 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f005 fd0e 	bl	800b7b4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	210a      	movs	r1, #10
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fc24 	bl	80065ec <USBH_FindInterface>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	2bff      	cmp	r3, #255	; 0xff
 8005dac:	f000 80c4 	beq.w	8005f38 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	211a      	movs	r1, #26
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da16      	bge.n	8005df6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	211a      	movs	r1, #26
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	211a      	movs	r1, #26
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	835a      	strh	r2, [r3, #26]
 8005df4:	e015      	b.n	8005e22 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	211a      	movs	r1, #26
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	211a      	movs	r1, #26
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005e1c:	881a      	ldrh	r2, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	211a      	movs	r1, #26
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	b25b      	sxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da16      	bge.n	8005e68 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	211a      	movs	r1, #26
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	211a      	movs	r1, #26
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005e60:	881a      	ldrh	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	835a      	strh	r2, [r3, #26]
 8005e66:	e015      	b.n	8005e94 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	211a      	movs	r1, #26
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	4413      	add	r3, r2
 8005e74:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	211a      	movs	r1, #26
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005e8e:	881a      	ldrh	r2, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	7b9b      	ldrb	r3, [r3, #14]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fe87 	bl	8007bae <USBH_AllocPipe>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	7bdb      	ldrb	r3, [r3, #15]
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fe7d 	bl	8007bae <USBH_AllocPipe>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	7b59      	ldrb	r1, [r3, #13]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	7b98      	ldrb	r0, [r3, #14]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	8b12      	ldrh	r2, [r2, #24]
 8005ed4:	9202      	str	r2, [sp, #8]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	9201      	str	r2, [sp, #4]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	4623      	mov	r3, r4
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fe35 	bl	8007b50 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	7b19      	ldrb	r1, [r3, #12]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	7bd8      	ldrb	r0, [r3, #15]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	8b52      	ldrh	r2, [r2, #26]
 8005efe:	9202      	str	r2, [sp, #8]
 8005f00:	2202      	movs	r2, #2
 8005f02:	9201      	str	r2, [sp, #4]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4623      	mov	r3, r4
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fe20 	bl	8007b50 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	7b5b      	ldrb	r3, [r3, #13]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f005 fc47 	bl	800b7b4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f005 fc40 	bl	800b7b4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}

08005f42 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 fe13 	bl	8007b8e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fe3b 	bl	8007bea <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	7b1b      	ldrb	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00e      	beq.n	8005fa0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	7b1b      	ldrb	r3, [r3, #12]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fe00 	bl	8007b8e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	7b1b      	ldrb	r3, [r3, #12]
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fe28 	bl	8007bea <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7b5b      	ldrb	r3, [r3, #13]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	7b5b      	ldrb	r3, [r3, #13]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f001 fded 	bl	8007b8e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	7b5b      	ldrb	r3, [r3, #13]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fe15 	bl	8007bea <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f005 fccc 	bl	800b978 <free>
    phost->pActiveClass->pData = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	3340      	adds	r3, #64	; 0x40
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f8b2 	bl	800617a <GetLineCoding>
 8006016:	4603      	mov	r3, r0
 8006018:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d105      	bne.n	800602c <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006026:	2102      	movs	r1, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
  }
  return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006058:	2b04      	cmp	r3, #4
 800605a:	d877      	bhi.n	800614c <USBH_CDC_Process+0x114>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBH_CDC_Process+0x2c>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006079 	.word	0x08006079
 8006068:	0800607f 	.word	0x0800607f
 800606c:	080060af 	.word	0x080060af
 8006070:	08006123 	.word	0x08006123
 8006074:	08006131 	.word	0x08006131
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
    break;
 800607c:	e06d      	b.n	800615a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f897 	bl	80061b8 <SetLineCoding>
 800608a:	4603      	mov	r3, r0
 800608c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800608e:	7bbb      	ldrb	r3, [r7, #14]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800609c:	e058      	b.n	8006150 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d055      	beq.n	8006150 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2204      	movs	r2, #4
 80060a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80060ac:	e050      	b.n	8006150 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3340      	adds	r3, #64	; 0x40
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f860 	bl	800617a <GetLineCoding>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d126      	bne.n	8006112 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d13b      	bne.n	8006154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d133      	bne.n	8006154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d12b      	bne.n	8006154 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006104:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006106:	429a      	cmp	r2, r3
 8006108:	d124      	bne.n	8006154 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f982 	bl	8006414 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006110:	e020      	b.n	8006154 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d01d      	beq.n	8006154 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006120:	e018      	b.n	8006154 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f867 	bl	80061f6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f8f6 	bl	800631a <CDC_ProcessReception>
    break;
 800612e:	e014      	b.n	800615a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fff8 	bl	8007128 <USBH_ClrFeature>
 8006138:	4603      	mov	r3, r0
 800613a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800614a:	e005      	b.n	8006158 <USBH_CDC_Process+0x120>

  default:
    break;
 800614c:	bf00      	nop
 800614e:	e004      	b.n	800615a <USBH_CDC_Process+0x122>
    break;
 8006150:	bf00      	nop
 8006152:	e002      	b.n	800615a <USBH_CDC_Process+0x122>
    break;
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <USBH_CDC_Process+0x122>
    break;
 8006158:	bf00      	nop

  }

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	22a1      	movs	r2, #161	; 0xa1
 8006188:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2207      	movs	r2, #7
 80061a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2207      	movs	r2, #7
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 f99d 	bl	80074e8 <USBH_CtlReq>
 80061ae:	4603      	mov	r3, r0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2221      	movs	r2, #33	; 0x21
 80061c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2207      	movs	r2, #7
 80061de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2207      	movs	r2, #7
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 f97e 	bl	80074e8 <USBH_CtlReq>
 80061ec:	4603      	mov	r3, r0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af02      	add	r7, sp, #8
 80061fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006208:	2300      	movs	r3, #0
 800620a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006212:	2b01      	cmp	r3, #1
 8006214:	d002      	beq.n	800621c <CDC_ProcessTransmission+0x26>
 8006216:	2b02      	cmp	r3, #2
 8006218:	d023      	beq.n	8006262 <CDC_ProcessTransmission+0x6c>
      }
    }
    break;

  default:
    break;
 800621a:	e07a      	b.n	8006312 <CDC_ProcessTransmission+0x11c>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	8b12      	ldrh	r2, [r2, #24]
 8006224:	4293      	cmp	r3, r2
 8006226:	d90b      	bls.n	8006240 <CDC_ProcessTransmission+0x4a>
      USBH_BulkSendData (phost,
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8b1a      	ldrh	r2, [r3, #24]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	7b5b      	ldrb	r3, [r3, #13]
 8006234:	2001      	movs	r0, #1
 8006236:	9000      	str	r0, [sp, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fc46 	bl	8007aca <USBH_BulkSendData>
 800623e:	e00b      	b.n	8006258 <CDC_ProcessTransmission+0x62>
      USBH_BulkSendData (phost,
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b5b      	ldrb	r3, [r3, #13]
 800624e:	2001      	movs	r0, #1
 8006250:	9000      	str	r0, [sp, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fc39 	bl	8007aca <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006260:	e057      	b.n	8006312 <CDC_ProcessTransmission+0x11c>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	7b5b      	ldrb	r3, [r3, #13]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f005 fa79 	bl	800b760 <USBH_LL_GetURBState>
 800626e:	4603      	mov	r3, r0
 8006270:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d136      	bne.n	80062e6 <CDC_ProcessTransmission+0xf0>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	8b12      	ldrh	r2, [r2, #24]
 8006280:	4293      	cmp	r3, r2
 8006282:	d90e      	bls.n	80062a2 <CDC_ProcessTransmission+0xac>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	8b12      	ldrh	r2, [r2, #24]
 800628c:	1a9a      	subs	r2, r3, r2
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	8b12      	ldrh	r2, [r2, #24]
 800629a:	441a      	add	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]
 80062a0:	e002      	b.n	80062a8 <CDC_ProcessTransmission+0xb2>
        CDC_Handle->TxDataLength = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <CDC_ProcessTransmission+0xc4>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80062b8:	e006      	b.n	80062c8 <CDC_ProcessTransmission+0xd2>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f892 	bl	80063ec <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2204      	movs	r2, #4
 80062cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062dc:	2200      	movs	r2, #0
 80062de:	4619      	mov	r1, r3
 80062e0:	f001 fd7c 	bl	8007ddc <osMessagePut>
    break;
 80062e4:	e014      	b.n	8006310 <CDC_ProcessTransmission+0x11a>
      if (URB_Status == USBH_URB_NOTREADY)
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d111      	bne.n	8006310 <CDC_ProcessTransmission+0x11a>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2204      	movs	r2, #4
 80062f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006308:	2200      	movs	r2, #0
 800630a:	4619      	mov	r1, r3
 800630c:	f001 fd66 	bl	8007ddc <osMessagePut>
    break;
 8006310:	bf00      	nop
  }
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b086      	sub	sp, #24
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800632c:	2300      	movs	r3, #0
 800632e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006336:	2b03      	cmp	r3, #3
 8006338:	d002      	beq.n	8006340 <CDC_ProcessReception+0x26>
 800633a:	2b04      	cmp	r3, #4
 800633c:	d00e      	beq.n	800635c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800633e:	e051      	b.n	80063e4 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6a19      	ldr	r1, [r3, #32]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	8b5a      	ldrh	r2, [r3, #26]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	7b1b      	ldrb	r3, [r3, #12]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fbe1 	bl	8007b14 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2204      	movs	r2, #4
 8006356:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800635a:	e043      	b.n	80063e4 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	7b1b      	ldrb	r3, [r3, #12]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f005 f9fc 	bl	800b760 <USBH_LL_GetURBState>
 8006368:	4603      	mov	r3, r0
 800636a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d137      	bne.n	80063e2 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	7b1b      	ldrb	r3, [r3, #12]
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f005 f95f 	bl	800b63c <USBH_LL_GetLastXferSize>
 800637e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	429a      	cmp	r2, r3
 8006388:	d016      	beq.n	80063b8 <CDC_ProcessReception+0x9e>
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	8b5b      	ldrh	r3, [r3, #26]
 800638e:	461a      	mov	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4293      	cmp	r3, r2
 8006394:	d910      	bls.n	80063b8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	441a      	add	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2203      	movs	r2, #3
 80063b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80063b6:	e006      	b.n	80063c6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f81d 	bl	8006400 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063da:	2200      	movs	r2, #0
 80063dc:	4619      	mov	r1, r3
 80063de:	f001 fcfd 	bl	8007ddc <osMessagePut>
    break;
 80063e2:	bf00      	nop
  }
}
 80063e4:	bf00      	nop
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006428:	b5b0      	push	{r4, r5, r7, lr}
 800642a:	b090      	sub	sp, #64	; 0x40
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800643c:	2302      	movs	r3, #2
 800643e:	e03d      	b.n	80064bc <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	79fa      	ldrb	r2, [r7, #7]
 8006444:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f837 	bl	80064cc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <USBH_Init+0x9c>)
 800646e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8006478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f001 fc83 	bl	8007d8a <osMessageCreate>
 8006484:	4602      	mov	r2, r0
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <USBH_Init+0xa0>)
 800648e:	f107 0414 	add.w	r4, r7, #20
 8006492:	461d      	mov	r5, r3
 8006494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800649c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	68f9      	ldr	r1, [r7, #12]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 fc0f 	bl	8007cca <osThreadCreate>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f005 f803 	bl	800b4c0 <USBH_LL_Init>

  return USBH_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3740      	adds	r7, #64	; 0x40
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdb0      	pop	{r4, r5, r7, pc}
 80064c4:	0800bbd8 	.word	0x0800bbd8
 80064c8:	0800bbe8 	.word	0x0800bbe8

080064cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80064d8:	e008      	b.n	80064ec <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	32e0      	adds	r2, #224	; 0xe0
 80064e0:	2100      	movs	r1, #0
 80064e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b0e      	cmp	r3, #14
 80064f0:	d9f3      	bls.n	80064da <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e009      	b.n	800650c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006512:	d3f1      	bcc.n	80064f8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10f      	bne.n	800659c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	33dc      	adds	r3, #220	; 0xdc
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	e004      	b.n	80065a6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800659c:	2302      	movs	r3, #2
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	e001      	b.n	80065a6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d204      	bcs.n	80065da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80065d8:	e001      	b.n	80065de <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80065da:	2302      	movs	r3, #2
 80065dc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	70fb      	strb	r3, [r7, #3]
 80065fe:	460b      	mov	r3, r1
 8006600:	70bb      	strb	r3, [r7, #2]
 8006602:	4613      	mov	r3, r2
 8006604:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006614:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006616:	e025      	b.n	8006664 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	221a      	movs	r2, #26
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	3308      	adds	r3, #8
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	3302      	adds	r3, #2
 8006628:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	795b      	ldrb	r3, [r3, #5]
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	429a      	cmp	r2, r3
 8006632:	d002      	beq.n	800663a <USBH_FindInterface+0x4e>
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d111      	bne.n	800665e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800663e:	78ba      	ldrb	r2, [r7, #2]
 8006640:	429a      	cmp	r2, r3
 8006642:	d002      	beq.n	800664a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006644:	78bb      	ldrb	r3, [r7, #2]
 8006646:	2bff      	cmp	r3, #255	; 0xff
 8006648:	d109      	bne.n	800665e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800664e:	787a      	ldrb	r2, [r7, #1]
 8006650:	429a      	cmp	r2, r3
 8006652:	d002      	beq.n	800665a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006654:	787b      	ldrb	r3, [r7, #1]
 8006656:	2bff      	cmp	r3, #255	; 0xff
 8006658:	d101      	bne.n	800665e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	e006      	b.n	800666c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	3301      	adds	r3, #1
 8006662:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006664:	7dfb      	ldrb	r3, [r7, #23]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d9d6      	bls.n	8006618 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800666a:	23ff      	movs	r3, #255	; 0xff
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f004 ff63 	bl	800b54c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006686:	2101      	movs	r1, #1
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f005 f87c 	bl	800b786 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af04      	add	r7, sp, #16
 800669e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80066a0:	2302      	movs	r3, #2
 80066a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb7e 	bl	8006daa <USBH_IsPortEnabled>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10c      	bne.n	80066ce <USBH_Process+0x36>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d002      	beq.n	80066ce <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2203      	movs	r2, #3
 80066cc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b0b      	cmp	r3, #11
 80066d6:	f200 81ab 	bhi.w	8006a30 <USBH_Process+0x398>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <USBH_Process+0x48>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006711 	.word	0x08006711
 80066e4:	0800674f 	.word	0x0800674f
 80066e8:	08006763 	.word	0x08006763
 80066ec:	08006a0b 	.word	0x08006a0b
 80066f0:	08006a31 	.word	0x08006a31
 80066f4:	0800680d 	.word	0x0800680d
 80066f8:	080069a5 	.word	0x080069a5
 80066fc:	0800683d 	.word	0x0800683d
 8006700:	08006879 	.word	0x08006879
 8006704:	080068b3 	.word	0x080068b3
 8006708:	080068fb 	.word	0x080068fb
 800670c:	080069f3 	.word	0x080069f3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 818b 	beq.w	8006a34 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006724:	20c8      	movs	r0, #200	; 0xc8
 8006726:	f005 f878 	bl	800b81a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f004 ff6b 	bl	800b606 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006744:	2200      	movs	r2, #0
 8006746:	4619      	mov	r1, r3
 8006748:	f001 fb48 	bl	8007ddc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800674c:	e172      	b.n	8006a34 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006754:	2b01      	cmp	r3, #1
 8006756:	f040 816f 	bne.w	8006a38 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006760:	e16a      	b.n	8006a38 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006762:	2064      	movs	r0, #100	; 0x64
 8006764:	f005 f859 	bl	800b81a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f004 ff25 	bl	800b5b8 <USBH_LL_GetSpeed>
 800676e:	4603      	mov	r3, r0
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2205      	movs	r2, #5
 800677c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800677e:	2100      	movs	r1, #0
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fa14 	bl	8007bae <USBH_AllocPipe>
 8006786:	4603      	mov	r3, r0
 8006788:	461a      	mov	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fa0c 	bl	8007bae <USBH_AllocPipe>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7919      	ldrb	r1, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80067b2:	b292      	uxth	r2, r2
 80067b4:	9202      	str	r2, [sp, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	9201      	str	r2, [sp, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	4603      	mov	r3, r0
 80067be:	2280      	movs	r2, #128	; 0x80
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f9c5 	bl	8007b50 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7959      	ldrb	r1, [r3, #5]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80067da:	b292      	uxth	r2, r2
 80067dc:	9202      	str	r2, [sp, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	9201      	str	r2, [sp, #4]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4603      	mov	r3, r0
 80067e6:	2200      	movs	r2, #0
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f9b1 	bl	8007b50 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006802:	2200      	movs	r2, #0
 8006804:	4619      	mov	r1, r3
 8006806:	f001 fae9 	bl	8007ddc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800680a:	e120      	b.n	8006a4e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f923 	bl	8006a58 <USBH_HandleEnum>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 8111 	bne.w	8006a3c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006828:	2b01      	cmp	r3, #1
 800682a:	d103      	bne.n	8006834 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2208      	movs	r2, #8
 8006830:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006832:	e103      	b.n	8006a3c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2207      	movs	r2, #7
 8006838:	701a      	strb	r2, [r3, #0]
    break;
 800683a:	e0ff      	b.n	8006a3c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80fc 	beq.w	8006a40 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800684e:	2101      	movs	r1, #1
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2208      	movs	r2, #8
 8006858:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2205      	movs	r2, #5
 800685e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800686e:	2200      	movs	r2, #0
 8006870:	4619      	mov	r1, r3
 8006872:	f001 fab3 	bl	8007ddc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006876:	e0e3      	b.n	8006a40 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800687e:	b29b      	uxth	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc09 	bl	800709a <USBH_SetCfg>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2209      	movs	r2, #9
 8006892:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a8:	2200      	movs	r2, #0
 80068aa:	4619      	mov	r1, r3
 80068ac:	f001 fa96 	bl	8007ddc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80068b0:	e0cd      	b.n	8006a4e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80068c0:	2101      	movs	r1, #1
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fc0c 	bl	80070e0 <USBH_SetFeature>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	220a      	movs	r2, #10
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e002      	b.n	80068dc <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	220a      	movs	r2, #10
 80068da:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068f0:	2200      	movs	r2, #0
 80068f2:	4619      	mov	r1, r3
 80068f4:	f001 fa72 	bl	8007ddc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80068f8:	e0a9      	b.n	8006a4e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d040      	beq.n	8006986 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	e017      	b.n	8006942 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33dc      	adds	r3, #220	; 0xdc
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	791a      	ldrb	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006926:	429a      	cmp	r2, r3
 8006928:	d108      	bne.n	800693c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	33dc      	adds	r3, #220	; 0xdc
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	3301      	adds	r3, #1
 8006940:	73fb      	strb	r3, [r7, #15]
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0e4      	beq.n	8006912 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800694e:	2b00      	cmp	r3, #0
 8006950:	d016      	beq.n	8006980 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2206      	movs	r2, #6
 8006968:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006970:	2103      	movs	r1, #3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
 8006976:	e006      	b.n	8006986 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	220d      	movs	r2, #13
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e002      	b.n	8006986 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	220d      	movs	r2, #13
 8006984:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2205      	movs	r2, #5
 800698a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800699a:	2200      	movs	r2, #0
 800699c:	4619      	mov	r1, r3
 800699e:	f001 fa1d 	bl	8007ddc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80069a2:	e054      	b.n	8006a4e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00f      	beq.n	80069ce <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d13e      	bne.n	8006a44 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	220b      	movs	r2, #11
 80069ca:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80069cc:	e03a      	b.n	8006a44 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	220d      	movs	r2, #13
 80069d2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2205      	movs	r2, #5
 80069d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069e8:	2200      	movs	r2, #0
 80069ea:	4619      	mov	r1, r3
 80069ec:	f001 f9f6 	bl	8007ddc <osMessagePut>
    break;
 80069f0:	e028      	b.n	8006a44 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d025      	beq.n	8006a48 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
    break;
 8006a08:	e01e      	b.n	8006a48 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fd5e 	bl	80064cc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8006a2e:	e00d      	b.n	8006a4c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8006a30:	bf00      	nop
 8006a32:	e00c      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a34:	bf00      	nop
 8006a36:	e00a      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a38:	bf00      	nop
 8006a3a:	e008      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a3c:	bf00      	nop
 8006a3e:	e006      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a40:	bf00      	nop
 8006a42:	e004      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a44:	bf00      	nop
 8006a46:	e002      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <USBH_Process+0x3b6>
    break;
 8006a4c:	bf00      	nop
  }
 return USBH_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af04      	add	r7, sp, #16
 8006a5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b07      	cmp	r3, #7
 8006a6a:	f200 8132 	bhi.w	8006cd2 <USBH_HandleEnum+0x27a>
 8006a6e:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <USBH_HandleEnum+0x1c>)
 8006a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006b07 	.word	0x08006b07
 8006a7c:	08006b1f 	.word	0x08006b1f
 8006a80:	08006b95 	.word	0x08006b95
 8006a84:	08006bad 	.word	0x08006bad
 8006a88:	08006bcb 	.word	0x08006bcb
 8006a8c:	08006c37 	.word	0x08006c37
 8006a90:	08006c87 	.word	0x08006c87
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006a94:	2108      	movs	r1, #8
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa2f 	bl	8006efa <USBH_Get_DevDesc>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8119 	bne.w	8006cd6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7919      	ldrb	r1, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006ac8:	b292      	uxth	r2, r2
 8006aca:	9202      	str	r2, [sp, #8]
 8006acc:	2200      	movs	r2, #0
 8006ace:	9201      	str	r2, [sp, #4]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 f83a 	bl	8007b50 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7959      	ldrb	r1, [r3, #5]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006af0:	b292      	uxth	r2, r2
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4603      	mov	r3, r0
 8006afc:	2200      	movs	r2, #0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 f826 	bl	8007b50 <USBH_OpenPipe>

    }
    break;
 8006b04:	e0e7      	b.n	8006cd6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006b06:	2112      	movs	r1, #18
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f9f6 	bl	8006efa <USBH_Get_DevDesc>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 80e2 	bne.w	8006cda <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8006b1c:	e0dd      	b.n	8006cda <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8006b1e:	2101      	movs	r1, #1
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fa96 	bl	8007052 <USBH_SetAddress>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 80d8 	bne.w	8006cde <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8006b2e:	2002      	movs	r0, #2
 8006b30:	f004 fe73 	bl	800b81a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2203      	movs	r2, #3
 8006b40:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7919      	ldrb	r1, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006b56:	b292      	uxth	r2, r2
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	2280      	movs	r2, #128	; 0x80
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fff3 	bl	8007b50 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7959      	ldrb	r1, [r3, #5]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	9201      	str	r2, [sp, #4]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 ffdf 	bl	8007b50 <USBH_OpenPipe>
    }
    break;
 8006b92:	e0a4      	b.n	8006cde <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006b94:	2109      	movs	r1, #9
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9d7 	bl	8006f4a <USBH_Get_CfgDesc>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 809f 	bne.w	8006ce2 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006baa:	e09a      	b.n	8006ce2 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9c8 	bl	8006f4a <USBH_Get_CfgDesc>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 8092 	bne.w	8006ce6 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006bc8:	e08d      	b.n	8006ce6 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01e      	beq.n	8006c12 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006be0:	23ff      	movs	r3, #255	; 0xff
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9d5 	bl	8006f92 <USBH_Get_StringDesc>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d17d      	bne.n	8006cea <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f001 f8e6 	bl	8007ddc <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006c10:	e06b      	b.n	8006cea <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2206      	movs	r2, #6
 8006c16:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	f001 f8d4 	bl	8007ddc <osMessagePut>
    break;
 8006c34:	e059      	b.n	8006cea <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006c4c:	23ff      	movs	r3, #255	; 0xff
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f99f 	bl	8006f92 <USBH_Get_StringDesc>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d149      	bne.n	8006cee <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2207      	movs	r2, #7
 8006c5e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006c60:	e045      	b.n	8006cee <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2207      	movs	r2, #7
 8006c66:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2205      	movs	r2, #5
 8006c6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f001 f8ac 	bl	8007ddc <osMessagePut>
    break;
 8006c84:	e033      	b.n	8006cee <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00f      	beq.n	8006cb0 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006c9c:	23ff      	movs	r3, #255	; 0xff
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f977 	bl	8006f92 <USBH_Get_StringDesc>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d123      	bne.n	8006cf2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006cae:	e020      	b.n	8006cf2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2205      	movs	r2, #5
 8006cb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f001 f886 	bl	8007ddc <osMessagePut>
    break;
 8006cd0:	e00f      	b.n	8006cf2 <USBH_HandleEnum+0x29a>

  default:
    break;
 8006cd2:	bf00      	nop
 8006cd4:	e00e      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cd6:	bf00      	nop
 8006cd8:	e00c      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cda:	bf00      	nop
 8006cdc:	e00a      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cde:	bf00      	nop
 8006ce0:	e008      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006ce2:	bf00      	nop
 8006ce4:	e006      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006ce6:	bf00      	nop
 8006ce8:	e004      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cea:	bf00      	nop
 8006cec:	e002      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <USBH_HandleEnum+0x29c>
    break;
 8006cf2:	bf00      	nop
  }
  return Status;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f804 	bl	8006d42 <USBH_HandleSof>
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b0b      	cmp	r3, #11
 8006d52:	d10a      	bne.n	8006d6a <USBH_HandleSof+0x28>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d005      	beq.n	8006d6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006d82:	bf00      	nop
}
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006d9e:	bf00      	nop
}
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10f      	bne.n	8006df6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dee:	2104      	movs	r1, #4
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
 8006df4:	e007      	b.n	8006e06 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d102      	bne.n	8006e06 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f000 ffdd 	bl	8007ddc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f004 fba4 	bl	800b582 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fed2 	bl	8007bea <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fecc 	bl	8007bea <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e6a:	2105      	movs	r1, #5
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f004 fb6b 	bl	800b54c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2203      	movs	r2, #3
 8006e7a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e90:	2200      	movs	r2, #0
 8006e92:	4619      	mov	r1, r3
 8006e94:	f000 ffa2 	bl	8007ddc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 ffcf 	bl	8007e5c <osMessageGet>
    if(event.status == osEventMessage)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d1f2      	bne.n	8006eaa <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff fbe7 	bl	8006698 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006eca:	e7ee      	b.n	8006eaa <USBH_Process_OS+0x8>

08006ecc <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4619      	mov	r1, r3
 8006eec:	f000 ff76 	bl	8007ddc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af02      	add	r7, sp, #8
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f18:	2100      	movs	r1, #0
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f864 	bl	8006fe8 <USBH_GetDescriptor>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f203 3022 	addw	r0, r3, #802	; 0x322
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	b292      	uxth	r2, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f000 f918 	bl	8007170 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af02      	add	r7, sp, #8
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	331c      	adds	r3, #28
 8006f5a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f83d 	bl	8006fe8 <USBH_GetDescriptor>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	72fb      	strb	r3, [r7, #11]
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d107      	bne.n	8006f88 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006f7e:	887a      	ldrh	r2, [r7, #2]
 8006f80:	68f9      	ldr	r1, [r7, #12]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f964 	bl	8007250 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006f88:	7afb      	ldrb	r3, [r7, #11]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b088      	sub	sp, #32
 8006f96:	af02      	add	r7, sp, #8
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	72fb      	strb	r3, [r7, #11]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fae:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f812 	bl	8006fe8 <USBH_GetDescriptor>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d107      	bne.n	8006fde <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fd4:	893a      	ldrh	r2, [r7, #8]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fa37 	bl	800744c <USBH_ParseStringDesc>
  }
  return status;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	72fb      	strb	r3, [r7, #11]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	789b      	ldrb	r3, [r3, #2]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d11c      	bne.n	800703c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007008:	b2da      	uxtb	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2206      	movs	r2, #6
 8007012:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	893a      	ldrh	r2, [r7, #8]
 8007018:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800701a:	893b      	ldrh	r3, [r7, #8]
 800701c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007024:	d104      	bne.n	8007030 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f240 4209 	movw	r2, #1033	; 0x409
 800702c:	829a      	strh	r2, [r3, #20]
 800702e:	e002      	b.n	8007036 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8b3a      	ldrh	r2, [r7, #24]
 800703a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800703c:	8b3b      	ldrh	r3, [r7, #24]
 800703e:	461a      	mov	r2, r3
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fa50 	bl	80074e8 <USBH_CtlReq>
 8007048:	4603      	mov	r3, r0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	460b      	mov	r3, r1
 800705c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10f      	bne.n	8007086 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2205      	movs	r2, #5
 8007070:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa2c 	bl	80074e8 <USBH_CtlReq>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d10e      	bne.n	80070cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2209      	movs	r2, #9
 80070b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	887a      	ldrh	r2, [r7, #2]
 80070be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fa09 	bl	80074e8 <USBH_CtlReq>
 80070d6:	4603      	mov	r3, r0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	789b      	ldrb	r3, [r3, #2]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d10f      	bne.n	8007114 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2203      	movs	r2, #3
 80070fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9e5 	bl	80074e8 <USBH_CtlReq>
 800711e:	4603      	mov	r3, r0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	789b      	ldrb	r3, [r3, #2]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d10f      	bne.n	800715c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f9c1 	bl	80074e8 <USBH_CtlReq>
 8007166:	4603      	mov	r3, r0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	785a      	ldrb	r2, [r3, #1]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3302      	adds	r3, #2
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b29a      	uxth	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3303      	adds	r3, #3
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	791a      	ldrb	r2, [r3, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	795a      	ldrb	r2, [r3, #5]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	799a      	ldrb	r2, [r3, #6]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	79da      	ldrb	r2, [r3, #7]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d939      	bls.n	8007244 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	3308      	adds	r3, #8
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3309      	adds	r3, #9
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	330a      	adds	r3, #10
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	330b      	adds	r3, #11
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	330c      	adds	r3, #12
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b29a      	uxth	r2, r3
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	330d      	adds	r3, #13
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	b29b      	uxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	7b9a      	ldrb	r2, [r3, #14]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	7bda      	ldrb	r2, [r3, #15]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7c1a      	ldrb	r2, [r3, #16]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	7c5a      	ldrb	r2, [r3, #17]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	745a      	strb	r2, [r3, #17]
  }
}
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	785a      	ldrb	r2, [r3, #1]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3302      	adds	r3, #2
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	b29a      	uxth	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3303      	adds	r3, #3
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	021b      	lsls	r3, r3, #8
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	791a      	ldrb	r2, [r3, #4]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	795a      	ldrb	r2, [r3, #5]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	799a      	ldrb	r2, [r3, #6]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	79da      	ldrb	r2, [r3, #7]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	7a1a      	ldrb	r2, [r3, #8]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b09      	cmp	r3, #9
 80072ca:	d95f      	bls.n	800738c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80072cc:	2309      	movs	r3, #9
 80072ce:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80072d4:	e051      	b.n	800737a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072d6:	f107 0316 	add.w	r3, r7, #22
 80072da:	4619      	mov	r1, r3
 80072dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072de:	f000 f8e8 	bl	80074b2 <USBH_GetNextDesc>
 80072e2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d146      	bne.n	800737a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80072ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072f0:	221a      	movs	r2, #26
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	3308      	adds	r3, #8
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4413      	add	r3, r2
 80072fc:	3302      	adds	r3, #2
 80072fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007302:	69f8      	ldr	r0, [r7, #28]
 8007304:	f000 f846 	bl	8007394 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007312:	e022      	b.n	800735a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007314:	f107 0316 	add.w	r3, r7, #22
 8007318:	4619      	mov	r1, r3
 800731a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800731c:	f000 f8c9 	bl	80074b2 <USBH_GetNextDesc>
 8007320:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b05      	cmp	r3, #5
 8007328:	d117      	bne.n	800735a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800732a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800732e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007332:	3201      	adds	r2, #1
 8007334:	00d2      	lsls	r2, r2, #3
 8007336:	211a      	movs	r1, #26
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	3308      	adds	r3, #8
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	3304      	adds	r3, #4
 8007346:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800734a:	69b8      	ldr	r0, [r7, #24]
 800734c:	f000 f851 	bl	80073f2 <USBH_ParseEPDesc>
            ep_ix++;
 8007350:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007354:	3301      	adds	r3, #1
 8007356:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007362:	429a      	cmp	r2, r3
 8007364:	d204      	bcs.n	8007370 <USBH_ParseCfgDesc+0x120>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	885a      	ldrh	r2, [r3, #2]
 800736a:	8afb      	ldrh	r3, [r7, #22]
 800736c:	429a      	cmp	r2, r3
 800736e:	d8d1      	bhi.n	8007314 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007374:	3301      	adds	r3, #1
 8007376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800737a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800737e:	2b01      	cmp	r3, #1
 8007380:	d804      	bhi.n	800738c <USBH_ParseCfgDesc+0x13c>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	885a      	ldrh	r2, [r3, #2]
 8007386:	8afb      	ldrh	r3, [r7, #22]
 8007388:	429a      	cmp	r2, r3
 800738a:	d8a4      	bhi.n	80072d6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800738c:	bf00      	nop
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	785a      	ldrb	r2, [r3, #1]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	789a      	ldrb	r2, [r3, #2]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	78da      	ldrb	r2, [r3, #3]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	791a      	ldrb	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	795a      	ldrb	r2, [r3, #5]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	799a      	ldrb	r2, [r3, #6]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	79da      	ldrb	r2, [r3, #7]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	7a1a      	ldrb	r2, [r3, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	721a      	strb	r2, [r3, #8]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	785a      	ldrb	r2, [r3, #1]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	789a      	ldrb	r2, [r3, #2]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	78da      	ldrb	r2, [r3, #3]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	3304      	adds	r3, #4
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b29a      	uxth	r2, r3
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3305      	adds	r3, #5
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	b29b      	uxth	r3, r3
 8007430:	4313      	orrs	r3, r2
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	799a      	ldrb	r2, [r3, #6]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	719a      	strb	r2, [r3, #6]
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d120      	bne.n	80074a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	1e9a      	subs	r2, r3, #2
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	4293      	cmp	r3, r2
 800746e:	bf28      	it	cs
 8007470:	4613      	movcs	r3, r2
 8007472:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3302      	adds	r3, #2
 8007478:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800747a:	2300      	movs	r3, #0
 800747c:	82fb      	strh	r3, [r7, #22]
 800747e:	e00b      	b.n	8007498 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007480:	8afb      	ldrh	r3, [r7, #22]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3301      	adds	r3, #1
 8007490:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	3302      	adds	r3, #2
 8007496:	82fb      	strh	r3, [r7, #22]
 8007498:	8afa      	ldrh	r2, [r7, #22]
 800749a:	8abb      	ldrh	r3, [r7, #20]
 800749c:	429a      	cmp	r2, r3
 800749e:	d3ef      	bcc.n	8007480 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
  }
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	881a      	ldrh	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	4413      	add	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 80074da:	68fb      	ldr	r3, [r7, #12]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	789b      	ldrb	r3, [r3, #2]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d002      	beq.n	8007508 <USBH_CtlReq+0x20>
 8007502:	2b02      	cmp	r3, #2
 8007504:	d01d      	beq.n	8007542 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8007506:	e042      	b.n	800758e <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2202      	movs	r2, #2
 800751e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007520:	2301      	movs	r3, #1
 8007522:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2203      	movs	r2, #3
 8007528:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007538:	2200      	movs	r2, #0
 800753a:	4619      	mov	r1, r3
 800753c:	f000 fc4e 	bl	8007ddc <osMessagePut>
    break;
 8007540:	e025      	b.n	800758e <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f828 	bl	8007598 <USBH_HandleControl>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]
    break;
 8007562:	e013      	b.n	800758c <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b03      	cmp	r3, #3
 8007568:	d108      	bne.n	800757c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007576:	2303      	movs	r3, #3
 8007578:	75fb      	strb	r3, [r7, #23]
    break;
 800757a:	e007      	b.n	800758c <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d104      	bne.n	800758c <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007588:	2302      	movs	r3, #2
 800758a:	75fb      	strb	r3, [r7, #23]
    break;
 800758c:	bf00      	nop
  }
  return status;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af02      	add	r7, sp, #8
 800759e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7e1b      	ldrb	r3, [r3, #24]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	2b0a      	cmp	r3, #10
 80075b0:	f200 821d 	bhi.w	80079ee <USBH_HandleControl+0x456>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBH_HandleControl+0x24>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	08007603 	.word	0x08007603
 80075c4:	080076a5 	.word	0x080076a5
 80075c8:	080076cb 	.word	0x080076cb
 80075cc:	08007757 	.word	0x08007757
 80075d0:	08007781 	.word	0x08007781
 80075d4:	08007843 	.word	0x08007843
 80075d8:	08007865 	.word	0x08007865
 80075dc:	080078f7 	.word	0x080078f7
 80075e0:	0800791d 	.word	0x0800791d
 80075e4:	080079af 	.word	0x080079af
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f103 0110 	add.w	r1, r3, #16
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	795b      	ldrb	r3, [r3, #5]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa0b 	bl	8007a10 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	761a      	strb	r2, [r3, #24]
    break;
 8007600:	e200      	b.n	8007a04 <USBH_HandleControl+0x46c>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	795b      	ldrb	r3, [r3, #5]
 8007606:	4619      	mov	r1, r3
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f004 f8a9 	bl	800b760 <USBH_LL_GetURBState>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d12c      	bne.n	8007672 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c1b      	ldrb	r3, [r3, #16]
 800761c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007620:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8adb      	ldrh	r3, [r3, #22]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800762a:	7b7b      	ldrb	r3, [r7, #13]
 800762c:	2b80      	cmp	r3, #128	; 0x80
 800762e:	d103      	bne.n	8007638 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2203      	movs	r2, #3
 8007634:	761a      	strb	r2, [r3, #24]
 8007636:	e00d      	b.n	8007654 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2205      	movs	r2, #5
 800763c:	761a      	strb	r2, [r3, #24]
 800763e:	e009      	b.n	8007654 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8007640:	7b7b      	ldrb	r3, [r7, #13]
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d103      	bne.n	800764e <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2209      	movs	r2, #9
 800764a:	761a      	strb	r2, [r3, #24]
 800764c:	e002      	b.n	8007654 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2207      	movs	r2, #7
 8007652:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2203      	movs	r2, #3
 8007658:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007668:	2200      	movs	r2, #0
 800766a:	4619      	mov	r1, r3
 800766c:	f000 fbb6 	bl	8007ddc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007670:	e1bf      	b.n	80079f2 <USBH_HandleControl+0x45a>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b04      	cmp	r3, #4
 8007676:	d003      	beq.n	8007680 <USBH_HandleControl+0xe8>
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b02      	cmp	r3, #2
 800767c:	f040 81b9 	bne.w	80079f2 <USBH_HandleControl+0x45a>
        phost->Control.state = CTRL_ERROR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	220b      	movs	r2, #11
 8007684:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800769a:	2200      	movs	r2, #0
 800769c:	4619      	mov	r1, r3
 800769e:	f000 fb9d 	bl	8007ddc <osMessagePut>
    break;
 80076a2:	e1a6      	b.n	80079f2 <USBH_HandleControl+0x45a>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6899      	ldr	r1, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	899a      	ldrh	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9e6 	bl	8007a8e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2204      	movs	r2, #4
 80076c6:	761a      	strb	r2, [r3, #24]
    break;
 80076c8:	e19c      	b.n	8007a04 <USBH_HandleControl+0x46c>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	791b      	ldrb	r3, [r3, #4]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f004 f845 	bl	800b760 <USBH_LL_GetURBState>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d110      	bne.n	8007702 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2209      	movs	r2, #9
 80076e4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2203      	movs	r2, #3
 80076ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076fa:	2200      	movs	r2, #0
 80076fc:	4619      	mov	r1, r3
 80076fe:	f000 fb6d 	bl	8007ddc <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b05      	cmp	r3, #5
 8007706:	d110      	bne.n	800772a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007708:	2303      	movs	r3, #3
 800770a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2203      	movs	r2, #3
 8007710:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007720:	2200      	movs	r2, #0
 8007722:	4619      	mov	r1, r3
 8007724:	f000 fb5a 	bl	8007ddc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007728:	e165      	b.n	80079f6 <USBH_HandleControl+0x45e>
      if (URB_Status == USBH_URB_ERROR)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b04      	cmp	r3, #4
 800772e:	f040 8162 	bne.w	80079f6 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	220b      	movs	r2, #11
 8007736:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2203      	movs	r2, #3
 800773c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800774c:	2200      	movs	r2, #0
 800774e:	4619      	mov	r1, r3
 8007750:	f000 fb44 	bl	8007ddc <osMessagePut>
    break;
 8007754:	e14f      	b.n	80079f6 <USBH_HandleControl+0x45e>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6899      	ldr	r1, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	899a      	ldrh	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	795b      	ldrb	r3, [r3, #5]
 8007762:	2001      	movs	r0, #1
 8007764:	9000      	str	r0, [sp, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f96c 	bl	8007a44 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2206      	movs	r2, #6
 800777c:	761a      	strb	r2, [r3, #24]
    break;
 800777e:	e141      	b.n	8007a04 <USBH_HandleControl+0x46c>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	795b      	ldrb	r3, [r3, #5]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f003 ffea 	bl	800b760 <USBH_LL_GetURBState>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d111      	bne.n	80077ba <USBH_HandleControl+0x222>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2207      	movs	r2, #7
 800779a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2203      	movs	r2, #3
 80077a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b0:	2200      	movs	r2, #0
 80077b2:	4619      	mov	r1, r3
 80077b4:	f000 fb12 	bl	8007ddc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077b8:	e11f      	b.n	80079fa <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_STALL)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b05      	cmp	r3, #5
 80077be:	d113      	bne.n	80077e8 <USBH_HandleControl+0x250>
      phost->Control.state = CTRL_STALLED;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	220c      	movs	r2, #12
 80077c4:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80077c6:	2303      	movs	r3, #3
 80077c8:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2203      	movs	r2, #3
 80077ce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077de:	2200      	movs	r2, #0
 80077e0:	4619      	mov	r1, r3
 80077e2:	f000 fafb 	bl	8007ddc <osMessagePut>
    break;
 80077e6:	e108      	b.n	80079fa <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d111      	bne.n	8007812 <USBH_HandleControl+0x27a>
      phost->Control.state = CTRL_DATA_OUT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2205      	movs	r2, #5
 80077f2:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2203      	movs	r2, #3
 80077f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007808:	2200      	movs	r2, #0
 800780a:	4619      	mov	r1, r3
 800780c:	f000 fae6 	bl	8007ddc <osMessagePut>
    break;
 8007810:	e0f3      	b.n	80079fa <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b04      	cmp	r3, #4
 8007816:	f040 80f0 	bne.w	80079fa <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	220b      	movs	r2, #11
 800781e:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007820:	2302      	movs	r3, #2
 8007822:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2203      	movs	r2, #3
 8007828:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007838:	2200      	movs	r2, #0
 800783a:	4619      	mov	r1, r3
 800783c:	f000 face 	bl	8007ddc <osMessagePut>
    break;
 8007840:	e0db      	b.n	80079fa <USBH_HandleControl+0x462>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	2100      	movs	r1, #0
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f91f 	bl	8007a8e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2208      	movs	r2, #8
 8007860:	761a      	strb	r2, [r3, #24]

    break;
 8007862:	e0cf      	b.n	8007a04 <USBH_HandleControl+0x46c>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f003 ff78 	bl	800b760 <USBH_LL_GetURBState>
 8007870:	4603      	mov	r3, r0
 8007872:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d113      	bne.n	80078a2 <USBH_HandleControl+0x30a>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	220d      	movs	r2, #13
 800787e:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2203      	movs	r2, #3
 8007888:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007898:	2200      	movs	r2, #0
 800789a:	4619      	mov	r1, r3
 800789c:	f000 fa9e 	bl	8007ddc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80078a0:	e0ad      	b.n	80079fe <USBH_HandleControl+0x466>
    else if (URB_Status == USBH_URB_ERROR)
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d111      	bne.n	80078cc <USBH_HandleControl+0x334>
      phost->Control.state = CTRL_ERROR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	220b      	movs	r2, #11
 80078ac:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2203      	movs	r2, #3
 80078b2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c2:	2200      	movs	r2, #0
 80078c4:	4619      	mov	r1, r3
 80078c6:	f000 fa89 	bl	8007ddc <osMessagePut>
    break;
 80078ca:	e098      	b.n	80079fe <USBH_HandleControl+0x466>
      if(URB_Status == USBH_URB_STALL)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	f040 8095 	bne.w	80079fe <USBH_HandleControl+0x466>
        status = USBH_NOT_SUPPORTED;
 80078d4:	2303      	movs	r3, #3
 80078d6:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ec:	2200      	movs	r2, #0
 80078ee:	4619      	mov	r1, r3
 80078f0:	f000 fa74 	bl	8007ddc <osMessagePut>
    break;
 80078f4:	e083      	b.n	80079fe <USBH_HandleControl+0x466>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	2201      	movs	r2, #1
 80078fc:	9200      	str	r2, [sp, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	2100      	movs	r1, #0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f89e 	bl	8007a44 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800790e:	b29a      	uxth	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	220a      	movs	r2, #10
 8007918:	761a      	strb	r2, [r3, #24]
    break;
 800791a:	e073      	b.n	8007a04 <USBH_HandleControl+0x46c>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	795b      	ldrb	r3, [r3, #5]
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f003 ff1c 	bl	800b760 <USBH_LL_GetURBState>
 8007928:	4603      	mov	r3, r0
 800792a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d113      	bne.n	800795a <USBH_HandleControl+0x3c2>
    {
      status = USBH_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	220d      	movs	r2, #13
 800793a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2203      	movs	r2, #3
 8007940:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007950:	2200      	movs	r2, #0
 8007952:	4619      	mov	r1, r3
 8007954:	f000 fa42 	bl	8007ddc <osMessagePut>
#endif
#endif
      }

    }
    break;
 8007958:	e053      	b.n	8007a02 <USBH_HandleControl+0x46a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d111      	bne.n	8007984 <USBH_HandleControl+0x3ec>
      phost->Control.state = CTRL_STATUS_OUT;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2209      	movs	r2, #9
 8007964:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2203      	movs	r2, #3
 800796a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800797a:	2200      	movs	r2, #0
 800797c:	4619      	mov	r1, r3
 800797e:	f000 fa2d 	bl	8007ddc <osMessagePut>
    break;
 8007982:	e03e      	b.n	8007a02 <USBH_HandleControl+0x46a>
      if (URB_Status == USBH_URB_ERROR)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d13b      	bne.n	8007a02 <USBH_HandleControl+0x46a>
        phost->Control.state = CTRL_ERROR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	220b      	movs	r2, #11
 800798e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2203      	movs	r2, #3
 8007994:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079a4:	2200      	movs	r2, #0
 80079a6:	4619      	mov	r1, r3
 80079a8:	f000 fa18 	bl	8007ddc <osMessagePut>
    break;
 80079ac:	e029      	b.n	8007a02 <USBH_HandleControl+0x46a>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7e5b      	ldrb	r3, [r3, #25]
 80079b2:	3301      	adds	r3, #1
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	765a      	strb	r2, [r3, #25]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7e5b      	ldrb	r3, [r3, #25]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d809      	bhi.n	80079d6 <USBH_HandleControl+0x43e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f003 fddd 	bl	800b582 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80079d4:	e016      	b.n	8007a04 <USBH_HandleControl+0x46c>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079dc:	2106      	movs	r1, #6
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80079e8:	2302      	movs	r3, #2
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e00a      	b.n	8007a04 <USBH_HandleControl+0x46c>

  default:
    break;
 80079ee:	bf00      	nop
 80079f0:	e008      	b.n	8007a04 <USBH_HandleControl+0x46c>
    break;
 80079f2:	bf00      	nop
 80079f4:	e006      	b.n	8007a04 <USBH_HandleControl+0x46c>
    break;
 80079f6:	bf00      	nop
 80079f8:	e004      	b.n	8007a04 <USBH_HandleControl+0x46c>
    break;
 80079fa:	bf00      	nop
 80079fc:	e002      	b.n	8007a04 <USBH_HandleControl+0x46c>
    break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <USBH_HandleControl+0x46c>
    break;
 8007a02:	bf00      	nop
  }
  return status;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop

08007a10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af04      	add	r7, sp, #16
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a1e:	79f9      	ldrb	r1, [r7, #7]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	2308      	movs	r3, #8
 8007a26:	9302      	str	r3, [sp, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	2200      	movs	r2, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f003 fe62 	bl	800b6fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af04      	add	r7, sp, #16
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	460b      	mov	r3, r1
 8007a54:	80fb      	strh	r3, [r7, #6]
 8007a56:	4613      	mov	r3, r2
 8007a58:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007a68:	7979      	ldrb	r1, [r7, #5]
 8007a6a:	7e3b      	ldrb	r3, [r7, #24]
 8007a6c:	9303      	str	r3, [sp, #12]
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	9302      	str	r3, [sp, #8]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	2301      	movs	r3, #1
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f003 fe3d 	bl	800b6fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b088      	sub	sp, #32
 8007a92:	af04      	add	r7, sp, #16
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	4611      	mov	r1, r2
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	80fb      	strh	r3, [r7, #6]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007aa4:	7979      	ldrb	r1, [r7, #5]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2201      	movs	r2, #1
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f003 fe1f 	bl	800b6fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ac0:	2300      	movs	r3, #0

}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af04      	add	r7, sp, #16
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	460b      	mov	r3, r1
 8007ada:	80fb      	strh	r3, [r7, #6]
 8007adc:	4613      	mov	r3, r2
 8007ade:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007aee:	7979      	ldrb	r1, [r7, #5]
 8007af0:	7e3b      	ldrb	r3, [r7, #24]
 8007af2:	9303      	str	r3, [sp, #12]
 8007af4:	88fb      	ldrh	r3, [r7, #6]
 8007af6:	9302      	str	r3, [sp, #8]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	2301      	movs	r3, #1
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2302      	movs	r3, #2
 8007b02:	2200      	movs	r2, #0
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f003 fdfa 	bl	800b6fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af04      	add	r7, sp, #16
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	460b      	mov	r3, r1
 8007b24:	80fb      	strh	r3, [r7, #6]
 8007b26:	4613      	mov	r3, r2
 8007b28:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007b2a:	7979      	ldrb	r1, [r7, #5]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9303      	str	r3, [sp, #12]
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	2201      	movs	r2, #1
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f003 fddc 	bl	800b6fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	70fb      	strb	r3, [r7, #3]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70bb      	strb	r3, [r7, #2]
 8007b66:	4613      	mov	r3, r2
 8007b68:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007b6a:	7878      	ldrb	r0, [r7, #1]
 8007b6c:	78ba      	ldrb	r2, [r7, #2]
 8007b6e:	78f9      	ldrb	r1, [r7, #3]
 8007b70:	8b3b      	ldrh	r3, [r7, #24]
 8007b72:	9302      	str	r3, [sp, #8]
 8007b74:	7d3b      	ldrb	r3, [r7, #20]
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	7c3b      	ldrb	r3, [r7, #16]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f003 fd6f 	bl	800b662 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007b84:	2300      	movs	r3, #0

}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f003 fd8e 	bl	800b6c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0

}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f831 	bl	8007c22 <USBH_GetFreePipe>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007bc4:	89fb      	ldrh	r3, [r7, #14]
 8007bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d007      	beq.n	8007bde <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	89fa      	ldrh	r2, [r7, #14]
 8007bd2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32e0      	adds	r2, #224	; 0xe0
 8007bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007bde:	89fb      	ldrh	r3, [r7, #14]
 8007be0:	b2db      	uxtb	r3, r3
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	2b0a      	cmp	r3, #10
 8007bfa:	d80b      	bhi.n	8007c14 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	32e0      	adds	r2, #224	; 0xe0
 8007c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	32e0      	adds	r2, #224	; 0xe0
 8007c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	e00e      	b.n	8007c52 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c34:	7bfa      	ldrb	r2, [r7, #15]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32e0      	adds	r2, #224	; 0xe0
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	e007      	b.n	8007c5c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	2b0a      	cmp	r3, #10
 8007c56:	d9ed      	bls.n	8007c34 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c7a:	2b84      	cmp	r3, #132	; 0x84
 8007c7c:	d005      	beq.n	8007c8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	3303      	adds	r3, #3
 8007c88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9e:	f3ef 8305 	mrs	r3, IPSR
 8007ca2:	607b      	str	r3, [r7, #4]
  return(result);
 8007ca4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cc0:	f001 f900 	bl	8008ec4 <vTaskStartScheduler>
  
  return osOK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ccc:	b089      	sub	sp, #36	; 0x24
 8007cce:	af04      	add	r7, sp, #16
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <osThreadCreate+0x54>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01c      	beq.n	8007d1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685c      	ldr	r4, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681d      	ldr	r5, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691e      	ldr	r6, [r3, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff ffb6 	bl	8007c68 <makeFreeRtosPriority>
 8007cfc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d06:	9202      	str	r2, [sp, #8]
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	9100      	str	r1, [sp, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	4632      	mov	r2, r6
 8007d10:	4629      	mov	r1, r5
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 ff0c 	bl	8008b30 <xTaskCreateStatic>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e01c      	b.n	8007d58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685c      	ldr	r4, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d2a:	b29e      	uxth	r6, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff ff98 	bl	8007c68 <makeFreeRtosPriority>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	9200      	str	r2, [sp, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	4632      	mov	r2, r6
 8007d46:	4629      	mov	r1, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 ff4d 	bl	8008be8 <xTaskCreate>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d001      	beq.n	8007d58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e000      	b.n	8007d5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d58:	68fb      	ldr	r3, [r7, #12]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <osDelay+0x16>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	e000      	b.n	8007d7a <osDelay+0x18>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 f86e 	bl	8008e5c <vTaskDelay>
  
  return osOK;
 8007d80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007d8a:	b590      	push	{r4, r7, lr}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af02      	add	r7, sp, #8
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d011      	beq.n	8007dc0 <osMessageCreate+0x36>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00d      	beq.n	8007dc0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	2400      	movs	r4, #0
 8007db6:	9400      	str	r4, [sp, #0]
 8007db8:	f000 f9e0 	bl	800817c <xQueueGenericCreateStatic>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	e008      	b.n	8007dd2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f000 fa4d 	bl	800826a <xQueueGenericCreate>
 8007dd0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}
	...

08007ddc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <osMessagePut+0x1e>
    ticks = 1;
 8007df6:	2301      	movs	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007dfa:	f7ff ff4d 	bl	8007c98 <inHandlerMode>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d018      	beq.n	8007e36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007e04:	f107 0210 	add.w	r2, r7, #16
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fb86 	bl	8008520 <xQueueGenericSendFromISR>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d001      	beq.n	8007e1e <osMessagePut+0x42>
      return osErrorOS;
 8007e1a:	23ff      	movs	r3, #255	; 0xff
 8007e1c:	e018      	b.n	8007e50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d014      	beq.n	8007e4e <osMessagePut+0x72>
 8007e24:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <osMessagePut+0x7c>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	e00b      	b.n	8007e4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007e36:	f107 0108 	add.w	r1, r7, #8
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 fa70 	bl	8008324 <xQueueGenericSend>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d001      	beq.n	8007e4e <osMessagePut+0x72>
      return osErrorOS;
 8007e4a:	23ff      	movs	r3, #255	; 0xff
 8007e4c:	e000      	b.n	8007e50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007e5c:	b590      	push	{r4, r7, lr}
 8007e5e:	b08b      	sub	sp, #44	; 0x2c
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007e76:	2380      	movs	r3, #128	; 0x80
 8007e78:	617b      	str	r3, [r7, #20]
    return event;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	461c      	mov	r4, r3
 8007e7e:	f107 0314 	add.w	r3, r7, #20
 8007e82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e8a:	e054      	b.n	8007f36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d103      	bne.n	8007ea4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea2:	e009      	b.n	8007eb8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d006      	beq.n	8007eb8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <osMessageGet+0x5c>
      ticks = 1;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007eb8:	f7ff feee 	bl	8007c98 <inHandlerMode>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01c      	beq.n	8007efc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007ec2:	f107 0220 	add.w	r2, r7, #32
 8007ec6:	f107 0314 	add.w	r3, r7, #20
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	68b8      	ldr	r0, [r7, #8]
 8007ed0:	f000 fc9e 	bl	8008810 <xQueueReceiveFromISR>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d102      	bne.n	8007ee0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007eda:	2310      	movs	r3, #16
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	e001      	b.n	8007ee4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01d      	beq.n	8007f26 <osMessageGet+0xca>
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <osMessageGet+0xe4>)
 8007eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	e014      	b.n	8007f26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	3304      	adds	r3, #4
 8007f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f04:	4619      	mov	r1, r3
 8007f06:	68b8      	ldr	r0, [r7, #8]
 8007f08:	f000 fba2 	bl	8008650 <xQueueReceive>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d102      	bne.n	8007f18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007f12:	2310      	movs	r3, #16
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e006      	b.n	8007f26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <osMessageGet+0xc6>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <osMessageGet+0xc8>
 8007f22:	2340      	movs	r3, #64	; 0x40
 8007f24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	461c      	mov	r4, r3
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	372c      	adds	r7, #44	; 0x2c
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 0208 	add.w	r2, r3, #8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f103 0208 	add.w	r2, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 0208 	add.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	e00c      	b.n	8008020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3308      	adds	r3, #8
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e002      	b.n	8008014 <vListInsert+0x2e>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	429a      	cmp	r2, r3
 800801e:	d2f6      	bcs.n	800800e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
}
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6892      	ldr	r2, [r2, #8]
 800806e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6852      	ldr	r2, [r2, #4]
 8008078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d103      	bne.n	800808c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080d6:	f001 fd5d 	bl	8009b94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	441a      	add	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	3b01      	subs	r3, #1
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d114      	bne.n	8008156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01a      	beq.n	800816a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3310      	adds	r3, #16
 8008138:	4618      	mov	r0, r3
 800813a:	f001 f92f 	bl	800939c <xTaskRemoveFromEventList>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d012      	beq.n	800816a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <xQueueGenericReset+0xcc>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	e009      	b.n	800816a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3310      	adds	r3, #16
 800815a:	4618      	mov	r0, r3
 800815c:	f7ff fef2 	bl	8007f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3324      	adds	r3, #36	; 0x24
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff feed 	bl	8007f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800816a:	f001 fd43 	bl	8009bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800816e:	2301      	movs	r3, #1
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	; 0x38
 8008180:	af02      	add	r7, sp, #8
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10a      	bne.n	80081a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <xQueueGenericCreateStatic+0x52>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <xQueueGenericCreateStatic+0x56>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <xQueueGenericCreateStatic+0x58>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	623b      	str	r3, [r7, #32]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <xQueueGenericCreateStatic+0x7e>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <xQueueGenericCreateStatic+0x82>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueGenericCreateStatic+0x84>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61fb      	str	r3, [r7, #28]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800821a:	2348      	movs	r3, #72	; 0x48
 800821c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b48      	cmp	r3, #72	; 0x48
 8008222:	d00a      	beq.n	800823a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61bb      	str	r3, [r7, #24]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800824c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	4613      	mov	r3, r2
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f843 	bl	80082e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008262:	4618      	mov	r0, r3
 8008264:	3730      	adds	r7, #48	; 0x30
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800826a:	b580      	push	{r7, lr}
 800826c:	b08a      	sub	sp, #40	; 0x28
 800826e:	af02      	add	r7, sp, #8
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4613      	mov	r3, r2
 8008276:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <xQueueGenericCreate+0x2a>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	613b      	str	r3, [r7, #16]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	e004      	b.n	80082aa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	3348      	adds	r3, #72	; 0x48
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fd92 	bl	8009dd8 <pvPortMalloc>
 80082b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00f      	beq.n	80082dc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	3348      	adds	r3, #72	; 0x48
 80082c0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ca:	79fa      	ldrb	r2, [r7, #7]
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f805 	bl	80082e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80082dc:	69bb      	ldr	r3, [r7, #24]
	}
 80082de:	4618      	mov	r0, r3
 80082e0:	3720      	adds	r7, #32
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b084      	sub	sp, #16
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e002      	b.n	8008308 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008314:	2101      	movs	r1, #1
 8008316:	69b8      	ldr	r0, [r7, #24]
 8008318:	f7ff fec8 	bl	80080ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08e      	sub	sp, #56	; 0x38
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008332:	2300      	movs	r3, #0
 8008334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xQueueGenericSend+0x32>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <xQueueGenericSend+0x40>
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <xQueueGenericSend+0x44>
 8008364:	2301      	movs	r3, #1
 8008366:	e000      	b.n	800836a <xQueueGenericSend+0x46>
 8008368:	2300      	movs	r3, #0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <xQueueGenericSend+0x60>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d103      	bne.n	8008392 <xQueueGenericSend+0x6e>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <xQueueGenericSend+0x72>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <xQueueGenericSend+0x74>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	623b      	str	r3, [r7, #32]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083b2:	f001 f9b7 	bl	8009724 <xTaskGetSchedulerState>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <xQueueGenericSend+0x9e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <xQueueGenericSend+0xa2>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGenericSend+0xa4>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	61fb      	str	r3, [r7, #28]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083e2:	f001 fbd7 	bl	8009b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d302      	bcc.n	80083f8 <xQueueGenericSend+0xd4>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d129      	bne.n	800844c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083fe:	f000 fa87 	bl	8008910 <prvCopyDataToQueue>
 8008402:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	3324      	adds	r3, #36	; 0x24
 8008410:	4618      	mov	r0, r3
 8008412:	f000 ffc3 	bl	800939c <xTaskRemoveFromEventList>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d013      	beq.n	8008444 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800841c:	4b3f      	ldr	r3, [pc, #252]	; (800851c <xQueueGenericSend+0x1f8>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	e00a      	b.n	8008444 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008434:	4b39      	ldr	r3, [pc, #228]	; (800851c <xQueueGenericSend+0x1f8>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008444:	f001 fbd6 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	e063      	b.n	8008514 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008452:	f001 fbcf 	bl	8009bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008456:	2300      	movs	r3, #0
 8008458:	e05c      	b.n	8008514 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800845a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d106      	bne.n	800846e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008460:	f107 0314 	add.w	r3, r7, #20
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fffb 	bl	8009460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800846a:	2301      	movs	r3, #1
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800846e:	f001 fbc1 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008472:	f000 fd87 	bl	8008f84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008476:	f001 fb8d 	bl	8009b94 <vPortEnterCritical>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <xQueueGenericSend+0x16c>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008496:	b25b      	sxtb	r3, r3
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849c:	d103      	bne.n	80084a6 <xQueueGenericSend+0x182>
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084a6:	f001 fba5 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084aa:	1d3a      	adds	r2, r7, #4
 80084ac:	f107 0314 	add.w	r3, r7, #20
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 ffea 	bl	800948c <xTaskCheckForTimeOut>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d124      	bne.n	8008508 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c0:	f000 fb1e 	bl	8008b00 <prvIsQueueFull>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d018      	beq.n	80084fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	3310      	adds	r3, #16
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 ff3e 	bl	8009354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084da:	f000 faa9 	bl	8008a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084de:	f000 fd5f 	bl	8008fa0 <xTaskResumeAll>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f af7c 	bne.w	80083e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <xQueueGenericSend+0x1f8>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	e772      	b.n	80083e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fe:	f000 fa97 	bl	8008a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008502:	f000 fd4d 	bl	8008fa0 <xTaskResumeAll>
 8008506:	e76c      	b.n	80083e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800850a:	f000 fa91 	bl	8008a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800850e:	f000 fd47 	bl	8008fa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008512:	2300      	movs	r3, #0
		}
	}
}
 8008514:	4618      	mov	r0, r3
 8008516:	3738      	adds	r7, #56	; 0x38
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08e      	sub	sp, #56	; 0x38
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
}
 800854a:	bf00      	nop
 800854c:	e7fe      	b.n	800854c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <xQueueGenericSendFromISR+0x3c>
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <xQueueGenericSendFromISR+0x40>
 800855c:	2301      	movs	r3, #1
 800855e:	e000      	b.n	8008562 <xQueueGenericSendFromISR+0x42>
 8008560:	2300      	movs	r3, #0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	623b      	str	r3, [r7, #32]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d103      	bne.n	800858a <xQueueGenericSendFromISR+0x6a>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <xQueueGenericSendFromISR+0x6e>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <xQueueGenericSendFromISR+0x70>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	61fb      	str	r3, [r7, #28]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085aa:	f001 fbd5 	bl	8009d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80085ae:	f3ef 8211 	mrs	r2, BASEPRI
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	61ba      	str	r2, [r7, #24]
 80085c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <xQueueGenericSendFromISR+0xbc>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d12c      	bne.n	8008636 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	68b9      	ldr	r1, [r7, #8]
 80085ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ec:	f000 f990 	bl	8008910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f8:	d112      	bne.n	8008620 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d016      	beq.n	8008630 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	3324      	adds	r3, #36	; 0x24
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fec8 	bl	800939c <xTaskRemoveFromEventList>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00e      	beq.n	8008630 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e007      	b.n	8008630 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008624:	3301      	adds	r3, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	b25a      	sxtb	r2, r3
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008630:	2301      	movs	r3, #1
 8008632:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008634:	e001      	b.n	800863a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008648:	4618      	mov	r0, r3
 800864a:	3738      	adds	r7, #56	; 0x38
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08c      	sub	sp, #48	; 0x30
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800865c:	2300      	movs	r3, #0
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xQueueReceive+0x30>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	623b      	str	r3, [r7, #32]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d103      	bne.n	800868e <xQueueReceive+0x3e>
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <xQueueReceive+0x42>
 800868e:	2301      	movs	r3, #1
 8008690:	e000      	b.n	8008694 <xQueueReceive+0x44>
 8008692:	2300      	movs	r3, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueReceive+0x5e>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	61fb      	str	r3, [r7, #28]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ae:	f001 f839 	bl	8009724 <xTaskGetSchedulerState>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <xQueueReceive+0x6e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <xQueueReceive+0x72>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueReceive+0x74>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueReceive+0x8e>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61bb      	str	r3, [r7, #24]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80086de:	f001 fa59 	bl	8009b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01f      	beq.n	800872e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f2:	f000 f977 	bl	80089e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	1e5a      	subs	r2, r3, #1
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00f      	beq.n	8008726 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	3310      	adds	r3, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fe46 	bl	800939c <xTaskRemoveFromEventList>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008716:	4b3d      	ldr	r3, [pc, #244]	; (800880c <xQueueReceive+0x1bc>)
 8008718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008726:	f001 fa65 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 800872a:	2301      	movs	r3, #1
 800872c:	e069      	b.n	8008802 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d103      	bne.n	800873c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008734:	f001 fa5e 	bl	8009bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008738:	2300      	movs	r3, #0
 800873a:	e062      	b.n	8008802 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008742:	f107 0310 	add.w	r3, r7, #16
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fe8a 	bl	8009460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008750:	f001 fa50 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008754:	f000 fc16 	bl	8008f84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008758:	f001 fa1c 	bl	8009b94 <vPortEnterCritical>
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008762:	b25b      	sxtb	r3, r3
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d103      	bne.n	8008772 <xQueueReceive+0x122>
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008778:	b25b      	sxtb	r3, r3
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877e:	d103      	bne.n	8008788 <xQueueReceive+0x138>
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008788:	f001 fa34 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800878c:	1d3a      	adds	r2, r7, #4
 800878e:	f107 0310 	add.w	r3, r7, #16
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fe79 	bl	800948c <xTaskCheckForTimeOut>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d123      	bne.n	80087e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a2:	f000 f997 	bl	8008ad4 <prvIsQueueEmpty>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d017      	beq.n	80087dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fdcd 	bl	8009354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087bc:	f000 f938 	bl	8008a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087c0:	f000 fbee 	bl	8008fa0 <xTaskResumeAll>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d189      	bne.n	80086de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087ca:	4b10      	ldr	r3, [pc, #64]	; (800880c <xQueueReceive+0x1bc>)
 80087cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	e780      	b.n	80086de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087de:	f000 f927 	bl	8008a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087e2:	f000 fbdd 	bl	8008fa0 <xTaskResumeAll>
 80087e6:	e77a      	b.n	80086de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ea:	f000 f921 	bl	8008a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ee:	f000 fbd7 	bl	8008fa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f4:	f000 f96e 	bl	8008ad4 <prvIsQueueEmpty>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f43f af6f 	beq.w	80086de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008800:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008802:	4618      	mov	r0, r3
 8008804:	3730      	adds	r7, #48	; 0x30
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08e      	sub	sp, #56	; 0x38
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	623b      	str	r3, [r7, #32]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <xQueueReceiveFromISR+0x3a>
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <xQueueReceiveFromISR+0x3e>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueReceiveFromISR+0x40>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	61fb      	str	r3, [r7, #28]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800886a:	f001 fa75 	bl	8009d58 <vPortValidateInterruptPriority>
	__asm volatile
 800886e:	f3ef 8211 	mrs	r2, BASEPRI
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	61ba      	str	r2, [r7, #24]
 8008884:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008886:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d02f      	beq.n	80088f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800889c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a4:	f000 f89e 	bl	80089e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	1e5a      	subs	r2, r3, #1
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d112      	bne.n	80088e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d016      	beq.n	80088f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	3310      	adds	r3, #16
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fd68 	bl	800939c <xTaskRemoveFromEventList>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00e      	beq.n	80088f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e007      	b.n	80088f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e4:	3301      	adds	r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	b25a      	sxtb	r2, r3
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80088f0:	2301      	movs	r3, #1
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	e001      	b.n	80088fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f383 8811 	msr	BASEPRI, r3
}
 8008904:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008908:	4618      	mov	r0, r3
 800890a:	3738      	adds	r7, #56	; 0x38
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10d      	bne.n	800894a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d14d      	bne.n	80089d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 ff10 	bl	8009760 <xTaskPriorityDisinherit>
 8008940:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	605a      	str	r2, [r3, #4]
 8008948:	e043      	b.n	80089d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d119      	bne.n	8008984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6898      	ldr	r0, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	461a      	mov	r2, r3
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	f003 f814 	bl	800b988 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	441a      	add	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d32b      	bcc.n	80089d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	609a      	str	r2, [r3, #8]
 8008982:	e026      	b.n	80089d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68d8      	ldr	r0, [r3, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	f002 fffa 	bl	800b988 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	425b      	negs	r3, r3
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d207      	bcs.n	80089c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	425b      	negs	r3, r3
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d105      	bne.n	80089d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089da:	697b      	ldr	r3, [r7, #20]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	441a      	add	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d303      	bcc.n	8008a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68d9      	ldr	r1, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	461a      	mov	r2, r3
 8008a22:	6838      	ldr	r0, [r7, #0]
 8008a24:	f002 ffb0 	bl	800b988 <memcpy>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a38:	f001 f8ac 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a44:	e011      	b.n	8008a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d012      	beq.n	8008a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fca2 	bl	800939c <xTaskRemoveFromEventList>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a5e:	f000 fd77 	bl	8009550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dce9      	bgt.n	8008a46 <prvUnlockQueue+0x16>
 8008a72:	e000      	b.n	8008a76 <prvUnlockQueue+0x46>
					break;
 8008a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	22ff      	movs	r2, #255	; 0xff
 8008a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a7e:	f001 f8b9 	bl	8009bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a82:	f001 f887 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a8e:	e011      	b.n	8008ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3310      	adds	r3, #16
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fc7d 	bl	800939c <xTaskRemoveFromEventList>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008aa8:	f000 fd52 	bl	8009550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dce9      	bgt.n	8008a90 <prvUnlockQueue+0x60>
 8008abc:	e000      	b.n	8008ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	22ff      	movs	r2, #255	; 0xff
 8008ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ac8:	f001 f894 	bl	8009bf4 <vPortExitCritical>
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008adc:	f001 f85a 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e001      	b.n	8008af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008af2:	f001 f87f 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b08:	f001 f844 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d102      	bne.n	8008b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	e001      	b.n	8008b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b22:	f001 f867 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008b26:	68fb      	ldr	r3, [r7, #12]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08e      	sub	sp, #56	; 0x38
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	623b      	str	r3, [r7, #32]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xTaskCreateStatic+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	61fb      	str	r3, [r7, #28]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b76:	2358      	movs	r3, #88	; 0x58
 8008b78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b58      	cmp	r3, #88	; 0x58
 8008b7e:	d00a      	beq.n	8008b96 <xTaskCreateStatic+0x66>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	61bb      	str	r3, [r7, #24]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01e      	beq.n	8008bda <xTaskCreateStatic+0xaa>
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01b      	beq.n	8008bda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008baa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	f107 0314 	add.w	r3, r7, #20
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f850 	bl	8008c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd4:	f000 f8d8 	bl	8008d88 <prvAddNewTaskToReadyList>
 8008bd8:	e001      	b.n	8008bde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bde:	697b      	ldr	r3, [r7, #20]
	}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3728      	adds	r7, #40	; 0x28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08c      	sub	sp, #48	; 0x30
 8008bec:	af04      	add	r7, sp, #16
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 f8eb 	bl	8009dd8 <pvPortMalloc>
 8008c02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008c0a:	2058      	movs	r0, #88	; 0x58
 8008c0c:	f001 f8e4 	bl	8009dd8 <pvPortMalloc>
 8008c10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8008c1e:	e005      	b.n	8008c2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c20:	6978      	ldr	r0, [r7, #20]
 8008c22:	f001 f9a3 	bl	8009f6c <vPortFree>
 8008c26:	e001      	b.n	8008c2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d017      	beq.n	8008c62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c3a:	88fa      	ldrh	r2, [r7, #6]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f80e 	bl	8008c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c56:	69f8      	ldr	r0, [r7, #28]
 8008c58:	f000 f896 	bl	8008d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	61bb      	str	r3, [r7, #24]
 8008c60:	e002      	b.n	8008c68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295
 8008c66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c68:	69bb      	ldr	r3, [r7, #24]
	}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b088      	sub	sp, #32
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	21a5      	movs	r1, #165	; 0xa5
 8008c8c:	f002 fe8a 	bl	800b9a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	f023 0307 	bic.w	r3, r3, #7
 8008ca8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <prvInitialiseNewTask+0x58>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	617b      	str	r3, [r7, #20]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	e012      	b.n	8008cf6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	7819      	ldrb	r1, [r3, #0]
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	4413      	add	r3, r2
 8008cde:	3334      	adds	r3, #52	; 0x34
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d006      	beq.n	8008cfe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	61fb      	str	r3, [r7, #28]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	2b0f      	cmp	r3, #15
 8008cfa:	d9e9      	bls.n	8008cd0 <prvInitialiseNewTask+0x5e>
 8008cfc:	e000      	b.n	8008d00 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008cfe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	2b06      	cmp	r3, #6
 8008d0c:	d901      	bls.n	8008d12 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d0e:	2306      	movs	r3, #6
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d1c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	2200      	movs	r2, #0
 8008d22:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	3304      	adds	r3, #4
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff f92b 	bl	8007f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	3318      	adds	r3, #24
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff f926 	bl	8007f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	f1c3 0207 	rsb	r2, r3, #7
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	2200      	movs	r2, #0
 8008d52:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	2200      	movs	r2, #0
 8008d58:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	69b8      	ldr	r0, [r7, #24]
 8008d68:	f000 fde6 	bl	8009938 <pxPortInitialiseStack>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7e:	bf00      	nop
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d90:	f000 ff00 	bl	8009b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d94:	4b2a      	ldr	r3, [pc, #168]	; (8008e40 <prvAddNewTaskToReadyList+0xb8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	4a29      	ldr	r2, [pc, #164]	; (8008e40 <prvAddNewTaskToReadyList+0xb8>)
 8008d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d9e:	4b29      	ldr	r3, [pc, #164]	; (8008e44 <prvAddNewTaskToReadyList+0xbc>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008da6:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <prvAddNewTaskToReadyList+0xbc>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dac:	4b24      	ldr	r3, [pc, #144]	; (8008e40 <prvAddNewTaskToReadyList+0xb8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d110      	bne.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008db4:	f000 fbf2 	bl	800959c <prvInitialiseTaskLists>
 8008db8:	e00d      	b.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dba:	4b23      	ldr	r3, [pc, #140]	; (8008e48 <prvAddNewTaskToReadyList+0xc0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dc2:	4b20      	ldr	r3, [pc, #128]	; (8008e44 <prvAddNewTaskToReadyList+0xbc>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d802      	bhi.n	8008dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dd0:	4a1c      	ldr	r2, [pc, #112]	; (8008e44 <prvAddNewTaskToReadyList+0xbc>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <prvAddNewTaskToReadyList+0xc4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <prvAddNewTaskToReadyList+0xc4>)
 8008dde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	2201      	movs	r2, #1
 8008de6:	409a      	lsls	r2, r3
 8008de8:	4b19      	ldr	r3, [pc, #100]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	4a18      	ldr	r2, [pc, #96]	; (8008e50 <prvAddNewTaskToReadyList+0xc8>)
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <prvAddNewTaskToReadyList+0xcc>)
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7ff f8c8 	bl	8007f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e0e:	f000 fef1 	bl	8009bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e12:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <prvAddNewTaskToReadyList+0xc0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00e      	beq.n	8008e38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <prvAddNewTaskToReadyList+0xbc>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d207      	bcs.n	8008e38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e28:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <prvAddNewTaskToReadyList+0xd0>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200001b4 	.word	0x200001b4
 8008e44:	200000b4 	.word	0x200000b4
 8008e48:	200001c0 	.word	0x200001c0
 8008e4c:	200001d0 	.word	0x200001d0
 8008e50:	200001bc 	.word	0x200001bc
 8008e54:	200000b8 	.word	0x200000b8
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d017      	beq.n	8008e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <vTaskDelay+0x60>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <vTaskDelay+0x30>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60bb      	str	r3, [r7, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e8c:	f000 f87a 	bl	8008f84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fcea 	bl	800986c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e98:	f000 f882 	bl	8008fa0 <xTaskResumeAll>
 8008e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <vTaskDelay+0x64>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200001dc 	.word	0x200001dc
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ed2:	463a      	mov	r2, r7
 8008ed4:	1d39      	adds	r1, r7, #4
 8008ed6:	f107 0308 	add.w	r3, r7, #8
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 faf2 	bl	800a4c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	9202      	str	r2, [sp, #8]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	460a      	mov	r2, r1
 8008ef2:	491e      	ldr	r1, [pc, #120]	; (8008f6c <vTaskStartScheduler+0xa8>)
 8008ef4:	481e      	ldr	r0, [pc, #120]	; (8008f70 <vTaskStartScheduler+0xac>)
 8008ef6:	f7ff fe1b 	bl	8008b30 <xTaskCreateStatic>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <vTaskStartScheduler+0xb0>)
 8008efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f00:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <vTaskStartScheduler+0xb0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e001      	b.n	8008f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d116      	bne.n	8008f46 <vTaskStartScheduler+0x82>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	613b      	str	r3, [r7, #16]
}
 8008f2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f2c:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <vTaskStartScheduler+0xb4>)
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f34:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <vTaskStartScheduler+0xb8>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008f3a:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <vTaskStartScheduler+0xbc>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f40:	f000 fd86 	bl	8009a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f44:	e00e      	b.n	8008f64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d10a      	bne.n	8008f64 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <vTaskStartScheduler+0x9e>
}
 8008f64:	bf00      	nop
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	0800bc04 	.word	0x0800bc04
 8008f70:	08009569 	.word	0x08009569
 8008f74:	200001d8 	.word	0x200001d8
 8008f78:	200001d4 	.word	0x200001d4
 8008f7c:	200001c0 	.word	0x200001c0
 8008f80:	200001b8 	.word	0x200001b8

08008f84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <vTaskSuspendAll+0x18>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	4a03      	ldr	r2, [pc, #12]	; (8008f9c <vTaskSuspendAll+0x18>)
 8008f90:	6013      	str	r3, [r2, #0]
}
 8008f92:	bf00      	nop
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	200001dc 	.word	0x200001dc

08008fa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fae:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <xTaskResumeAll+0x114>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <xTaskResumeAll+0x2c>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	603b      	str	r3, [r7, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fcc:	f000 fde2 	bl	8009b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fd0:	4b38      	ldr	r3, [pc, #224]	; (80090b4 <xTaskResumeAll+0x114>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4a37      	ldr	r2, [pc, #220]	; (80090b4 <xTaskResumeAll+0x114>)
 8008fd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fda:	4b36      	ldr	r3, [pc, #216]	; (80090b4 <xTaskResumeAll+0x114>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d161      	bne.n	80090a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fe2:	4b35      	ldr	r3, [pc, #212]	; (80090b8 <xTaskResumeAll+0x118>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d05d      	beq.n	80090a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fea:	e02e      	b.n	800904a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008fec:	4b33      	ldr	r3, [pc, #204]	; (80090bc <xTaskResumeAll+0x11c>)
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3318      	adds	r3, #24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff f82d 	bl	8008058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3304      	adds	r3, #4
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff f828 	bl	8008058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	2201      	movs	r2, #1
 800900e:	409a      	lsls	r2, r3
 8009010:	4b2b      	ldr	r3, [pc, #172]	; (80090c0 <xTaskResumeAll+0x120>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4313      	orrs	r3, r2
 8009016:	4a2a      	ldr	r2, [pc, #168]	; (80090c0 <xTaskResumeAll+0x120>)
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4a27      	ldr	r2, [pc, #156]	; (80090c4 <xTaskResumeAll+0x124>)
 8009028:	441a      	add	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3304      	adds	r3, #4
 800902e:	4619      	mov	r1, r3
 8009030:	4610      	mov	r0, r2
 8009032:	f7fe ffb4 	bl	8007f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903a:	4b23      	ldr	r3, [pc, #140]	; (80090c8 <xTaskResumeAll+0x128>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d302      	bcc.n	800904a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009044:	4b21      	ldr	r3, [pc, #132]	; (80090cc <xTaskResumeAll+0x12c>)
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800904a:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <xTaskResumeAll+0x11c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1cc      	bne.n	8008fec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009058:	f000 fb3e 	bl	80096d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800905c:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <xTaskResumeAll+0x130>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d010      	beq.n	800908a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009068:	f000 f836 	bl	80090d8 <xTaskIncrementTick>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <xTaskResumeAll+0x12c>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3b01      	subs	r3, #1
 800907c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1f1      	bne.n	8009068 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009084:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <xTaskResumeAll+0x130>)
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800908a:	4b10      	ldr	r3, [pc, #64]	; (80090cc <xTaskResumeAll+0x12c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d009      	beq.n	80090a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009092:	2301      	movs	r3, #1
 8009094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <xTaskResumeAll+0x134>)
 8009098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090a6:	f000 fda5 	bl	8009bf4 <vPortExitCritical>

	return xAlreadyYielded;
 80090aa:	68bb      	ldr	r3, [r7, #8]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	200001dc 	.word	0x200001dc
 80090b8:	200001b4 	.word	0x200001b4
 80090bc:	20000174 	.word	0x20000174
 80090c0:	200001bc 	.word	0x200001bc
 80090c4:	200000b8 	.word	0x200000b8
 80090c8:	200000b4 	.word	0x200000b4
 80090cc:	200001c8 	.word	0x200001c8
 80090d0:	200001c4 	.word	0x200001c4
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090e2:	4b51      	ldr	r3, [pc, #324]	; (8009228 <xTaskIncrementTick+0x150>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f040 808d 	bne.w	8009206 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090ec:	4b4f      	ldr	r3, [pc, #316]	; (800922c <xTaskIncrementTick+0x154>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f4:	4a4d      	ldr	r2, [pc, #308]	; (800922c <xTaskIncrementTick+0x154>)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d120      	bne.n	8009142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009100:	4b4b      	ldr	r3, [pc, #300]	; (8009230 <xTaskIncrementTick+0x158>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <xTaskIncrementTick+0x48>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	603b      	str	r3, [r7, #0]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xTaskIncrementTick+0x46>
 8009120:	4b43      	ldr	r3, [pc, #268]	; (8009230 <xTaskIncrementTick+0x158>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	4b43      	ldr	r3, [pc, #268]	; (8009234 <xTaskIncrementTick+0x15c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a41      	ldr	r2, [pc, #260]	; (8009230 <xTaskIncrementTick+0x158>)
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4a41      	ldr	r2, [pc, #260]	; (8009234 <xTaskIncrementTick+0x15c>)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	4b40      	ldr	r3, [pc, #256]	; (8009238 <xTaskIncrementTick+0x160>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	4a3f      	ldr	r2, [pc, #252]	; (8009238 <xTaskIncrementTick+0x160>)
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	f000 facb 	bl	80096d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009142:	4b3e      	ldr	r3, [pc, #248]	; (800923c <xTaskIncrementTick+0x164>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	429a      	cmp	r2, r3
 800914a:	d34d      	bcc.n	80091e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914c:	4b38      	ldr	r3, [pc, #224]	; (8009230 <xTaskIncrementTick+0x158>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <xTaskIncrementTick+0x82>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <xTaskIncrementTick+0x84>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009160:	4b36      	ldr	r3, [pc, #216]	; (800923c <xTaskIncrementTick+0x164>)
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	601a      	str	r2, [r3, #0]
					break;
 8009168:	e03e      	b.n	80091e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800916a:	4b31      	ldr	r3, [pc, #196]	; (8009230 <xTaskIncrementTick+0x158>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d203      	bcs.n	800918a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009182:	4a2e      	ldr	r2, [pc, #184]	; (800923c <xTaskIncrementTick+0x164>)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6013      	str	r3, [r2, #0]
						break;
 8009188:	e02e      	b.n	80091e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	3304      	adds	r3, #4
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ff62 	bl	8008058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3318      	adds	r3, #24
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fe ff59 	bl	8008058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	2201      	movs	r2, #1
 80091ac:	409a      	lsls	r2, r3
 80091ae:	4b24      	ldr	r3, [pc, #144]	; (8009240 <xTaskIncrementTick+0x168>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	4a22      	ldr	r2, [pc, #136]	; (8009240 <xTaskIncrementTick+0x168>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a1f      	ldr	r2, [pc, #124]	; (8009244 <xTaskIncrementTick+0x16c>)
 80091c6:	441a      	add	r2, r3
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fee5 	bl	8007f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <xTaskIncrementTick+0x170>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	429a      	cmp	r2, r3
 80091e0:	d3b4      	bcc.n	800914c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091e2:	2301      	movs	r3, #1
 80091e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e6:	e7b1      	b.n	800914c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091e8:	4b17      	ldr	r3, [pc, #92]	; (8009248 <xTaskIncrementTick+0x170>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	4915      	ldr	r1, [pc, #84]	; (8009244 <xTaskIncrementTick+0x16c>)
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d907      	bls.n	8009210 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e004      	b.n	8009210 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009206:	4b11      	ldr	r3, [pc, #68]	; (800924c <xTaskIncrementTick+0x174>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	4a0f      	ldr	r2, [pc, #60]	; (800924c <xTaskIncrementTick+0x174>)
 800920e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <xTaskIncrementTick+0x178>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800921c:	697b      	ldr	r3, [r7, #20]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200001dc 	.word	0x200001dc
 800922c:	200001b8 	.word	0x200001b8
 8009230:	2000016c 	.word	0x2000016c
 8009234:	20000170 	.word	0x20000170
 8009238:	200001cc 	.word	0x200001cc
 800923c:	200001d4 	.word	0x200001d4
 8009240:	200001bc 	.word	0x200001bc
 8009244:	200000b8 	.word	0x200000b8
 8009248:	200000b4 	.word	0x200000b4
 800924c:	200001c4 	.word	0x200001c4
 8009250:	200001c8 	.word	0x200001c8

08009254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800925a:	4b39      	ldr	r3, [pc, #228]	; (8009340 <vTaskSwitchContext+0xec>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009262:	4b38      	ldr	r3, [pc, #224]	; (8009344 <vTaskSwitchContext+0xf0>)
 8009264:	2201      	movs	r2, #1
 8009266:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009268:	e066      	b.n	8009338 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800926a:	4b36      	ldr	r3, [pc, #216]	; (8009344 <vTaskSwitchContext+0xf0>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009270:	4b35      	ldr	r3, [pc, #212]	; (8009348 <vTaskSwitchContext+0xf4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	61fb      	str	r3, [r7, #28]
 8009278:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	429a      	cmp	r2, r3
 8009286:	d111      	bne.n	80092ac <vTaskSwitchContext+0x58>
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	3304      	adds	r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	429a      	cmp	r2, r3
 8009292:	d10b      	bne.n	80092ac <vTaskSwitchContext+0x58>
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	3308      	adds	r3, #8
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	429a      	cmp	r2, r3
 800929e:	d105      	bne.n	80092ac <vTaskSwitchContext+0x58>
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	330c      	adds	r3, #12
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d008      	beq.n	80092be <vTaskSwitchContext+0x6a>
 80092ac:	4b26      	ldr	r3, [pc, #152]	; (8009348 <vTaskSwitchContext+0xf4>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b25      	ldr	r3, [pc, #148]	; (8009348 <vTaskSwitchContext+0xf4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3334      	adds	r3, #52	; 0x34
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f001 f8f0 	bl	800a49e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80092be:	4b23      	ldr	r3, [pc, #140]	; (800934c <vTaskSwitchContext+0xf8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	fab3 f383 	clz	r3, r3
 80092ca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	f1c3 031f 	rsb	r3, r3, #31
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	491e      	ldr	r1, [pc, #120]	; (8009350 <vTaskSwitchContext+0xfc>)
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4613      	mov	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <vTaskSwitchContext+0xaa>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	607b      	str	r3, [r7, #4]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <vTaskSwitchContext+0xa8>
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4a11      	ldr	r2, [pc, #68]	; (8009350 <vTaskSwitchContext+0xfc>)
 800930a:	4413      	add	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3308      	adds	r3, #8
 8009320:	429a      	cmp	r2, r3
 8009322:	d104      	bne.n	800932e <vTaskSwitchContext+0xda>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a04      	ldr	r2, [pc, #16]	; (8009348 <vTaskSwitchContext+0xf4>)
 8009336:	6013      	str	r3, [r2, #0]
}
 8009338:	bf00      	nop
 800933a:	3720      	adds	r7, #32
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	200001dc 	.word	0x200001dc
 8009344:	200001c8 	.word	0x200001c8
 8009348:	200000b4 	.word	0x200000b4
 800934c:	200001bc 	.word	0x200001bc
 8009350:	200000b8 	.word	0x200000b8

08009354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10a      	bne.n	800937a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60fb      	str	r3, [r7, #12]
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800937a:	4b07      	ldr	r3, [pc, #28]	; (8009398 <vTaskPlaceOnEventList+0x44>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3318      	adds	r3, #24
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fe fe2f 	bl	8007fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009388:	2101      	movs	r1, #1
 800938a:	6838      	ldr	r0, [r7, #0]
 800938c:	f000 fa6e 	bl	800986c <prvAddCurrentTaskToDelayedList>
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	200000b4 	.word	0x200000b4

0800939c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	60fb      	str	r3, [r7, #12]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	3318      	adds	r3, #24
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fe43 	bl	8008058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d2:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <xTaskRemoveFromEventList+0xac>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d11c      	bne.n	8009414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	3304      	adds	r3, #4
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fe3a 	bl	8008058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	2201      	movs	r2, #1
 80093ea:	409a      	lsls	r2, r3
 80093ec:	4b17      	ldr	r3, [pc, #92]	; (800944c <xTaskRemoveFromEventList+0xb0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	4a16      	ldr	r2, [pc, #88]	; (800944c <xTaskRemoveFromEventList+0xb0>)
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4a13      	ldr	r2, [pc, #76]	; (8009450 <xTaskRemoveFromEventList+0xb4>)
 8009404:	441a      	add	r2, r3
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fe fdc6 	bl	8007f9e <vListInsertEnd>
 8009412:	e005      	b.n	8009420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	3318      	adds	r3, #24
 8009418:	4619      	mov	r1, r3
 800941a:	480e      	ldr	r0, [pc, #56]	; (8009454 <xTaskRemoveFromEventList+0xb8>)
 800941c:	f7fe fdbf 	bl	8007f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <xTaskRemoveFromEventList+0xbc>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	429a      	cmp	r2, r3
 800942c:	d905      	bls.n	800943a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800942e:	2301      	movs	r3, #1
 8009430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <xTaskRemoveFromEventList+0xc0>)
 8009434:	2201      	movs	r2, #1
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e001      	b.n	800943e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800943e:	697b      	ldr	r3, [r7, #20]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	200001dc 	.word	0x200001dc
 800944c:	200001bc 	.word	0x200001bc
 8009450:	200000b8 	.word	0x200000b8
 8009454:	20000174 	.word	0x20000174
 8009458:	200000b4 	.word	0x200000b4
 800945c:	200001c8 	.word	0x200001c8

08009460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009468:	4b06      	ldr	r3, [pc, #24]	; (8009484 <vTaskInternalSetTimeOutState+0x24>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <vTaskInternalSetTimeOutState+0x28>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	200001cc 	.word	0x200001cc
 8009488:	200001b8 	.word	0x200001b8

0800948c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	613b      	str	r3, [r7, #16]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60fb      	str	r3, [r7, #12]
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094ce:	f000 fb61 	bl	8009b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <xTaskCheckForTimeOut+0xbc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d102      	bne.n	80094f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]
 80094f0:	e023      	b.n	800953a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b15      	ldr	r3, [pc, #84]	; (800954c <xTaskCheckForTimeOut+0xc0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d007      	beq.n	800950e <xTaskCheckForTimeOut+0x82>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	e015      	b.n	800953a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	429a      	cmp	r2, r3
 8009516:	d20b      	bcs.n	8009530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ff9b 	bl	8009460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
 800952e:	e004      	b.n	800953a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800953a:	f000 fb5b 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 800953e:	69fb      	ldr	r3, [r7, #28]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	200001b8 	.word	0x200001b8
 800954c:	200001cc 	.word	0x200001cc

08009550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009554:	4b03      	ldr	r3, [pc, #12]	; (8009564 <vTaskMissedYield+0x14>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	200001c8 	.word	0x200001c8

08009568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009570:	f000 f854 	bl	800961c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009574:	4b07      	ldr	r3, [pc, #28]	; (8009594 <prvIdleTask+0x2c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d907      	bls.n	800958c <prvIdleTask+0x24>
			{
				taskYIELD();
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <prvIdleTask+0x30>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800958c:	f000 ff80 	bl	800a490 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009590:	e7ee      	b.n	8009570 <prvIdleTask+0x8>
 8009592:	bf00      	nop
 8009594:	200000b8 	.word	0x200000b8
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e00c      	b.n	80095c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a12      	ldr	r2, [pc, #72]	; (80095fc <prvInitialiseTaskLists+0x60>)
 80095b4:	4413      	add	r3, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fcc4 	bl	8007f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3301      	adds	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b06      	cmp	r3, #6
 80095c6:	d9ef      	bls.n	80095a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095c8:	480d      	ldr	r0, [pc, #52]	; (8009600 <prvInitialiseTaskLists+0x64>)
 80095ca:	f7fe fcbb 	bl	8007f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ce:	480d      	ldr	r0, [pc, #52]	; (8009604 <prvInitialiseTaskLists+0x68>)
 80095d0:	f7fe fcb8 	bl	8007f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095d4:	480c      	ldr	r0, [pc, #48]	; (8009608 <prvInitialiseTaskLists+0x6c>)
 80095d6:	f7fe fcb5 	bl	8007f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095da:	480c      	ldr	r0, [pc, #48]	; (800960c <prvInitialiseTaskLists+0x70>)
 80095dc:	f7fe fcb2 	bl	8007f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095e0:	480b      	ldr	r0, [pc, #44]	; (8009610 <prvInitialiseTaskLists+0x74>)
 80095e2:	f7fe fcaf 	bl	8007f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <prvInitialiseTaskLists+0x78>)
 80095e8:	4a05      	ldr	r2, [pc, #20]	; (8009600 <prvInitialiseTaskLists+0x64>)
 80095ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <prvInitialiseTaskLists+0x7c>)
 80095ee:	4a05      	ldr	r2, [pc, #20]	; (8009604 <prvInitialiseTaskLists+0x68>)
 80095f0:	601a      	str	r2, [r3, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	200000b8 	.word	0x200000b8
 8009600:	20000144 	.word	0x20000144
 8009604:	20000158 	.word	0x20000158
 8009608:	20000174 	.word	0x20000174
 800960c:	20000188 	.word	0x20000188
 8009610:	200001a0 	.word	0x200001a0
 8009614:	2000016c 	.word	0x2000016c
 8009618:	20000170 	.word	0x20000170

0800961c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009622:	e019      	b.n	8009658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009624:	f000 fab6 	bl	8009b94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009628:	4b10      	ldr	r3, [pc, #64]	; (800966c <prvCheckTasksWaitingTermination+0x50>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fd0f 	bl	8008058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <prvCheckTasksWaitingTermination+0x54>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	4a0b      	ldr	r2, [pc, #44]	; (8009670 <prvCheckTasksWaitingTermination+0x54>)
 8009642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	4a0a      	ldr	r2, [pc, #40]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800964c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800964e:	f000 fad1 	bl	8009bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f810 	bl	8009678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e1      	bne.n	8009624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000188 	.word	0x20000188
 8009670:	200001b4 	.word	0x200001b4
 8009674:	2000019c 	.word	0x2000019c

08009678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009686:	2b00      	cmp	r3, #0
 8009688:	d108      	bne.n	800969c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fc6c 	bl	8009f6c <vPortFree>
				vPortFree( pxTCB );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc69 	bl	8009f6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800969a:	e018      	b.n	80096ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d103      	bne.n	80096ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fc60 	bl	8009f6c <vPortFree>
	}
 80096ac:	e00f      	b.n	80096ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d00a      	beq.n	80096ce <prvDeleteTCB+0x56>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	60fb      	str	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <prvDeleteTCB+0x54>
	}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <prvResetNextTaskUnblockTime+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <prvResetNextTaskUnblockTime+0x14>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <prvResetNextTaskUnblockTime+0x16>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <prvResetNextTaskUnblockTime+0x48>)
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096fa:	e008      	b.n	800970e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096fc:	4b07      	ldr	r3, [pc, #28]	; (800971c <prvResetNextTaskUnblockTime+0x44>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4a05      	ldr	r2, [pc, #20]	; (8009720 <prvResetNextTaskUnblockTime+0x48>)
 800970c:	6013      	str	r3, [r2, #0]
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	2000016c 	.word	0x2000016c
 8009720:	200001d4 	.word	0x200001d4

08009724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <xTaskGetSchedulerState+0x34>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009732:	2301      	movs	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	e008      	b.n	800974a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <xTaskGetSchedulerState+0x38>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009740:	2302      	movs	r3, #2
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	e001      	b.n	800974a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800974a:	687b      	ldr	r3, [r7, #4]
	}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	200001c0 	.word	0x200001c0
 800975c:	200001dc 	.word	0x200001dc

08009760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d06e      	beq.n	8009854 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009776:	4b3a      	ldr	r3, [pc, #232]	; (8009860 <xTaskPriorityDisinherit+0x100>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	d00a      	beq.n	8009796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60bb      	str	r3, [r7, #8]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b8:	1e5a      	subs	r2, r3, #1
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d044      	beq.n	8009854 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d140      	bne.n	8009854 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fc3e 	bl	8008058 <uxListRemove>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d115      	bne.n	800980e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	491f      	ldr	r1, [pc, #124]	; (8009864 <xTaskPriorityDisinherit+0x104>)
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xTaskPriorityDisinherit+0xae>
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	2201      	movs	r2, #1
 80097fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009802:	43da      	mvns	r2, r3
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4013      	ands	r3, r2
 800980a:	4a17      	ldr	r2, [pc, #92]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 800980c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	f1c3 0207 	rsb	r2, r3, #7
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	2201      	movs	r2, #1
 8009828:	409a      	lsls	r2, r3
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4313      	orrs	r3, r2
 8009830:	4a0d      	ldr	r2, [pc, #52]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a08      	ldr	r2, [pc, #32]	; (8009864 <xTaskPriorityDisinherit+0x104>)
 8009842:	441a      	add	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe fba7 	bl	8007f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009854:	697b      	ldr	r3, [r7, #20]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	200000b4 	.word	0x200000b4
 8009864:	200000b8 	.word	0x200000b8
 8009868:	200001bc 	.word	0x200001bc

0800986c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009876:	4b29      	ldr	r3, [pc, #164]	; (800991c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800987c:	4b28      	ldr	r3, [pc, #160]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3304      	adds	r3, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fbe8 	bl	8008058 <uxListRemove>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800988e:	4b24      	ldr	r3, [pc, #144]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	2201      	movs	r2, #1
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	43da      	mvns	r2, r3
 800989c:	4b21      	ldr	r3, [pc, #132]	; (8009924 <prvAddCurrentTaskToDelayedList+0xb8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4013      	ands	r3, r2
 80098a2:	4a20      	ldr	r2, [pc, #128]	; (8009924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d10a      	bne.n	80098c4 <prvAddCurrentTaskToDelayedList+0x58>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b4:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	481a      	ldr	r0, [pc, #104]	; (8009928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80098be:	f7fe fb6e 	bl	8007f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098c2:	e026      	b.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d209      	bcs.n	80098f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098dc:	4b13      	ldr	r3, [pc, #76]	; (800992c <prvAddCurrentTaskToDelayedList+0xc0>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe fb7c 	bl	8007fe6 <vListInsert>
}
 80098ee:	e010      	b.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fe fb72 	bl	8007fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	d202      	bcs.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800990c:	4a09      	ldr	r2, [pc, #36]	; (8009934 <prvAddCurrentTaskToDelayedList+0xc8>)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6013      	str	r3, [r2, #0]
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200001b8 	.word	0x200001b8
 8009920:	200000b4 	.word	0x200000b4
 8009924:	200001bc 	.word	0x200001bc
 8009928:	200001a0 	.word	0x200001a0
 800992c:	20000170 	.word	0x20000170
 8009930:	2000016c 	.word	0x2000016c
 8009934:	200001d4 	.word	0x200001d4

08009938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3b04      	subs	r3, #4
 8009948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3b04      	subs	r3, #4
 8009956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f023 0201 	bic.w	r2, r3, #1
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3b04      	subs	r3, #4
 8009966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009968:	4a0c      	ldr	r2, [pc, #48]	; (800999c <pxPortInitialiseStack+0x64>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3b14      	subs	r3, #20
 8009972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3b04      	subs	r3, #4
 800997e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f06f 0202 	mvn.w	r2, #2
 8009986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3b20      	subs	r3, #32
 800998c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800998e:	68fb      	ldr	r3, [r7, #12]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	080099a1 	.word	0x080099a1

080099a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099aa:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <prvTaskExitError+0x54>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b2:	d00a      	beq.n	80099ca <prvTaskExitError+0x2a>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <prvTaskExitError+0x28>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	60bb      	str	r3, [r7, #8]
}
 80099dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099de:	bf00      	nop
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0fc      	beq.n	80099e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	20000024 	.word	0x20000024
	...

08009a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a00:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <pxCurrentTCBConst2>)
 8009a02:	6819      	ldr	r1, [r3, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	f380 8809 	msr	PSP, r0
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f04f 0000 	mov.w	r0, #0
 8009a16:	f380 8811 	msr	BASEPRI, r0
 8009a1a:	4770      	bx	lr
 8009a1c:	f3af 8000 	nop.w

08009a20 <pxCurrentTCBConst2>:
 8009a20:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a28:	4808      	ldr	r0, [pc, #32]	; (8009a4c <prvPortStartFirstTask+0x24>)
 8009a2a:	6800      	ldr	r0, [r0, #0]
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f380 8808 	msr	MSP, r0
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8814 	msr	CONTROL, r0
 8009a3a:	b662      	cpsie	i
 8009a3c:	b661      	cpsie	f
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	df00      	svc	0
 8009a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a4a:	bf00      	nop
 8009a4c:	e000ed08 	.word	0xe000ed08

08009a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a56:	4b46      	ldr	r3, [pc, #280]	; (8009b70 <xPortStartScheduler+0x120>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a46      	ldr	r2, [pc, #280]	; (8009b74 <xPortStartScheduler+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d10a      	bne.n	8009a76 <xPortStartScheduler+0x26>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a76:	4b3e      	ldr	r3, [pc, #248]	; (8009b70 <xPortStartScheduler+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a3f      	ldr	r2, [pc, #252]	; (8009b78 <xPortStartScheduler+0x128>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10a      	bne.n	8009a96 <xPortStartScheduler+0x46>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a96:	4b39      	ldr	r3, [pc, #228]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	22ff      	movs	r2, #255	; 0xff
 8009aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <xPortStartScheduler+0x130>)
 8009abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009abe:	4b31      	ldr	r3, [pc, #196]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ac4:	e009      	b.n	8009ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ac6:	4b2f      	ldr	r3, [pc, #188]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	4a2d      	ldr	r2, [pc, #180]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae2:	2b80      	cmp	r3, #128	; 0x80
 8009ae4:	d0ef      	beq.n	8009ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ae6:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f1c3 0307 	rsb	r3, r3, #7
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d00a      	beq.n	8009b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60bb      	str	r3, [r7, #8]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b08:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	4a1d      	ldr	r2, [pc, #116]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b12:	4b1c      	ldr	r3, [pc, #112]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b1a:	4a1a      	ldr	r2, [pc, #104]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b26:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a17      	ldr	r2, [pc, #92]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a14      	ldr	r2, [pc, #80]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b3e:	f000 f8dd 	bl	8009cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <xPortStartScheduler+0x13c>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b48:	f000 f8fc 	bl	8009d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b4c:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <xPortStartScheduler+0x140>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0f      	ldr	r2, [pc, #60]	; (8009b90 <xPortStartScheduler+0x140>)
 8009b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b58:	f7ff ff66 	bl	8009a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b5c:	f7ff fb7a 	bl	8009254 <vTaskSwitchContext>
	prvTaskExitError();
 8009b60:	f7ff ff1e 	bl	80099a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	e000ed00 	.word	0xe000ed00
 8009b74:	410fc271 	.word	0x410fc271
 8009b78:	410fc270 	.word	0x410fc270
 8009b7c:	e000e400 	.word	0xe000e400
 8009b80:	200001e0 	.word	0x200001e0
 8009b84:	200001e4 	.word	0x200001e4
 8009b88:	e000ed20 	.word	0xe000ed20
 8009b8c:	20000024 	.word	0x20000024
 8009b90:	e000ef34 	.word	0xe000ef34

08009b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	607b      	str	r3, [r7, #4]
}
 8009bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bae:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <vPortEnterCritical+0x58>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d10f      	bne.n	8009be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortEnterCritical+0x5c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <vPortEnterCritical+0x4a>
	}
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20000024 	.word	0x20000024
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <vPortExitCritical+0x50>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <vPortExitCritical+0x24>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	607b      	str	r3, [r7, #4]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <vPortExitCritical+0x50>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <vPortExitCritical+0x50>)
 8009c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <vPortExitCritical+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <vPortExitCritical+0x42>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	f383 8811 	msr	BASEPRI, r3
}
 8009c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000024 	.word	0x20000024
	...

08009c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c50:	f3ef 8009 	mrs	r0, PSP
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <pxCurrentTCBConst>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	f01e 0f10 	tst.w	lr, #16
 8009c60:	bf08      	it	eq
 8009c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	6010      	str	r0, [r2, #0]
 8009c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c74:	f380 8811 	msr	BASEPRI, r0
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f7ff fae8 	bl	8009254 <vTaskSwitchContext>
 8009c84:	f04f 0000 	mov.w	r0, #0
 8009c88:	f380 8811 	msr	BASEPRI, r0
 8009c8c:	bc09      	pop	{r0, r3}
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	6808      	ldr	r0, [r1, #0]
 8009c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c96:	f01e 0f10 	tst.w	lr, #16
 8009c9a:	bf08      	it	eq
 8009c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ca0:	f380 8809 	msr	PSP, r0
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst>:
 8009cb0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cd2:	f7ff fa01 	bl	80090d8 <xTaskIncrementTick>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <SysTick_Handler+0x40>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f383 8811 	msr	BASEPRI, r3
}
 8009cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <vPortSetupTimerInterrupt+0x38>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <vPortSetupTimerInterrupt+0x3c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <vPortSetupTimerInterrupt+0x40>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	099b      	lsrs	r3, r3, #6
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <vPortSetupTimerInterrupt+0x44>)
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d20:	2207      	movs	r2, #7
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	e000e010 	.word	0xe000e010
 8009d34:	e000e018 	.word	0xe000e018
 8009d38:	20000028 	.word	0x20000028
 8009d3c:	10624dd3 	.word	0x10624dd3
 8009d40:	e000e014 	.word	0xe000e014

08009d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d54 <vPortEnableVFP+0x10>
 8009d48:	6801      	ldr	r1, [r0, #0]
 8009d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d4e:	6001      	str	r1, [r0, #0]
 8009d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d52:	bf00      	nop
 8009d54:	e000ed88 	.word	0xe000ed88

08009d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b0f      	cmp	r3, #15
 8009d68:	d914      	bls.n	8009d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <vPortValidateInterruptPriority+0x70>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d74:	4b15      	ldr	r3, [pc, #84]	; (8009dcc <vPortValidateInterruptPriority+0x74>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	7afa      	ldrb	r2, [r7, #11]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d20a      	bcs.n	8009d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d94:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <vPortValidateInterruptPriority+0x78>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <vPortValidateInterruptPriority+0x7c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d90a      	bls.n	8009dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	603b      	str	r3, [r7, #0]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <vPortValidateInterruptPriority+0x60>
	}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	e000e3f0 	.word	0xe000e3f0
 8009dcc:	200001e0 	.word	0x200001e0
 8009dd0:	e000ed0c 	.word	0xe000ed0c
 8009dd4:	200001e4 	.word	0x200001e4

08009dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009de4:	f7ff f8ce 	bl	8008f84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009de8:	4b5b      	ldr	r3, [pc, #364]	; (8009f58 <pvPortMalloc+0x180>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009df0:	f000 f916 	bl	800a020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009df4:	4b59      	ldr	r3, [pc, #356]	; (8009f5c <pvPortMalloc+0x184>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 808e 	bne.w	8009f1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01d      	beq.n	8009e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e08:	2208      	movs	r2, #8
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d014      	beq.n	8009e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f023 0307 	bic.w	r3, r3, #7
 8009e20:	3308      	adds	r3, #8
 8009e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00a      	beq.n	8009e44 <pvPortMalloc+0x6c>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	617b      	str	r3, [r7, #20]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d069      	beq.n	8009f1e <pvPortMalloc+0x146>
 8009e4a:	4b45      	ldr	r3, [pc, #276]	; (8009f60 <pvPortMalloc+0x188>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d864      	bhi.n	8009f1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e54:	4b43      	ldr	r3, [pc, #268]	; (8009f64 <pvPortMalloc+0x18c>)
 8009e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e58:	4b42      	ldr	r3, [pc, #264]	; (8009f64 <pvPortMalloc+0x18c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e5e:	e004      	b.n	8009e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <pvPortMalloc+0xa4>
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1f1      	bne.n	8009e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e7c:	4b36      	ldr	r3, [pc, #216]	; (8009f58 <pvPortMalloc+0x180>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d04b      	beq.n	8009f1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	4413      	add	r3, r2
 8009e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1ad2      	subs	r2, r2, r3
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d91f      	bls.n	8009ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4413      	add	r3, r2
 8009eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	613b      	str	r3, [r7, #16]
}
 8009ecc:	bf00      	nop
 8009ece:	e7fe      	b.n	8009ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	1ad2      	subs	r2, r2, r3
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ee2:	69b8      	ldr	r0, [r7, #24]
 8009ee4:	f000 f8fe 	bl	800a0e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ee8:	4b1d      	ldr	r3, [pc, #116]	; (8009f60 <pvPortMalloc+0x188>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	4a1b      	ldr	r2, [pc, #108]	; (8009f60 <pvPortMalloc+0x188>)
 8009ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ef6:	4b1a      	ldr	r3, [pc, #104]	; (8009f60 <pvPortMalloc+0x188>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b1b      	ldr	r3, [pc, #108]	; (8009f68 <pvPortMalloc+0x190>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d203      	bcs.n	8009f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f02:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <pvPortMalloc+0x188>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a18      	ldr	r2, [pc, #96]	; (8009f68 <pvPortMalloc+0x190>)
 8009f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <pvPortMalloc+0x184>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f1e:	f7ff f83f 	bl	8008fa0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009f28:	f000 fac4 	bl	800a4b4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00a      	beq.n	8009f4c <pvPortMalloc+0x174>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60fb      	str	r3, [r7, #12]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <pvPortMalloc+0x172>
	return pvReturn;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3728      	adds	r7, #40	; 0x28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	200081f0 	.word	0x200081f0
 8009f5c:	200081fc 	.word	0x200081fc
 8009f60:	200081f4 	.word	0x200081f4
 8009f64:	200081e8 	.word	0x200081e8
 8009f68:	200081f8 	.word	0x200081f8

08009f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d048      	beq.n	800a010 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f7e:	2308      	movs	r3, #8
 8009f80:	425b      	negs	r3, r3
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	4413      	add	r3, r2
 8009f86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	4b21      	ldr	r3, [pc, #132]	; (800a018 <vPortFree+0xac>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4013      	ands	r3, r2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <vPortFree+0x44>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60fb      	str	r3, [r7, #12]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00a      	beq.n	8009fce <vPortFree+0x62>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60bb      	str	r3, [r7, #8]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <vPortFree+0xac>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d019      	beq.n	800a010 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d115      	bne.n	800a010 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <vPortFree+0xac>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	43db      	mvns	r3, r3
 8009fee:	401a      	ands	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ff4:	f7fe ffc6 	bl	8008f84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	4b07      	ldr	r3, [pc, #28]	; (800a01c <vPortFree+0xb0>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4413      	add	r3, r2
 800a002:	4a06      	ldr	r2, [pc, #24]	; (800a01c <vPortFree+0xb0>)
 800a004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a006:	6938      	ldr	r0, [r7, #16]
 800a008:	f000 f86c 	bl	800a0e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a00c:	f7fe ffc8 	bl	8008fa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a010:	bf00      	nop
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	200081fc 	.word	0x200081fc
 800a01c:	200081f4 	.word	0x200081f4

0800a020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a02a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a02c:	4b27      	ldr	r3, [pc, #156]	; (800a0cc <prvHeapInit+0xac>)
 800a02e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00c      	beq.n	800a054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3307      	adds	r3, #7
 800a03e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0307 	bic.w	r3, r3, #7
 800a046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	4a1f      	ldr	r2, [pc, #124]	; (800a0cc <prvHeapInit+0xac>)
 800a050:	4413      	add	r3, r2
 800a052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a058:	4a1d      	ldr	r2, [pc, #116]	; (800a0d0 <prvHeapInit+0xb0>)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a05e:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <prvHeapInit+0xb0>)
 800a060:	2200      	movs	r2, #0
 800a062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	4413      	add	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a06c:	2208      	movs	r2, #8
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0307 	bic.w	r3, r3, #7
 800a07a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <prvHeapInit+0xb4>)
 800a080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a082:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <prvHeapInit+0xb4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a08a:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <prvHeapInit+0xb4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <prvHeapInit+0xb4>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	4a0a      	ldr	r2, [pc, #40]	; (800a0d8 <prvHeapInit+0xb8>)
 800a0ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <prvHeapInit+0xbc>)
 800a0b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0b8:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <prvHeapInit+0xc0>)
 800a0ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0be:	601a      	str	r2, [r3, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	200001e8 	.word	0x200001e8
 800a0d0:	200081e8 	.word	0x200081e8
 800a0d4:	200081f0 	.word	0x200081f0
 800a0d8:	200081f8 	.word	0x200081f8
 800a0dc:	200081f4 	.word	0x200081f4
 800a0e0:	200081fc 	.word	0x200081fc

0800a0e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <prvInsertBlockIntoFreeList+0xac>)
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	e002      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x14>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d8f7      	bhi.n	800a0f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	4413      	add	r3, r2
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d108      	bne.n	800a126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	441a      	add	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	441a      	add	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d118      	bne.n	800a16c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	4b15      	ldr	r3, [pc, #84]	; (800a194 <prvInsertBlockIntoFreeList+0xb0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d00d      	beq.n	800a162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	441a      	add	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	e008      	b.n	800a174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <prvInsertBlockIntoFreeList+0xb0>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	e003      	b.n	800a174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d002      	beq.n	800a182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a182:	bf00      	nop
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	200081e8 	.word	0x200081e8
 800a194:	200081f0 	.word	0x200081f0

0800a198 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800a19c:	4b06      	ldr	r3, [pc, #24]	; (800a1b8 <MX_CRC_Init+0x20>)
 800a19e:	4a07      	ldr	r2, [pc, #28]	; (800a1bc <MX_CRC_Init+0x24>)
 800a1a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a1a2:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <MX_CRC_Init+0x20>)
 800a1a4:	f7f6 faee 	bl	8000784 <HAL_CRC_Init>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a1ae:	f000 fdd7 	bl	800ad60 <Error_Handler>
  }

}
 800a1b2:	bf00      	nop
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20008200 	.word	0x20008200
 800a1bc:	40023000 	.word	0x40023000

0800a1c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	; (800a1fc <HAL_CRC_MspInit+0x3c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d10d      	bne.n	800a1ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <HAL_CRC_MspInit+0x40>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	4a09      	ldr	r2, [pc, #36]	; (800a200 <HAL_CRC_MspInit+0x40>)
 800a1dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1e2:	4b07      	ldr	r3, [pc, #28]	; (800a200 <HAL_CRC_MspInit+0x40>)
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	40023000 	.word	0x40023000
 800a200:	40023800 	.word	0x40023800

0800a204 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800a208:	4b15      	ldr	r3, [pc, #84]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a20a:	4a16      	ldr	r2, [pc, #88]	; (800a264 <MX_DMA2D_Init+0x60>)
 800a20c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800a20e:	4b14      	ldr	r3, [pc, #80]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a210:	2200      	movs	r2, #0
 800a212:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800a214:	4b12      	ldr	r3, [pc, #72]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a216:	2200      	movs	r2, #0
 800a218:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800a220:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a222:	2200      	movs	r2, #0
 800a224:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800a226:	4b0e      	ldr	r3, [pc, #56]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a22e:	2200      	movs	r2, #0
 800a230:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800a232:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a234:	2200      	movs	r2, #0
 800a236:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a23a:	f7f6 fac2 	bl	80007c2 <HAL_DMA2D_Init>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800a244:	f000 fd8c 	bl	800ad60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800a248:	2101      	movs	r1, #1
 800a24a:	4805      	ldr	r0, [pc, #20]	; (800a260 <MX_DMA2D_Init+0x5c>)
 800a24c:	f7f6 fc12 	bl	8000a74 <HAL_DMA2D_ConfigLayer>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800a256:	f000 fd83 	bl	800ad60 <Error_Handler>
  }

}
 800a25a:	bf00      	nop
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	20008208 	.word	0x20008208
 800a264:	4002b000 	.word	0x4002b000

0800a268 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a0e      	ldr	r2, [pc, #56]	; (800a2b0 <HAL_DMA2D_MspInit+0x48>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d115      	bne.n	800a2a6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <HAL_DMA2D_MspInit+0x4c>)
 800a280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a282:	4a0c      	ldr	r2, [pc, #48]	; (800a2b4 <HAL_DMA2D_MspInit+0x4c>)
 800a284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a288:	6313      	str	r3, [r2, #48]	; 0x30
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <HAL_DMA2D_MspInit+0x4c>)
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800a296:	2200      	movs	r2, #0
 800a298:	2105      	movs	r1, #5
 800a29a:	205a      	movs	r0, #90	; 0x5a
 800a29c:	f7f6 fa48 	bl	8000730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800a2a0:	205a      	movs	r0, #90	; 0x5a
 800a2a2:	f7f6 fa61 	bl	8000768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	4002b000 	.word	0x4002b000
 800a2b4:	40023800 	.word	0x40023800

0800a2b8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	609a      	str	r2, [r3, #8]
 800a2c8:	60da      	str	r2, [r3, #12]
 800a2ca:	611a      	str	r2, [r3, #16]
 800a2cc:	615a      	str	r2, [r3, #20]
 800a2ce:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a2d0:	4b1f      	ldr	r3, [pc, #124]	; (800a350 <MX_FMC_Init+0x98>)
 800a2d2:	4a20      	ldr	r2, [pc, #128]	; (800a354 <MX_FMC_Init+0x9c>)
 800a2d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800a2d6:	4b1e      	ldr	r3, [pc, #120]	; (800a350 <MX_FMC_Init+0x98>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a2dc:	4b1c      	ldr	r3, [pc, #112]	; (800a350 <MX_FMC_Init+0x98>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a2e2:	4b1b      	ldr	r3, [pc, #108]	; (800a350 <MX_FMC_Init+0x98>)
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a2e8:	4b19      	ldr	r3, [pc, #100]	; (800a350 <MX_FMC_Init+0x98>)
 800a2ea:	2210      	movs	r2, #16
 800a2ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a2ee:	4b18      	ldr	r3, [pc, #96]	; (800a350 <MX_FMC_Init+0x98>)
 800a2f0:	2240      	movs	r2, #64	; 0x40
 800a2f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <MX_FMC_Init+0x98>)
 800a2f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a2fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a2fc:	4b14      	ldr	r3, [pc, #80]	; (800a350 <MX_FMC_Init+0x98>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a302:	4b13      	ldr	r3, [pc, #76]	; (800a350 <MX_FMC_Init+0x98>)
 800a304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a308:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <MX_FMC_Init+0x98>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800a310:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <MX_FMC_Init+0x98>)
 800a312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a316:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a318:	2302      	movs	r3, #2
 800a31a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a31c:	2307      	movs	r3, #7
 800a31e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a320:	2304      	movs	r3, #4
 800a322:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a324:	2307      	movs	r3, #7
 800a326:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a328:	2303      	movs	r3, #3
 800a32a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a32c:	2302      	movs	r3, #2
 800a32e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a330:	2302      	movs	r3, #2
 800a332:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a334:	1d3b      	adds	r3, r7, #4
 800a336:	4619      	mov	r1, r3
 800a338:	4805      	ldr	r0, [pc, #20]	; (800a350 <MX_FMC_Init+0x98>)
 800a33a:	f7f9 fdbf 	bl	8003ebc <HAL_SDRAM_Init>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a344:	f000 fd0c 	bl	800ad60 <Error_Handler>
  }

}
 800a348:	bf00      	nop
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20008248 	.word	0x20008248
 800a354:	a0000140 	.word	0xa0000140

0800a358 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35e:	1d3b      	adds	r3, r7, #4
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800a36c:	4b3b      	ldr	r3, [pc, #236]	; (800a45c <HAL_FMC_MspInit+0x104>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d16f      	bne.n	800a454 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800a374:	4b39      	ldr	r3, [pc, #228]	; (800a45c <HAL_FMC_MspInit+0x104>)
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a37a:	2300      	movs	r3, #0
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	4b38      	ldr	r3, [pc, #224]	; (800a460 <HAL_FMC_MspInit+0x108>)
 800a380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a382:	4a37      	ldr	r2, [pc, #220]	; (800a460 <HAL_FMC_MspInit+0x108>)
 800a384:	f043 0301 	orr.w	r3, r3, #1
 800a388:	6393      	str	r3, [r2, #56]	; 0x38
 800a38a:	4b35      	ldr	r3, [pc, #212]	; (800a460 <HAL_FMC_MspInit+0x108>)
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	f003 0301 	and.w	r3, r3, #1
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800a396:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a39a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a39c:	2302      	movs	r3, #2
 800a39e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a3a8:	230c      	movs	r3, #12
 800a3aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a3ac:	1d3b      	adds	r3, r7, #4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	482c      	ldr	r0, [pc, #176]	; (800a464 <HAL_FMC_MspInit+0x10c>)
 800a3b2:	f7f6 fbf1 	bl	8000b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800a3ca:	1d3b      	adds	r3, r7, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4826      	ldr	r0, [pc, #152]	; (800a468 <HAL_FMC_MspInit+0x110>)
 800a3d0:	f7f6 fbe2 	bl	8000b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800a3d4:	f248 1333 	movw	r3, #33075	; 0x8133
 800a3d8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3da:	2302      	movs	r3, #2
 800a3dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a3e6:	230c      	movs	r3, #12
 800a3e8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	481f      	ldr	r0, [pc, #124]	; (800a46c <HAL_FMC_MspInit+0x114>)
 800a3f0:	f7f6 fbd2 	bl	8000b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800a3f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a3f8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a402:	2303      	movs	r3, #3
 800a404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a406:	230c      	movs	r3, #12
 800a408:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a40a:	1d3b      	adds	r3, r7, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4818      	ldr	r0, [pc, #96]	; (800a470 <HAL_FMC_MspInit+0x118>)
 800a410:	f7f6 fbc2 	bl	8000b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800a414:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a418:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41a:	2302      	movs	r3, #2
 800a41c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a422:	2303      	movs	r3, #3
 800a424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a426:	230c      	movs	r3, #12
 800a428:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a42a:	1d3b      	adds	r3, r7, #4
 800a42c:	4619      	mov	r1, r3
 800a42e:	4811      	ldr	r0, [pc, #68]	; (800a474 <HAL_FMC_MspInit+0x11c>)
 800a430:	f7f6 fbb2 	bl	8000b98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800a434:	2360      	movs	r3, #96	; 0x60
 800a436:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a438:	2302      	movs	r3, #2
 800a43a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a440:	2303      	movs	r3, #3
 800a442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a444:	230c      	movs	r3, #12
 800a446:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a448:	1d3b      	adds	r3, r7, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	480a      	ldr	r0, [pc, #40]	; (800a478 <HAL_FMC_MspInit+0x120>)
 800a44e:	f7f6 fba3 	bl	8000b98 <HAL_GPIO_Init>
 800a452:	e000      	b.n	800a456 <HAL_FMC_MspInit+0xfe>
    return;
 800a454:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	2000827c 	.word	0x2000827c
 800a460:	40023800 	.word	0x40023800
 800a464:	40021400 	.word	0x40021400
 800a468:	40020800 	.word	0x40020800
 800a46c:	40021800 	.word	0x40021800
 800a470:	40021000 	.word	0x40021000
 800a474:	40020c00 	.word	0x40020c00
 800a478:	40020400 	.word	0x40020400

0800a47c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a484:	f7ff ff68 	bl	800a358 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a07      	ldr	r2, [pc, #28]	; (800a4f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a4d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <vApplicationGetIdleTaskMemory+0x30>)
 800a4da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2280      	movs	r2, #128	; 0x80
 800a4e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20008284 	.word	0x20008284
 800a4f4:	200082dc 	.word	0x200082dc

0800a4f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800a4f8:	b5b0      	push	{r4, r5, r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <MX_FREERTOS_Init+0x30>)
 800a500:	1d3c      	adds	r4, r7, #4
 800a502:	461d      	mov	r5, r3
 800a504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a50c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a510:	1d3b      	adds	r3, r7, #4
 800a512:	2100      	movs	r1, #0
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd fbd8 	bl	8007cca <osThreadCreate>
 800a51a:	4603      	mov	r3, r0
 800a51c:	4a03      	ldr	r2, [pc, #12]	; (800a52c <MX_FREERTOS_Init+0x34>)
 800a51e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800a520:	bf00      	nop
 800a522:	3720      	adds	r7, #32
 800a524:	46bd      	mov	sp, r7
 800a526:	bdb0      	pop	{r4, r5, r7, pc}
 800a528:	0800bc18 	.word	0x0800bc18
 800a52c:	20008280 	.word	0x20008280

0800a530 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a538:	f000 feb8 	bl	800b2ac <MX_USB_HOST_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a53c:	2001      	movs	r0, #1
 800a53e:	f7fd fc10 	bl	8007d62 <osDelay>
 800a542:	e7fb      	b.n	800a53c <StartDefaultTask+0xc>

0800a544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08e      	sub	sp, #56	; 0x38
 800a548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	605a      	str	r2, [r3, #4]
 800a554:	609a      	str	r2, [r3, #8]
 800a556:	60da      	str	r2, [r3, #12]
 800a558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a55a:	2300      	movs	r3, #0
 800a55c:	623b      	str	r3, [r7, #32]
 800a55e:	4b7a      	ldr	r3, [pc, #488]	; (800a748 <MX_GPIO_Init+0x204>)
 800a560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a562:	4a79      	ldr	r2, [pc, #484]	; (800a748 <MX_GPIO_Init+0x204>)
 800a564:	f043 0304 	orr.w	r3, r3, #4
 800a568:	6313      	str	r3, [r2, #48]	; 0x30
 800a56a:	4b77      	ldr	r3, [pc, #476]	; (800a748 <MX_GPIO_Init+0x204>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	623b      	str	r3, [r7, #32]
 800a574:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a576:	2300      	movs	r3, #0
 800a578:	61fb      	str	r3, [r7, #28]
 800a57a:	4b73      	ldr	r3, [pc, #460]	; (800a748 <MX_GPIO_Init+0x204>)
 800a57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57e:	4a72      	ldr	r2, [pc, #456]	; (800a748 <MX_GPIO_Init+0x204>)
 800a580:	f043 0320 	orr.w	r3, r3, #32
 800a584:	6313      	str	r3, [r2, #48]	; 0x30
 800a586:	4b70      	ldr	r3, [pc, #448]	; (800a748 <MX_GPIO_Init+0x204>)
 800a588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a592:	2300      	movs	r3, #0
 800a594:	61bb      	str	r3, [r7, #24]
 800a596:	4b6c      	ldr	r3, [pc, #432]	; (800a748 <MX_GPIO_Init+0x204>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	4a6b      	ldr	r2, [pc, #428]	; (800a748 <MX_GPIO_Init+0x204>)
 800a59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a2:	4b69      	ldr	r3, [pc, #420]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5aa:	61bb      	str	r3, [r7, #24]
 800a5ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	4b65      	ldr	r3, [pc, #404]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	4a64      	ldr	r2, [pc, #400]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5b8:	f043 0301 	orr.w	r3, r3, #1
 800a5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5be:	4b62      	ldr	r3, [pc, #392]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	613b      	str	r3, [r7, #16]
 800a5ce:	4b5e      	ldr	r3, [pc, #376]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4a5d      	ldr	r2, [pc, #372]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5d4:	f043 0302 	orr.w	r3, r3, #2
 800a5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5da:	4b5b      	ldr	r3, [pc, #364]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	613b      	str	r3, [r7, #16]
 800a5e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	4b57      	ldr	r3, [pc, #348]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	4a56      	ldr	r2, [pc, #344]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5f6:	4b54      	ldr	r3, [pc, #336]	; (800a748 <MX_GPIO_Init+0x204>)
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
 800a606:	4b50      	ldr	r3, [pc, #320]	; (800a748 <MX_GPIO_Init+0x204>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	4a4f      	ldr	r2, [pc, #316]	; (800a748 <MX_GPIO_Init+0x204>)
 800a60c:	f043 0310 	orr.w	r3, r3, #16
 800a610:	6313      	str	r3, [r2, #48]	; 0x30
 800a612:	4b4d      	ldr	r3, [pc, #308]	; (800a748 <MX_GPIO_Init+0x204>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	60bb      	str	r3, [r7, #8]
 800a61c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a61e:	2300      	movs	r3, #0
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	4b49      	ldr	r3, [pc, #292]	; (800a748 <MX_GPIO_Init+0x204>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	4a48      	ldr	r2, [pc, #288]	; (800a748 <MX_GPIO_Init+0x204>)
 800a628:	f043 0308 	orr.w	r3, r3, #8
 800a62c:	6313      	str	r3, [r2, #48]	; 0x30
 800a62e:	4b46      	ldr	r3, [pc, #280]	; (800a748 <MX_GPIO_Init+0x204>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	f003 0308 	and.w	r3, r3, #8
 800a636:	607b      	str	r3, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800a63a:	2200      	movs	r2, #0
 800a63c:	2116      	movs	r1, #22
 800a63e:	4843      	ldr	r0, [pc, #268]	; (800a74c <MX_GPIO_Init+0x208>)
 800a640:	f7f6 fc56 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800a644:	2200      	movs	r2, #0
 800a646:	2180      	movs	r1, #128	; 0x80
 800a648:	4841      	ldr	r0, [pc, #260]	; (800a750 <MX_GPIO_Init+0x20c>)
 800a64a:	f7f6 fc51 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800a64e:	2200      	movs	r2, #0
 800a650:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a654:	483f      	ldr	r0, [pc, #252]	; (800a754 <MX_GPIO_Init+0x210>)
 800a656:	f7f6 fc4b 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800a65a:	2200      	movs	r2, #0
 800a65c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800a660:	483d      	ldr	r0, [pc, #244]	; (800a758 <MX_GPIO_Init+0x214>)
 800a662:	f7f6 fc45 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800a666:	2316      	movs	r3, #22
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a66a:	2301      	movs	r3, #1
 800a66c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a672:	2300      	movs	r3, #0
 800a674:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a67a:	4619      	mov	r1, r3
 800a67c:	4833      	ldr	r0, [pc, #204]	; (800a74c <MX_GPIO_Init+0x208>)
 800a67e:	f7f6 fa8b 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800a682:	f248 0307 	movw	r3, #32775	; 0x8007
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a688:	4b34      	ldr	r3, [pc, #208]	; (800a75c <MX_GPIO_Init+0x218>)
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a694:	4619      	mov	r1, r3
 800a696:	482e      	ldr	r0, [pc, #184]	; (800a750 <MX_GPIO_Init+0x20c>)
 800a698:	f7f6 fa7e 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800a69c:	2380      	movs	r3, #128	; 0x80
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800a6ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4827      	ldr	r0, [pc, #156]	; (800a750 <MX_GPIO_Init+0x20c>)
 800a6b4:	f7f6 fa70 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800a6b8:	2320      	movs	r3, #32
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a6bc:	4b27      	ldr	r3, [pc, #156]	; (800a75c <MX_GPIO_Init+0x218>)
 800a6be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800a6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4820      	ldr	r0, [pc, #128]	; (800a74c <MX_GPIO_Init+0x208>)
 800a6cc:	f7f6 fa64 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a6dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	481f      	ldr	r0, [pc, #124]	; (800a760 <MX_GPIO_Init+0x21c>)
 800a6e4:	f7f6 fa58 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800a6e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800a6f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4815      	ldr	r0, [pc, #84]	; (800a754 <MX_GPIO_Init+0x210>)
 800a6fe:	f7f6 fa4b 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800a702:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a708:	2301      	movs	r3, #1
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a710:	2300      	movs	r3, #0
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a718:	4619      	mov	r1, r3
 800a71a:	480e      	ldr	r0, [pc, #56]	; (800a754 <MX_GPIO_Init+0x210>)
 800a71c:	f7f6 fa3c 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800a720:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a726:	2301      	movs	r3, #1
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a72e:	2300      	movs	r3, #0
 800a730:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a736:	4619      	mov	r1, r3
 800a738:	4807      	ldr	r0, [pc, #28]	; (800a758 <MX_GPIO_Init+0x214>)
 800a73a:	f7f6 fa2d 	bl	8000b98 <HAL_GPIO_Init>

}
 800a73e:	bf00      	nop
 800a740:	3738      	adds	r7, #56	; 0x38
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40023800 	.word	0x40023800
 800a74c:	40020800 	.word	0x40020800
 800a750:	40020000 	.word	0x40020000
 800a754:	40020c00 	.word	0x40020c00
 800a758:	40021800 	.word	0x40021800
 800a75c:	10120000 	.word	0x10120000
 800a760:	40020400 	.word	0x40020400

0800a764 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800a768:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a76a:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <MX_I2C3_Init+0x78>)
 800a76c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800a76e:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a770:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <MX_I2C3_Init+0x7c>)
 800a772:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a774:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a776:	2200      	movs	r2, #0
 800a778:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800a77a:	4b17      	ldr	r3, [pc, #92]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a780:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a786:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a788:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a790:	2200      	movs	r2, #0
 800a792:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a794:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a796:	2200      	movs	r2, #0
 800a798:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a79a:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a7a0:	480d      	ldr	r0, [pc, #52]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a7a2:	f7f8 f843 	bl	800282c <HAL_I2C_Init>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800a7ac:	f000 fad8 	bl	800ad60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4809      	ldr	r0, [pc, #36]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a7b4:	f7f8 f96e 	bl	8002a94 <HAL_I2CEx_ConfigAnalogFilter>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800a7be:	f000 facf 	bl	800ad60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4804      	ldr	r0, [pc, #16]	; (800a7d8 <MX_I2C3_Init+0x74>)
 800a7c6:	f7f8 f9a1 	bl	8002b0c <HAL_I2CEx_ConfigDigitalFilter>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800a7d0:	f000 fac6 	bl	800ad60 <Error_Handler>
  }

}
 800a7d4:	bf00      	nop
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200084dc 	.word	0x200084dc
 800a7dc:	40005c00 	.word	0x40005c00
 800a7e0:	000186a0 	.word	0x000186a0

0800a7e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08a      	sub	sp, #40	; 0x28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7ec:	f107 0314 	add.w	r3, r7, #20
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	605a      	str	r2, [r3, #4]
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	60da      	str	r2, [r3, #12]
 800a7fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a29      	ldr	r2, [pc, #164]	; (800a8a8 <HAL_I2C_MspInit+0xc4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d14b      	bne.n	800a89e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a806:	2300      	movs	r3, #0
 800a808:	613b      	str	r3, [r7, #16]
 800a80a:	4b28      	ldr	r3, [pc, #160]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	4a27      	ldr	r2, [pc, #156]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a810:	f043 0304 	orr.w	r3, r3, #4
 800a814:	6313      	str	r3, [r2, #48]	; 0x30
 800a816:	4b25      	ldr	r3, [pc, #148]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
 800a826:	4b21      	ldr	r3, [pc, #132]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	4a20      	ldr	r2, [pc, #128]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	6313      	str	r3, [r2, #48]	; 0x30
 800a832:	4b1e      	ldr	r3, [pc, #120]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800a83e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a844:	2312      	movs	r3, #18
 800a846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a848:	2301      	movs	r3, #1
 800a84a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a84c:	2300      	movs	r3, #0
 800a84e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a850:	2304      	movs	r3, #4
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800a854:	f107 0314 	add.w	r3, r7, #20
 800a858:	4619      	mov	r1, r3
 800a85a:	4815      	ldr	r0, [pc, #84]	; (800a8b0 <HAL_I2C_MspInit+0xcc>)
 800a85c:	f7f6 f99c 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800a860:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a866:	2312      	movs	r3, #18
 800a868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a86a:	2301      	movs	r3, #1
 800a86c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a86e:	2300      	movs	r3, #0
 800a870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a872:	2304      	movs	r3, #4
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800a876:	f107 0314 	add.w	r3, r7, #20
 800a87a:	4619      	mov	r1, r3
 800a87c:	480d      	ldr	r0, [pc, #52]	; (800a8b4 <HAL_I2C_MspInit+0xd0>)
 800a87e:	f7f6 f98b 	bl	8000b98 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a882:	2300      	movs	r3, #0
 800a884:	60bb      	str	r3, [r7, #8]
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	4a08      	ldr	r2, [pc, #32]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a88c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a890:	6413      	str	r3, [r2, #64]	; 0x40
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <HAL_I2C_MspInit+0xc8>)
 800a894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a89a:	60bb      	str	r3, [r7, #8]
 800a89c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800a89e:	bf00      	nop
 800a8a0:	3728      	adds	r7, #40	; 0x28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40005c00 	.word	0x40005c00
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	40020800 	.word	0x40020800
 800a8b4:	40020000 	.word	0x40020000

0800a8b8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	2234      	movs	r2, #52	; 0x34
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f001 f86d 	bl	800b9a4 <memset>

  hltdc.Instance = LTDC;
 800a8ca:	4b39      	ldr	r3, [pc, #228]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8cc:	4a39      	ldr	r2, [pc, #228]	; (800a9b4 <MX_LTDC_Init+0xfc>)
 800a8ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a8d0:	4b37      	ldr	r3, [pc, #220]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800a8d6:	4b36      	ldr	r3, [pc, #216]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800a8dc:	4b34      	ldr	r3, [pc, #208]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a8e2:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800a8e8:	4b31      	ldr	r3, [pc, #196]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8ea:	2209      	movs	r2, #9
 800a8ec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800a8ee:	4b30      	ldr	r3, [pc, #192]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800a8f4:	4b2e      	ldr	r3, [pc, #184]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8f6:	221d      	movs	r2, #29
 800a8f8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800a900:	4b2b      	ldr	r3, [pc, #172]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a902:	f240 120d 	movw	r2, #269	; 0x10d
 800a906:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800a908:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a90a:	f240 1243 	movw	r2, #323	; 0x143
 800a90e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800a910:	4b27      	ldr	r3, [pc, #156]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a912:	f240 1217 	movw	r2, #279	; 0x117
 800a916:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800a918:	4b25      	ldr	r3, [pc, #148]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a91a:	f240 1247 	movw	r2, #327	; 0x147
 800a91e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800a920:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800a928:	4b21      	ldr	r3, [pc, #132]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800a930:	4b1f      	ldr	r3, [pc, #124]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800a938:	481d      	ldr	r0, [pc, #116]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a93a:	f7f8 f927 	bl	8002b8c <HAL_LTDC_Init>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800a944:	f000 fa0c 	bl	800ad60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800a94c:	23f0      	movs	r3, #240	; 0xf0
 800a94e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800a954:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a958:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a95a:	2302      	movs	r3, #2
 800a95c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800a95e:	23ff      	movs	r3, #255	; 0xff
 800a960:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a966:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a96a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a96c:	2307      	movs	r3, #7
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800a970:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800a976:	23f0      	movs	r3, #240	; 0xf0
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800a97a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a97e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800a992:	1d3b      	adds	r3, r7, #4
 800a994:	2200      	movs	r2, #0
 800a996:	4619      	mov	r1, r3
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <MX_LTDC_Init+0xf8>)
 800a99a:	f7f8 fa89 	bl	8002eb0 <HAL_LTDC_ConfigLayer>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800a9a4:	f000 f9dc 	bl	800ad60 <Error_Handler>
  }

}
 800a9a8:	bf00      	nop
 800a9aa:	3738      	adds	r7, #56	; 0x38
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20008530 	.word	0x20008530
 800a9b4:	40016800 	.word	0x40016800

0800a9b8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08e      	sub	sp, #56	; 0x38
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	605a      	str	r2, [r3, #4]
 800a9ca:	609a      	str	r2, [r3, #8]
 800a9cc:	60da      	str	r2, [r3, #12]
 800a9ce:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a7b      	ldr	r2, [pc, #492]	; (800abc4 <HAL_LTDC_MspInit+0x20c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	f040 80f0 	bne.w	800abbc <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800a9dc:	2300      	movs	r3, #0
 800a9de:	623b      	str	r3, [r7, #32]
 800a9e0:	4b79      	ldr	r3, [pc, #484]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800a9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e4:	4a78      	ldr	r2, [pc, #480]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800a9e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a9ea:	6453      	str	r3, [r2, #68]	; 0x44
 800a9ec:	4b76      	ldr	r3, [pc, #472]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9f4:	623b      	str	r3, [r7, #32]
 800a9f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	4b72      	ldr	r3, [pc, #456]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	4a71      	ldr	r2, [pc, #452]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa02:	f043 0320 	orr.w	r3, r3, #32
 800aa06:	6313      	str	r3, [r2, #48]	; 0x30
 800aa08:	4b6f      	ldr	r3, [pc, #444]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	f003 0320 	and.w	r3, r3, #32
 800aa10:	61fb      	str	r3, [r7, #28]
 800aa12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa14:	2300      	movs	r3, #0
 800aa16:	61bb      	str	r3, [r7, #24]
 800aa18:	4b6b      	ldr	r3, [pc, #428]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1c:	4a6a      	ldr	r2, [pc, #424]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	6313      	str	r3, [r2, #48]	; 0x30
 800aa24:	4b68      	ldr	r3, [pc, #416]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	4b64      	ldr	r3, [pc, #400]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa38:	4a63      	ldr	r2, [pc, #396]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa3a:	f043 0302 	orr.w	r3, r3, #2
 800aa3e:	6313      	str	r3, [r2, #48]	; 0x30
 800aa40:	4b61      	ldr	r3, [pc, #388]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	613b      	str	r3, [r7, #16]
 800aa50:	4b5d      	ldr	r3, [pc, #372]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	4a5c      	ldr	r2, [pc, #368]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	6313      	str	r3, [r2, #48]	; 0x30
 800aa5c:	4b5a      	ldr	r3, [pc, #360]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	4b56      	ldr	r3, [pc, #344]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa70:	4a55      	ldr	r2, [pc, #340]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa72:	f043 0304 	orr.w	r3, r3, #4
 800aa76:	6313      	str	r3, [r2, #48]	; 0x30
 800aa78:	4b53      	ldr	r3, [pc, #332]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa84:	2300      	movs	r3, #0
 800aa86:	60bb      	str	r3, [r7, #8]
 800aa88:	4b4f      	ldr	r3, [pc, #316]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	4a4e      	ldr	r2, [pc, #312]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa8e:	f043 0308 	orr.w	r3, r3, #8
 800aa92:	6313      	str	r3, [r2, #48]	; 0x30
 800aa94:	4b4c      	ldr	r3, [pc, #304]	; (800abc8 <HAL_LTDC_MspInit+0x210>)
 800aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa98:	f003 0308 	and.w	r3, r3, #8
 800aa9c:	60bb      	str	r3, [r7, #8]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800aaa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaae:	2300      	movs	r3, #0
 800aab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aab2:	230e      	movs	r3, #14
 800aab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800aab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaba:	4619      	mov	r1, r3
 800aabc:	4843      	ldr	r0, [pc, #268]	; (800abcc <HAL_LTDC_MspInit+0x214>)
 800aabe:	f7f6 f86b 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800aac2:	f641 0358 	movw	r3, #6232	; 0x1858
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aac8:	2302      	movs	r3, #2
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aad0:	2300      	movs	r3, #0
 800aad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800aad4:	230e      	movs	r3, #14
 800aad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aadc:	4619      	mov	r1, r3
 800aade:	483c      	ldr	r0, [pc, #240]	; (800abd0 <HAL_LTDC_MspInit+0x218>)
 800aae0:	f7f6 f85a 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800aae4:	2303      	movs	r3, #3
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae8:	2302      	movs	r3, #2
 800aaea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800aaf4:	2309      	movs	r3, #9
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aafc:	4619      	mov	r1, r3
 800aafe:	4835      	ldr	r0, [pc, #212]	; (800abd4 <HAL_LTDC_MspInit+0x21c>)
 800ab00:	f7f6 f84a 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800ab04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab12:	2300      	movs	r3, #0
 800ab14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab16:	230e      	movs	r3, #14
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab1e:	4619      	mov	r1, r3
 800ab20:	482c      	ldr	r0, [pc, #176]	; (800abd4 <HAL_LTDC_MspInit+0x21c>)
 800ab22:	f7f6 f839 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800ab26:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab34:	2300      	movs	r3, #0
 800ab36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab38:	230e      	movs	r3, #14
 800ab3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ab3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab40:	4619      	mov	r1, r3
 800ab42:	4825      	ldr	r0, [pc, #148]	; (800abd8 <HAL_LTDC_MspInit+0x220>)
 800ab44:	f7f6 f828 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800ab48:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab56:	2300      	movs	r3, #0
 800ab58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab5a:	230e      	movs	r3, #14
 800ab5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab62:	4619      	mov	r1, r3
 800ab64:	481d      	ldr	r0, [pc, #116]	; (800abdc <HAL_LTDC_MspInit+0x224>)
 800ab66:	f7f6 f817 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800ab6a:	2348      	movs	r3, #72	; 0x48
 800ab6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab6e:	2302      	movs	r3, #2
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab72:	2300      	movs	r3, #0
 800ab74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab76:	2300      	movs	r3, #0
 800ab78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ab7a:	230e      	movs	r3, #14
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab82:	4619      	mov	r1, r3
 800ab84:	4816      	ldr	r0, [pc, #88]	; (800abe0 <HAL_LTDC_MspInit+0x228>)
 800ab86:	f7f6 f807 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800ab8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab90:	2302      	movs	r3, #2
 800ab92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800ab9c:	2309      	movs	r3, #9
 800ab9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba4:	4619      	mov	r1, r3
 800aba6:	480c      	ldr	r0, [pc, #48]	; (800abd8 <HAL_LTDC_MspInit+0x220>)
 800aba8:	f7f5 fff6 	bl	8000b98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800abac:	2200      	movs	r2, #0
 800abae:	2105      	movs	r1, #5
 800abb0:	2058      	movs	r0, #88	; 0x58
 800abb2:	f7f5 fdbd 	bl	8000730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800abb6:	2058      	movs	r0, #88	; 0x58
 800abb8:	f7f5 fdd6 	bl	8000768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800abbc:	bf00      	nop
 800abbe:	3738      	adds	r7, #56	; 0x38
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	40016800 	.word	0x40016800
 800abc8:	40023800 	.word	0x40023800
 800abcc:	40021400 	.word	0x40021400
 800abd0:	40020000 	.word	0x40020000
 800abd4:	40020400 	.word	0x40020400
 800abd8:	40021800 	.word	0x40021800
 800abdc:	40020800 	.word	0x40020800
 800abe0:	40020c00 	.word	0x40020c00

0800abe4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800abe8:	f7f5 fc84 	bl	80004f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800abec:	f000 f81c 	bl	800ac28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800abf0:	f7ff fca8 	bl	800a544 <MX_GPIO_Init>
	MX_CRC_Init();
 800abf4:	f7ff fad0 	bl	800a198 <MX_CRC_Init>
	MX_DMA2D_Init();
 800abf8:	f7ff fb04 	bl	800a204 <MX_DMA2D_Init>
	MX_FMC_Init();
 800abfc:	f7ff fb5c 	bl	800a2b8 <MX_FMC_Init>
	MX_I2C3_Init();
 800ac00:	f7ff fdb0 	bl	800a764 <MX_I2C3_Init>
	MX_LTDC_Init();
 800ac04:	f7ff fe58 	bl	800a8b8 <MX_LTDC_Init>
	MX_SPI5_Init();
 800ac08:	f000 f8b2 	bl	800ad70 <MX_SPI5_Init>
	MX_TIM1_Init();
 800ac0c:	f000 fa62 	bl	800b0d4 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800ac10:	f000 fada 	bl	800b1c8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim1);
 800ac14:	4803      	ldr	r0, [pc, #12]	; (800ac24 <main+0x40>)
 800ac16:	f7f9 fa14 	bl	8004042 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800ac1a:	f7ff fc6d 	bl	800a4f8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800ac1e:	f7fd f84d 	bl	8007cbc <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800ac22:	e7fe      	b.n	800ac22 <main+0x3e>
 800ac24:	20008674 	.word	0x20008674

0800ac28 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b0a0      	sub	sp, #128	; 0x80
 800ac2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800ac2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac32:	2230      	movs	r2, #48	; 0x30
 800ac34:	2100      	movs	r1, #0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 feb4 	bl	800b9a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800ac3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	609a      	str	r2, [r3, #8]
 800ac48:	60da      	str	r2, [r3, #12]
 800ac4a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800ac4c:	f107 030c 	add.w	r3, r7, #12
 800ac50:	2230      	movs	r2, #48	; 0x30
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fea5 	bl	800b9a4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <SystemClock_Config+0x100>)
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	4a31      	ldr	r2, [pc, #196]	; (800ad28 <SystemClock_Config+0x100>)
 800ac64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac68:	6413      	str	r3, [r2, #64]	; 0x40
 800ac6a:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <SystemClock_Config+0x100>)
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac72:	60bb      	str	r3, [r7, #8]
 800ac74:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ac76:	2300      	movs	r3, #0
 800ac78:	607b      	str	r3, [r7, #4]
 800ac7a:	4b2c      	ldr	r3, [pc, #176]	; (800ad2c <SystemClock_Config+0x104>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ac82:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <SystemClock_Config+0x104>)
 800ac84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	4b28      	ldr	r3, [pc, #160]	; (800ad2c <SystemClock_Config+0x104>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac92:	607b      	str	r3, [r7, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ac9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac9e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aca0:	2302      	movs	r3, #2
 800aca2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aca8:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800acaa:	2304      	movs	r3, #4
 800acac:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 72;
 800acae:	2348      	movs	r3, #72	; 0x48
 800acb0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800acb2:	2302      	movs	r3, #2
 800acb4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800acb6:	2303      	movs	r3, #3
 800acb8:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800acba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7f8 facc 	bl	800325c <HAL_RCC_OscConfig>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <SystemClock_Config+0xa6>
		Error_Handler();
 800acca:	f000 f849 	bl	800ad60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800acce:	230f      	movs	r3, #15
 800acd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800acd2:	2302      	movs	r3, #2
 800acd4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800acd6:	2300      	movs	r3, #0
 800acd8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800acda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acde:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ace0:	2300      	movs	r3, #0
 800ace2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800ace4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ace8:	2102      	movs	r1, #2
 800acea:	4618      	mov	r0, r3
 800acec:	f7f8 fcf4 	bl	80036d8 <HAL_RCC_ClockConfig>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <SystemClock_Config+0xd2>
		Error_Handler();
 800acf6:	f000 f833 	bl	800ad60 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800acfa:	2308      	movs	r3, #8
 800acfc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800acfe:	2332      	movs	r3, #50	; 0x32
 800ad00:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800ad02:	2302      	movs	r3, #2
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800ad06:	2300      	movs	r3, #0
 800ad08:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f8 ff30 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <SystemClock_Config+0xf6>
		Error_Handler();
 800ad1a:	f000 f821 	bl	800ad60 <Error_Handler>
	}
}
 800ad1e:	bf00      	nop
 800ad20:	3780      	adds	r7, #128	; 0x80
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	40023800 	.word	0x40023800
 800ad2c:	40007000 	.word	0x40007000

0800ad30 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a06      	ldr	r2, [pc, #24]	; (800ad58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d101      	bne.n	800ad46 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800ad42:	f7f5 fbf9 	bl	8000538 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 800ad46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ad4a:	4804      	ldr	r0, [pc, #16]	; (800ad5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800ad4c:	f7f6 f8e9 	bl	8000f22 <HAL_GPIO_TogglePin>
	/* USER CODE END Callback 1 */
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	40001000 	.word	0x40001000
 800ad5c:	40021800 	.word	0x40021800

0800ad60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800ad64:	bf00      	nop
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <MX_SPI5_Init+0x68>)
 800ad78:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800ad7a:	4b16      	ldr	r3, [pc, #88]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ad80:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ad94:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <MX_SPI5_Init+0x64>)
 800ad9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ada2:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <MX_SPI5_Init+0x64>)
 800ada4:	2218      	movs	r2, #24
 800ada6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <MX_SPI5_Init+0x64>)
 800adaa:	2200      	movs	r2, #0
 800adac:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <MX_SPI5_Init+0x64>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <MX_SPI5_Init+0x64>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800adba:	4b06      	ldr	r3, [pc, #24]	; (800add4 <MX_SPI5_Init+0x64>)
 800adbc:	220a      	movs	r2, #10
 800adbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800adc0:	4804      	ldr	r0, [pc, #16]	; (800add4 <MX_SPI5_Init+0x64>)
 800adc2:	f7f9 f8af 	bl	8003f24 <HAL_SPI_Init>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800adcc:	f7ff ffc8 	bl	800ad60 <Error_Handler>
  }

}
 800add0:	bf00      	nop
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200085d8 	.word	0x200085d8
 800add8:	40015000 	.word	0x40015000

0800addc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	; 0x28
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade4:	f107 0314 	add.w	r3, r7, #20
 800ade8:	2200      	movs	r2, #0
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	605a      	str	r2, [r3, #4]
 800adee:	609a      	str	r2, [r3, #8]
 800adf0:	60da      	str	r2, [r3, #12]
 800adf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a19      	ldr	r2, [pc, #100]	; (800ae60 <HAL_SPI_MspInit+0x84>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d12c      	bne.n	800ae58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800adfe:	2300      	movs	r3, #0
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	4b18      	ldr	r3, [pc, #96]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae06:	4a17      	ldr	r2, [pc, #92]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae0c:	6453      	str	r3, [r2, #68]	; 0x44
 800ae0e:	4b15      	ldr	r3, [pc, #84]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	4a10      	ldr	r2, [pc, #64]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae24:	f043 0320 	orr.w	r3, r3, #32
 800ae28:	6313      	str	r3, [r2, #48]	; 0x30
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	; (800ae64 <HAL_SPI_MspInit+0x88>)
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800ae36:	f44f 7360 	mov.w	r3, #896	; 0x380
 800ae3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae44:	2300      	movs	r3, #0
 800ae46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ae48:	2305      	movs	r3, #5
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ae4c:	f107 0314 	add.w	r3, r7, #20
 800ae50:	4619      	mov	r1, r3
 800ae52:	4805      	ldr	r0, [pc, #20]	; (800ae68 <HAL_SPI_MspInit+0x8c>)
 800ae54:	f7f5 fea0 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3728      	adds	r7, #40	; 0x28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	40015000 	.word	0x40015000
 800ae64:	40023800 	.word	0x40023800
 800ae68:	40021400 	.word	0x40021400

0800ae6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae72:	2300      	movs	r3, #0
 800ae74:	607b      	str	r3, [r7, #4]
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <HAL_MspInit+0x54>)
 800ae78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7a:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <HAL_MspInit+0x54>)
 800ae7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae80:	6453      	str	r3, [r2, #68]	; 0x44
 800ae82:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <HAL_MspInit+0x54>)
 800ae84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae8e:	2300      	movs	r3, #0
 800ae90:	603b      	str	r3, [r7, #0]
 800ae92:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <HAL_MspInit+0x54>)
 800ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae96:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <HAL_MspInit+0x54>)
 800ae98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae9e:	4b08      	ldr	r3, [pc, #32]	; (800aec0 <HAL_MspInit+0x54>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	210f      	movs	r1, #15
 800aeae:	f06f 0001 	mvn.w	r0, #1
 800aeb2:	f7f5 fc3d 	bl	8000730 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	40023800 	.word	0x40023800

0800aec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b08c      	sub	sp, #48	; 0x30
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800aed4:	2200      	movs	r2, #0
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	2036      	movs	r0, #54	; 0x36
 800aeda:	f7f5 fc29 	bl	8000730 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800aede:	2036      	movs	r0, #54	; 0x36
 800aee0:	f7f5 fc42 	bl	8000768 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	4b1f      	ldr	r3, [pc, #124]	; (800af68 <HAL_InitTick+0xa4>)
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	4a1e      	ldr	r2, [pc, #120]	; (800af68 <HAL_InitTick+0xa4>)
 800aeee:	f043 0310 	orr.w	r3, r3, #16
 800aef2:	6413      	str	r3, [r2, #64]	; 0x40
 800aef4:	4b1c      	ldr	r3, [pc, #112]	; (800af68 <HAL_InitTick+0xa4>)
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800af00:	f107 0210 	add.w	r2, r7, #16
 800af04:	f107 0314 	add.w	r3, r7, #20
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f8 fe00 	bl	8003b10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800af10:	f7f8 fdd6 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 800af14:	4603      	mov	r3, r0
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	4a13      	ldr	r2, [pc, #76]	; (800af6c <HAL_InitTick+0xa8>)
 800af1e:	fba2 2303 	umull	r2, r3, r2, r3
 800af22:	0c9b      	lsrs	r3, r3, #18
 800af24:	3b01      	subs	r3, #1
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800af28:	4b11      	ldr	r3, [pc, #68]	; (800af70 <HAL_InitTick+0xac>)
 800af2a:	4a12      	ldr	r2, [pc, #72]	; (800af74 <HAL_InitTick+0xb0>)
 800af2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800af2e:	4b10      	ldr	r3, [pc, #64]	; (800af70 <HAL_InitTick+0xac>)
 800af30:	f240 32e7 	movw	r2, #999	; 0x3e7
 800af34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800af36:	4a0e      	ldr	r2, [pc, #56]	; (800af70 <HAL_InitTick+0xac>)
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800af3c:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <HAL_InitTick+0xac>)
 800af3e:	2200      	movs	r2, #0
 800af40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af42:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <HAL_InitTick+0xac>)
 800af44:	2200      	movs	r2, #0
 800af46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800af48:	4809      	ldr	r0, [pc, #36]	; (800af70 <HAL_InitTick+0xac>)
 800af4a:	f7f9 f84f 	bl	8003fec <HAL_TIM_Base_Init>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d104      	bne.n	800af5e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800af54:	4806      	ldr	r0, [pc, #24]	; (800af70 <HAL_InitTick+0xac>)
 800af56:	f7f9 f874 	bl	8004042 <HAL_TIM_Base_Start_IT>
 800af5a:	4603      	mov	r3, r0
 800af5c:	e000      	b.n	800af60 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
}
 800af60:	4618      	mov	r0, r3
 800af62:	3730      	adds	r7, #48	; 0x30
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	40023800 	.word	0x40023800
 800af6c:	431bde83 	.word	0x431bde83
 800af70:	20008630 	.word	0x20008630
 800af74:	40001000 	.word	0x40001000

0800af78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af7c:	bf00      	nop
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af86:	b480      	push	{r7}
 800af88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af8a:	e7fe      	b.n	800af8a <HardFault_Handler+0x4>

0800af8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af90:	e7fe      	b.n	800af90 <MemManage_Handler+0x4>

0800af92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af92:	b480      	push	{r7}
 800af94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af96:	e7fe      	b.n	800af96 <BusFault_Handler+0x4>

0800af98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af9c:	e7fe      	b.n	800af9c <UsageFault_Handler+0x4>

0800af9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af9e:	b480      	push	{r7}
 800afa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afa2:	bf00      	nop
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800afb0:	4802      	ldr	r0, [pc, #8]	; (800afbc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800afb2:	f7f9 f86a 	bl	800408a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	20008674 	.word	0x20008674

0800afc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800afc4:	4802      	ldr	r0, [pc, #8]	; (800afd0 <TIM6_DAC_IRQHandler+0x10>)
 800afc6:	f7f9 f860 	bl	800408a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800afca:	bf00      	nop
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20008630 	.word	0x20008630

0800afd4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800afd8:	4802      	ldr	r0, [pc, #8]	; (800afe4 <OTG_HS_IRQHandler+0x10>)
 800afda:	f7f6 fa43 	bl	8001464 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800afde:	bf00      	nop
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20008ad0 	.word	0x20008ad0

0800afe8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800afec:	4802      	ldr	r0, [pc, #8]	; (800aff8 <LTDC_IRQHandler+0x10>)
 800afee:	f7f7 fe9d 	bl	8002d2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800aff2:	bf00      	nop
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20008530 	.word	0x20008530

0800affc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b000:	4802      	ldr	r0, [pc, #8]	; (800b00c <DMA2D_IRQHandler+0x10>)
 800b002:	f7f5 fc27 	bl	8000854 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b006:	bf00      	nop
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20008208 	.word	0x20008208

0800b010 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b018:	4b11      	ldr	r3, [pc, #68]	; (800b060 <_sbrk+0x50>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <_sbrk+0x16>
		heap_end = &end;
 800b020:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <_sbrk+0x50>)
 800b022:	4a10      	ldr	r2, [pc, #64]	; (800b064 <_sbrk+0x54>)
 800b024:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b026:	4b0e      	ldr	r3, [pc, #56]	; (800b060 <_sbrk+0x50>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b02c:	4b0c      	ldr	r3, [pc, #48]	; (800b060 <_sbrk+0x50>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4413      	add	r3, r2
 800b034:	466a      	mov	r2, sp
 800b036:	4293      	cmp	r3, r2
 800b038:	d907      	bls.n	800b04a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b03a:	f000 fc6b 	bl	800b914 <__errno>
 800b03e:	4603      	mov	r3, r0
 800b040:	220c      	movs	r2, #12
 800b042:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800b044:	f04f 33ff 	mov.w	r3, #4294967295
 800b048:	e006      	b.n	800b058 <_sbrk+0x48>
	}

	heap_end += incr;
 800b04a:	4b05      	ldr	r3, [pc, #20]	; (800b060 <_sbrk+0x50>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4413      	add	r3, r2
 800b052:	4a03      	ldr	r2, [pc, #12]	; (800b060 <_sbrk+0x50>)
 800b054:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b056:	68fb      	ldr	r3, [r7, #12]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20008670 	.word	0x20008670
 800b064:	20008da8 	.word	0x20008da8

0800b068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b068:	b480      	push	{r7}
 800b06a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <SystemInit+0x60>)
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b072:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <SystemInit+0x60>)
 800b074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b07c:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <SystemInit+0x64>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a12      	ldr	r2, [pc, #72]	; (800b0cc <SystemInit+0x64>)
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b088:	4b10      	ldr	r3, [pc, #64]	; (800b0cc <SystemInit+0x64>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <SystemInit+0x64>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a0e      	ldr	r2, [pc, #56]	; (800b0cc <SystemInit+0x64>)
 800b094:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b09c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b09e:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <SystemInit+0x64>)
 800b0a0:	4a0b      	ldr	r2, [pc, #44]	; (800b0d0 <SystemInit+0x68>)
 800b0a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <SystemInit+0x64>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a08      	ldr	r2, [pc, #32]	; (800b0cc <SystemInit+0x64>)
 800b0aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b0b0:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <SystemInit+0x64>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b0b6:	4b04      	ldr	r3, [pc, #16]	; (800b0c8 <SystemInit+0x60>)
 800b0b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b0bc:	609a      	str	r2, [r3, #8]
#endif
}
 800b0be:	bf00      	nop
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	e000ed00 	.word	0xe000ed00
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	24003010 	.word	0x24003010

0800b0d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b0da:	f107 0308 	add.w	r3, r7, #8
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	605a      	str	r2, [r3, #4]
 800b0e4:	609a      	str	r2, [r3, #8]
 800b0e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0e8:	463b      	mov	r3, r7
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800b0f0:	4b1f      	ldr	r3, [pc, #124]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b0f2:	4a20      	ldr	r2, [pc, #128]	; (800b174 <MX_TIM1_Init+0xa0>)
 800b0f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 800b0f6:	4b1e      	ldr	r3, [pc, #120]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b0f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0fe:	4b1c      	ldr	r3, [pc, #112]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b100:	2200      	movs	r2, #0
 800b102:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800b104:	4b1a      	ldr	r3, [pc, #104]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b10a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b10c:	4b18      	ldr	r3, [pc, #96]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b10e:	2200      	movs	r2, #0
 800b110:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b112:	4b17      	ldr	r3, [pc, #92]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b114:	2200      	movs	r2, #0
 800b116:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b118:	4b15      	ldr	r3, [pc, #84]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b11e:	4814      	ldr	r0, [pc, #80]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b120:	f7f8 ff64 	bl	8003fec <HAL_TIM_Base_Init>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800b12a:	f7ff fe19 	bl	800ad60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b12e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	480d      	ldr	r0, [pc, #52]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b13c:	f7f9 f8ad 	bl	800429a <HAL_TIM_ConfigClockSource>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800b146:	f7ff fe0b 	bl	800ad60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b14a:	2320      	movs	r3, #32
 800b14c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b14e:	2300      	movs	r3, #0
 800b150:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b152:	463b      	mov	r3, r7
 800b154:	4619      	mov	r1, r3
 800b156:	4806      	ldr	r0, [pc, #24]	; (800b170 <MX_TIM1_Init+0x9c>)
 800b158:	f7f9 fac6 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800b162:	f7ff fdfd 	bl	800ad60 <Error_Handler>
  }

}
 800b166:	bf00      	nop
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20008674 	.word	0x20008674
 800b174:	40010000 	.word	0x40010000

0800b178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a0e      	ldr	r2, [pc, #56]	; (800b1c0 <HAL_TIM_Base_MspInit+0x48>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d115      	bne.n	800b1b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <HAL_TIM_Base_MspInit+0x4c>)
 800b190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b192:	4a0c      	ldr	r2, [pc, #48]	; (800b1c4 <HAL_TIM_Base_MspInit+0x4c>)
 800b194:	f043 0301 	orr.w	r3, r3, #1
 800b198:	6453      	str	r3, [r2, #68]	; 0x44
 800b19a:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <HAL_TIM_Base_MspInit+0x4c>)
 800b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2105      	movs	r1, #5
 800b1aa:	201a      	movs	r0, #26
 800b1ac:	f7f5 fac0 	bl	8000730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800b1b0:	201a      	movs	r0, #26
 800b1b2:	f7f5 fad9 	bl	8000768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	40010000 	.word	0x40010000
 800b1c4:	40023800 	.word	0x40023800

0800b1c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b1cc:	4b11      	ldr	r3, [pc, #68]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1ce:	4a12      	ldr	r2, [pc, #72]	; (800b218 <MX_USART1_UART_Init+0x50>)
 800b1d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b1d2:	4b10      	ldr	r3, [pc, #64]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b1da:	4b0e      	ldr	r3, [pc, #56]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b1e0:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b1ec:	4b09      	ldr	r3, [pc, #36]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1ee:	220c      	movs	r2, #12
 800b1f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1f2:	4b08      	ldr	r3, [pc, #32]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1f8:	4b06      	ldr	r3, [pc, #24]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1fe:	4805      	ldr	r0, [pc, #20]	; (800b214 <MX_USART1_UART_Init+0x4c>)
 800b200:	f7f9 facb 	bl	800479a <HAL_UART_Init>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b20a:	f7ff fda9 	bl	800ad60 <Error_Handler>
  }

}
 800b20e:	bf00      	nop
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	200086b4 	.word	0x200086b4
 800b218:	40011000 	.word	0x40011000

0800b21c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	605a      	str	r2, [r3, #4]
 800b22e:	609a      	str	r2, [r3, #8]
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a19      	ldr	r2, [pc, #100]	; (800b2a0 <HAL_UART_MspInit+0x84>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d12c      	bne.n	800b298 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	4b18      	ldr	r3, [pc, #96]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	4a17      	ldr	r2, [pc, #92]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b248:	f043 0310 	orr.w	r3, r3, #16
 800b24c:	6453      	str	r3, [r2, #68]	; 0x44
 800b24e:	4b15      	ldr	r3, [pc, #84]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b252:	f003 0310 	and.w	r3, r3, #16
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	4a10      	ldr	r2, [pc, #64]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b264:	f043 0301 	orr.w	r3, r3, #1
 800b268:	6313      	str	r3, [r2, #48]	; 0x30
 800b26a:	4b0e      	ldr	r3, [pc, #56]	; (800b2a4 <HAL_UART_MspInit+0x88>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800b276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b27a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b27c:	2302      	movs	r3, #2
 800b27e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b280:	2301      	movs	r3, #1
 800b282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b284:	2303      	movs	r3, #3
 800b286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b288:	2307      	movs	r3, #7
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	4619      	mov	r1, r3
 800b292:	4805      	ldr	r0, [pc, #20]	; (800b2a8 <HAL_UART_MspInit+0x8c>)
 800b294:	f7f5 fc80 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800b298:	bf00      	nop
 800b29a:	3728      	adds	r7, #40	; 0x28
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	40011000 	.word	0x40011000
 800b2a4:	40023800 	.word	0x40023800
 800b2a8:	40020000 	.word	0x40020000

0800b2ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	490e      	ldr	r1, [pc, #56]	; (800b2ec <MX_USB_HOST_Init+0x40>)
 800b2b4:	480e      	ldr	r0, [pc, #56]	; (800b2f0 <MX_USB_HOST_Init+0x44>)
 800b2b6:	f7fb f8b7 	bl	8006428 <USBH_Init>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b2c0:	f7ff fd4e 	bl	800ad60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b2c4:	490b      	ldr	r1, [pc, #44]	; (800b2f4 <MX_USB_HOST_Init+0x48>)
 800b2c6:	480a      	ldr	r0, [pc, #40]	; (800b2f0 <MX_USB_HOST_Init+0x44>)
 800b2c8:	f7fb f949 	bl	800655e <USBH_RegisterClass>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b2d2:	f7ff fd45 	bl	800ad60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b2d6:	4806      	ldr	r0, [pc, #24]	; (800b2f0 <MX_USB_HOST_Init+0x44>)
 800b2d8:	f7fb f9ce 	bl	8006678 <USBH_Start>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b2e2:	f7ff fd3d 	bl	800ad60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b2e6:	bf00      	nop
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800b2f9 	.word	0x0800b2f9
 800b2f0:	200086f4 	.word	0x200086f4
 800b2f4:	20000004 	.word	0x20000004

0800b2f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	460b      	mov	r3, r1
 800b302:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	3b01      	subs	r3, #1
 800b308:	2b04      	cmp	r3, #4
 800b30a:	d819      	bhi.n	800b340 <USBH_UserProcess+0x48>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <USBH_UserProcess+0x1c>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b341 	.word	0x0800b341
 800b318:	0800b331 	.word	0x0800b331
 800b31c:	0800b341 	.word	0x0800b341
 800b320:	0800b339 	.word	0x0800b339
 800b324:	0800b329 	.word	0x0800b329
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b328:	4b09      	ldr	r3, [pc, #36]	; (800b350 <USBH_UserProcess+0x58>)
 800b32a:	2203      	movs	r2, #3
 800b32c:	701a      	strb	r2, [r3, #0]
  break;
 800b32e:	e008      	b.n	800b342 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <USBH_UserProcess+0x58>)
 800b332:	2202      	movs	r2, #2
 800b334:	701a      	strb	r2, [r3, #0]
  break;
 800b336:	e004      	b.n	800b342 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <USBH_UserProcess+0x58>)
 800b33a:	2201      	movs	r2, #1
 800b33c:	701a      	strb	r2, [r3, #0]
  break;
 800b33e:	e000      	b.n	800b342 <USBH_UserProcess+0x4a>

  default:
  break;
 800b340:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20008acc 	.word	0x20008acc

0800b354 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b35c:	f107 0314 	add.w	r3, r7, #20
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	609a      	str	r2, [r3, #8]
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a24      	ldr	r2, [pc, #144]	; (800b404 <HAL_HCD_MspInit+0xb0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d141      	bne.n	800b3fa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b376:	2300      	movs	r3, #0
 800b378:	613b      	str	r3, [r7, #16]
 800b37a:	4b23      	ldr	r3, [pc, #140]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b37e:	4a22      	ldr	r2, [pc, #136]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b380:	f043 0302 	orr.w	r3, r3, #2
 800b384:	6313      	str	r3, [r2, #48]	; 0x30
 800b386:	4b20      	ldr	r3, [pc, #128]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38a:	f003 0302 	and.w	r3, r3, #2
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b392:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b398:	2302      	movs	r3, #2
 800b39a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b3a4:	230c      	movs	r3, #12
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3a8:	f107 0314 	add.w	r3, r7, #20
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4817      	ldr	r0, [pc, #92]	; (800b40c <HAL_HCD_MspInit+0xb8>)
 800b3b0:	f7f5 fbf2 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b3b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b3c2:	f107 0314 	add.w	r3, r7, #20
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4810      	ldr	r0, [pc, #64]	; (800b40c <HAL_HCD_MspInit+0xb8>)
 800b3ca:	f7f5 fbe5 	bl	8000b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	4a0c      	ldr	r2, [pc, #48]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b3d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <HAL_HCD_MspInit+0xb4>)
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2105      	movs	r1, #5
 800b3ee:	204d      	movs	r0, #77	; 0x4d
 800b3f0:	f7f5 f99e 	bl	8000730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b3f4:	204d      	movs	r0, #77	; 0x4d
 800b3f6:	f7f5 f9b7 	bl	8000768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	3728      	adds	r7, #40	; 0x28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	40040000 	.word	0x40040000
 800b408:	40023800 	.word	0x40023800
 800b40c:	40020400 	.word	0x40020400

0800b410 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fb fc7d 	bl	8006d1e <USBH_LL_IncTimer>
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fb fcc2 	bl	8006dc4 <USBH_LL_Connect>
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b456:	4618      	mov	r0, r3
 800b458:	f7fb fce8 	bl	8006e2c <USBH_LL_Disconnect>
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70fb      	strb	r3, [r7, #3]
 800b470:	4613      	mov	r3, r2
 800b472:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fb fd26 	bl	8006ecc <USBH_LL_NotifyURBChange>
#endif
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b496:	4618      	mov	r0, r3
 800b498:	f7fb fc6b 	bl	8006d72 <USBH_LL_PortEnabled>
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fb fc6b 	bl	8006d8e <USBH_LL_PortDisabled>
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d132      	bne.n	800b538 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b4d2:	4a1c      	ldr	r2, [pc, #112]	; (800b544 <USBH_LL_Init+0x84>)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a19      	ldr	r2, [pc, #100]	; (800b544 <USBH_LL_Init+0x84>)
 800b4de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b4e2:	4b18      	ldr	r3, [pc, #96]	; (800b544 <USBH_LL_Init+0x84>)
 800b4e4:	4a18      	ldr	r2, [pc, #96]	; (800b548 <USBH_LL_Init+0x88>)
 800b4e6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b4e8:	4b16      	ldr	r3, [pc, #88]	; (800b544 <USBH_LL_Init+0x84>)
 800b4ea:	220c      	movs	r2, #12
 800b4ec:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b4ee:	4b15      	ldr	r3, [pc, #84]	; (800b544 <USBH_LL_Init+0x84>)
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b4f4:	4b13      	ldr	r3, [pc, #76]	; (800b544 <USBH_LL_Init+0x84>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b4fa:	4b12      	ldr	r3, [pc, #72]	; (800b544 <USBH_LL_Init+0x84>)
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b500:	4b10      	ldr	r3, [pc, #64]	; (800b544 <USBH_LL_Init+0x84>)
 800b502:	2200      	movs	r2, #0
 800b504:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b506:	4b0f      	ldr	r3, [pc, #60]	; (800b544 <USBH_LL_Init+0x84>)
 800b508:	2200      	movs	r2, #0
 800b50a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <USBH_LL_Init+0x84>)
 800b50e:	2200      	movs	r2, #0
 800b510:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b512:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <USBH_LL_Init+0x84>)
 800b514:	2200      	movs	r2, #0
 800b516:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b518:	480a      	ldr	r0, [pc, #40]	; (800b544 <USBH_LL_Init+0x84>)
 800b51a:	f7f5 fd1d 	bl	8000f58 <HAL_HCD_Init>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b524:	f7ff fc1c 	bl	800ad60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b528:	4806      	ldr	r0, [pc, #24]	; (800b544 <USBH_LL_Init+0x84>)
 800b52a:	f7f6 f919 	bl	8001760 <HAL_HCD_GetCurrentFrame>
 800b52e:	4603      	mov	r3, r0
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fb fbe4 	bl	8006d00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20008ad0 	.word	0x20008ad0
 800b548:	40040000 	.word	0x40040000

0800b54c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b562:	4618      	mov	r0, r3
 800b564:	f7f6 f884 	bl	8001670 <HAL_HCD_Start>
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 f95e 	bl	800b830 <USBH_Get_USB_Status>
 800b574:	4603      	mov	r3, r0
 800b576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b578:	7bbb      	ldrb	r3, [r7, #14]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b598:	4618      	mov	r0, r3
 800b59a:	f7f6 f88c 	bl	80016b6 <HAL_HCD_Stop>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f943 	bl	800b830 <USBH_Get_USB_Status>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7f6 f8d6 	bl	800177c <HAL_HCD_GetCurrentSpeed>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d00c      	beq.n	800b5f0 <USBH_LL_GetSpeed+0x38>
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d80d      	bhi.n	800b5f6 <USBH_LL_GetSpeed+0x3e>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <USBH_LL_GetSpeed+0x2c>
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d003      	beq.n	800b5ea <USBH_LL_GetSpeed+0x32>
 800b5e2:	e008      	b.n	800b5f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e8:	e008      	b.n	800b5fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ee:	e005      	b.n	800b5fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f4:	e002      	b.n	800b5fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5fa:	bf00      	nop
  }
  return  speed;
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f6 f867 	bl	80016f0 <HAL_HCD_ResetPort>
 800b622:	4603      	mov	r3, r0
 800b624:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 f901 	bl	800b830 <USBH_Get_USB_Status>
 800b62e:	4603      	mov	r3, r0
 800b630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b632:	7bbb      	ldrb	r3, [r7, #14]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b64e:	78fa      	ldrb	r2, [r7, #3]
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f7f6 f86f 	bl	8001736 <HAL_HCD_HC_GetXferCount>
 800b658:	4603      	mov	r3, r0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b662:	b590      	push	{r4, r7, lr}
 800b664:	b089      	sub	sp, #36	; 0x24
 800b666:	af04      	add	r7, sp, #16
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	4608      	mov	r0, r1
 800b66c:	4611      	mov	r1, r2
 800b66e:	461a      	mov	r2, r3
 800b670:	4603      	mov	r3, r0
 800b672:	70fb      	strb	r3, [r7, #3]
 800b674:	460b      	mov	r3, r1
 800b676:	70bb      	strb	r3, [r7, #2]
 800b678:	4613      	mov	r3, r2
 800b67a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b68a:	787c      	ldrb	r4, [r7, #1]
 800b68c:	78ba      	ldrb	r2, [r7, #2]
 800b68e:	78f9      	ldrb	r1, [r7, #3]
 800b690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b692:	9302      	str	r3, [sp, #8]
 800b694:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	4623      	mov	r3, r4
 800b6a2:	f7f5 fcbb 	bl	800101c <HAL_HCD_HC_Init>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f000 f8bf 	bl	800b830 <USBH_Get_USB_Status>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd90      	pop	{r4, r7, pc}

0800b6c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7f5 fd34 	bl	800114c <HAL_HCD_HC_Halt>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f8a0 	bl	800b830 <USBH_Get_USB_Status>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6fe:	b590      	push	{r4, r7, lr}
 800b700:	b089      	sub	sp, #36	; 0x24
 800b702:	af04      	add	r7, sp, #16
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	4608      	mov	r0, r1
 800b708:	4611      	mov	r1, r2
 800b70a:	461a      	mov	r2, r3
 800b70c:	4603      	mov	r3, r0
 800b70e:	70fb      	strb	r3, [r7, #3]
 800b710:	460b      	mov	r3, r1
 800b712:	70bb      	strb	r3, [r7, #2]
 800b714:	4613      	mov	r3, r2
 800b716:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b726:	787c      	ldrb	r4, [r7, #1]
 800b728:	78ba      	ldrb	r2, [r7, #2]
 800b72a:	78f9      	ldrb	r1, [r7, #3]
 800b72c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b730:	9303      	str	r3, [sp, #12]
 800b732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b734:	9302      	str	r3, [sp, #8]
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	4623      	mov	r3, r4
 800b742:	f7f5 fd27 	bl	8001194 <HAL_HCD_HC_SubmitRequest>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f86f 	bl	800b830 <USBH_Get_USB_Status>
 800b752:	4603      	mov	r3, r0
 800b754:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b756:	7bbb      	ldrb	r3, [r7, #14]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd90      	pop	{r4, r7, pc}

0800b760 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b772:	78fa      	ldrb	r2, [r7, #3]
 800b774:	4611      	mov	r1, r2
 800b776:	4618      	mov	r0, r3
 800b778:	f7f5 ffc8 	bl	800170c <HAL_HCD_HC_GetURBState>
 800b77c:	4603      	mov	r3, r0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b79c:	78fb      	ldrb	r3, [r7, #3]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 f872 	bl	800b888 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b7a4:	20c8      	movs	r0, #200	; 0xc8
 800b7a6:	f7f4 fee7 	bl	8000578 <HAL_Delay>
  return USBH_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b7ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	68f9      	ldr	r1, [r7, #12]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	440b      	add	r3, r1
 800b7da:	333b      	adds	r3, #59	; 0x3b
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00a      	beq.n	800b7f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	68f9      	ldr	r1, [r7, #12]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	00db      	lsls	r3, r3, #3
 800b7ee:	440b      	add	r3, r1
 800b7f0:	3350      	adds	r3, #80	; 0x50
 800b7f2:	78ba      	ldrb	r2, [r7, #2]
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	e009      	b.n	800b80c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b7f8:	78fa      	ldrb	r2, [r7, #3]
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	440b      	add	r3, r1
 800b806:	3351      	adds	r3, #81	; 0x51
 800b808:	78ba      	ldrb	r2, [r7, #2]
 800b80a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7f4 fea8 	bl	8000578 <HAL_Delay>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	4603      	mov	r3, r0
 800b838:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b83e:	79fb      	ldrb	r3, [r7, #7]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d817      	bhi.n	800b874 <USBH_Get_USB_Status+0x44>
 800b844:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <USBH_Get_USB_Status+0x1c>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b85d 	.word	0x0800b85d
 800b850:	0800b863 	.word	0x0800b863
 800b854:	0800b869 	.word	0x0800b869
 800b858:	0800b86f 	.word	0x0800b86f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	e00b      	b.n	800b87a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b862:	2302      	movs	r3, #2
 800b864:	73fb      	strb	r3, [r7, #15]
    break;
 800b866:	e008      	b.n	800b87a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b868:	2301      	movs	r3, #1
 800b86a:	73fb      	strb	r3, [r7, #15]
    break;
 800b86c:	e005      	b.n	800b87a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b86e:	2302      	movs	r3, #2
 800b870:	73fb      	strb	r3, [r7, #15]
    break;
 800b872:	e002      	b.n	800b87a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b874:	2302      	movs	r3, #2
 800b876:	73fb      	strb	r3, [r7, #15]
    break;
 800b878:	bf00      	nop
  }
  return usb_status;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b892:	79fb      	ldrb	r3, [r7, #7]
 800b894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b89c:	2301      	movs	r3, #1
 800b89e:	73fb      	strb	r3, [r7, #15]
 800b8a0:	e001      	b.n	800b8a6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	2110      	movs	r1, #16
 800b8ac:	4803      	ldr	r0, [pc, #12]	; (800b8bc <MX_DriverVbusHS+0x34>)
 800b8ae:	f7f5 fb1f 	bl	8000ef0 <HAL_GPIO_WritePin>
}
 800b8b2:	bf00      	nop
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	40020800 	.word	0x40020800

0800b8c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800b8c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b8f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b8c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b8c6:	e003      	b.n	800b8d0 <LoopCopyDataInit>

0800b8c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	; (800b8fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b8ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b8cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b8ce:	3104      	adds	r1, #4

0800b8d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b8d0:	480b      	ldr	r0, [pc, #44]	; (800b900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b8d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b8d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b8d8:	d3f6      	bcc.n	800b8c8 <CopyDataInit>
  ldr  r2, =_sbss
 800b8da:	4a0b      	ldr	r2, [pc, #44]	; (800b908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b8dc:	e002      	b.n	800b8e4 <LoopFillZerobss>

0800b8de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b8de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b8e0:	f842 3b04 	str.w	r3, [r2], #4

0800b8e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b8e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b8e8:	d3f9      	bcc.n	800b8de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b8ea:	f7ff fbbd 	bl	800b068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b8ee:	f000 f817 	bl	800b920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b8f2:	f7ff f977 	bl	800abe4 <main>
  bx  lr    
 800b8f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800b8f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800b8fc:	0800bc5c 	.word	0x0800bc5c
  ldr  r0, =_sdata
 800b900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b904:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800b908:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800b90c:	20008da4 	.word	0x20008da4

0800b910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b910:	e7fe      	b.n	800b910 <ADC_IRQHandler>
	...

0800b914 <__errno>:
 800b914:	4b01      	ldr	r3, [pc, #4]	; (800b91c <__errno+0x8>)
 800b916:	6818      	ldr	r0, [r3, #0]
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	2000002c 	.word	0x2000002c

0800b920 <__libc_init_array>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	4d0d      	ldr	r5, [pc, #52]	; (800b958 <__libc_init_array+0x38>)
 800b924:	4c0d      	ldr	r4, [pc, #52]	; (800b95c <__libc_init_array+0x3c>)
 800b926:	1b64      	subs	r4, r4, r5
 800b928:	10a4      	asrs	r4, r4, #2
 800b92a:	2600      	movs	r6, #0
 800b92c:	42a6      	cmp	r6, r4
 800b92e:	d109      	bne.n	800b944 <__libc_init_array+0x24>
 800b930:	4d0b      	ldr	r5, [pc, #44]	; (800b960 <__libc_init_array+0x40>)
 800b932:	4c0c      	ldr	r4, [pc, #48]	; (800b964 <__libc_init_array+0x44>)
 800b934:	f000 f93c 	bl	800bbb0 <_init>
 800b938:	1b64      	subs	r4, r4, r5
 800b93a:	10a4      	asrs	r4, r4, #2
 800b93c:	2600      	movs	r6, #0
 800b93e:	42a6      	cmp	r6, r4
 800b940:	d105      	bne.n	800b94e <__libc_init_array+0x2e>
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	f855 3b04 	ldr.w	r3, [r5], #4
 800b948:	4798      	blx	r3
 800b94a:	3601      	adds	r6, #1
 800b94c:	e7ee      	b.n	800b92c <__libc_init_array+0xc>
 800b94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b952:	4798      	blx	r3
 800b954:	3601      	adds	r6, #1
 800b956:	e7f2      	b.n	800b93e <__libc_init_array+0x1e>
 800b958:	0800bc54 	.word	0x0800bc54
 800b95c:	0800bc54 	.word	0x0800bc54
 800b960:	0800bc54 	.word	0x0800bc54
 800b964:	0800bc58 	.word	0x0800bc58

0800b968 <malloc>:
 800b968:	4b02      	ldr	r3, [pc, #8]	; (800b974 <malloc+0xc>)
 800b96a:	4601      	mov	r1, r0
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	f000 b88d 	b.w	800ba8c <_malloc_r>
 800b972:	bf00      	nop
 800b974:	2000002c 	.word	0x2000002c

0800b978 <free>:
 800b978:	4b02      	ldr	r3, [pc, #8]	; (800b984 <free+0xc>)
 800b97a:	4601      	mov	r1, r0
 800b97c:	6818      	ldr	r0, [r3, #0]
 800b97e:	f000 b819 	b.w	800b9b4 <_free_r>
 800b982:	bf00      	nop
 800b984:	2000002c 	.word	0x2000002c

0800b988 <memcpy>:
 800b988:	440a      	add	r2, r1
 800b98a:	4291      	cmp	r1, r2
 800b98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b990:	d100      	bne.n	800b994 <memcpy+0xc>
 800b992:	4770      	bx	lr
 800b994:	b510      	push	{r4, lr}
 800b996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b99e:	4291      	cmp	r1, r2
 800b9a0:	d1f9      	bne.n	800b996 <memcpy+0xe>
 800b9a2:	bd10      	pop	{r4, pc}

0800b9a4 <memset>:
 800b9a4:	4402      	add	r2, r0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d100      	bne.n	800b9ae <memset+0xa>
 800b9ac:	4770      	bx	lr
 800b9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b9b2:	e7f9      	b.n	800b9a8 <memset+0x4>

0800b9b4 <_free_r>:
 800b9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	d044      	beq.n	800ba44 <_free_r+0x90>
 800b9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b9c6:	bfb8      	it	lt
 800b9c8:	18e4      	addlt	r4, r4, r3
 800b9ca:	f000 f8e3 	bl	800bb94 <__malloc_lock>
 800b9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <_free_r+0x94>)
 800b9d0:	9801      	ldr	r0, [sp, #4]
 800b9d2:	6813      	ldr	r3, [r2, #0]
 800b9d4:	b933      	cbnz	r3, 800b9e4 <_free_r+0x30>
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	6014      	str	r4, [r2, #0]
 800b9da:	b003      	add	sp, #12
 800b9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9e0:	f000 b8de 	b.w	800bba0 <__malloc_unlock>
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d908      	bls.n	800b9fa <_free_r+0x46>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf01      	itttt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	1949      	addeq	r1, r1, r5
 800b9f6:	6021      	streq	r1, [r4, #0]
 800b9f8:	e7ed      	b.n	800b9d6 <_free_r+0x22>
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	b10b      	cbz	r3, 800ba04 <_free_r+0x50>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d9fa      	bls.n	800b9fa <_free_r+0x46>
 800ba04:	6811      	ldr	r1, [r2, #0]
 800ba06:	1855      	adds	r5, r2, r1
 800ba08:	42a5      	cmp	r5, r4
 800ba0a:	d10b      	bne.n	800ba24 <_free_r+0x70>
 800ba0c:	6824      	ldr	r4, [r4, #0]
 800ba0e:	4421      	add	r1, r4
 800ba10:	1854      	adds	r4, r2, r1
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	6011      	str	r1, [r2, #0]
 800ba16:	d1e0      	bne.n	800b9da <_free_r+0x26>
 800ba18:	681c      	ldr	r4, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	6053      	str	r3, [r2, #4]
 800ba1e:	4421      	add	r1, r4
 800ba20:	6011      	str	r1, [r2, #0]
 800ba22:	e7da      	b.n	800b9da <_free_r+0x26>
 800ba24:	d902      	bls.n	800ba2c <_free_r+0x78>
 800ba26:	230c      	movs	r3, #12
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	e7d6      	b.n	800b9da <_free_r+0x26>
 800ba2c:	6825      	ldr	r5, [r4, #0]
 800ba2e:	1961      	adds	r1, r4, r5
 800ba30:	428b      	cmp	r3, r1
 800ba32:	bf04      	itt	eq
 800ba34:	6819      	ldreq	r1, [r3, #0]
 800ba36:	685b      	ldreq	r3, [r3, #4]
 800ba38:	6063      	str	r3, [r4, #4]
 800ba3a:	bf04      	itt	eq
 800ba3c:	1949      	addeq	r1, r1, r5
 800ba3e:	6021      	streq	r1, [r4, #0]
 800ba40:	6054      	str	r4, [r2, #4]
 800ba42:	e7ca      	b.n	800b9da <_free_r+0x26>
 800ba44:	b003      	add	sp, #12
 800ba46:	bd30      	pop	{r4, r5, pc}
 800ba48:	20008d94 	.word	0x20008d94

0800ba4c <sbrk_aligned>:
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	4e0e      	ldr	r6, [pc, #56]	; (800ba88 <sbrk_aligned+0x3c>)
 800ba50:	460c      	mov	r4, r1
 800ba52:	6831      	ldr	r1, [r6, #0]
 800ba54:	4605      	mov	r5, r0
 800ba56:	b911      	cbnz	r1, 800ba5e <sbrk_aligned+0x12>
 800ba58:	f000 f88c 	bl	800bb74 <_sbrk_r>
 800ba5c:	6030      	str	r0, [r6, #0]
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4628      	mov	r0, r5
 800ba62:	f000 f887 	bl	800bb74 <_sbrk_r>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d00a      	beq.n	800ba80 <sbrk_aligned+0x34>
 800ba6a:	1cc4      	adds	r4, r0, #3
 800ba6c:	f024 0403 	bic.w	r4, r4, #3
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d007      	beq.n	800ba84 <sbrk_aligned+0x38>
 800ba74:	1a21      	subs	r1, r4, r0
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 f87c 	bl	800bb74 <_sbrk_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d101      	bne.n	800ba84 <sbrk_aligned+0x38>
 800ba80:	f04f 34ff 	mov.w	r4, #4294967295
 800ba84:	4620      	mov	r0, r4
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	20008d98 	.word	0x20008d98

0800ba8c <_malloc_r>:
 800ba8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba90:	1ccd      	adds	r5, r1, #3
 800ba92:	f025 0503 	bic.w	r5, r5, #3
 800ba96:	3508      	adds	r5, #8
 800ba98:	2d0c      	cmp	r5, #12
 800ba9a:	bf38      	it	cc
 800ba9c:	250c      	movcc	r5, #12
 800ba9e:	2d00      	cmp	r5, #0
 800baa0:	4607      	mov	r7, r0
 800baa2:	db01      	blt.n	800baa8 <_malloc_r+0x1c>
 800baa4:	42a9      	cmp	r1, r5
 800baa6:	d905      	bls.n	800bab4 <_malloc_r+0x28>
 800baa8:	230c      	movs	r3, #12
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	2600      	movs	r6, #0
 800baae:	4630      	mov	r0, r6
 800bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab4:	4e2e      	ldr	r6, [pc, #184]	; (800bb70 <_malloc_r+0xe4>)
 800bab6:	f000 f86d 	bl	800bb94 <__malloc_lock>
 800baba:	6833      	ldr	r3, [r6, #0]
 800babc:	461c      	mov	r4, r3
 800babe:	bb34      	cbnz	r4, 800bb0e <_malloc_r+0x82>
 800bac0:	4629      	mov	r1, r5
 800bac2:	4638      	mov	r0, r7
 800bac4:	f7ff ffc2 	bl	800ba4c <sbrk_aligned>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	4604      	mov	r4, r0
 800bacc:	d14d      	bne.n	800bb6a <_malloc_r+0xde>
 800bace:	6834      	ldr	r4, [r6, #0]
 800bad0:	4626      	mov	r6, r4
 800bad2:	2e00      	cmp	r6, #0
 800bad4:	d140      	bne.n	800bb58 <_malloc_r+0xcc>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	4631      	mov	r1, r6
 800bada:	4638      	mov	r0, r7
 800badc:	eb04 0803 	add.w	r8, r4, r3
 800bae0:	f000 f848 	bl	800bb74 <_sbrk_r>
 800bae4:	4580      	cmp	r8, r0
 800bae6:	d13a      	bne.n	800bb5e <_malloc_r+0xd2>
 800bae8:	6821      	ldr	r1, [r4, #0]
 800baea:	3503      	adds	r5, #3
 800baec:	1a6d      	subs	r5, r5, r1
 800baee:	f025 0503 	bic.w	r5, r5, #3
 800baf2:	3508      	adds	r5, #8
 800baf4:	2d0c      	cmp	r5, #12
 800baf6:	bf38      	it	cc
 800baf8:	250c      	movcc	r5, #12
 800bafa:	4629      	mov	r1, r5
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7ff ffa5 	bl	800ba4c <sbrk_aligned>
 800bb02:	3001      	adds	r0, #1
 800bb04:	d02b      	beq.n	800bb5e <_malloc_r+0xd2>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	442b      	add	r3, r5
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	e00e      	b.n	800bb2c <_malloc_r+0xa0>
 800bb0e:	6822      	ldr	r2, [r4, #0]
 800bb10:	1b52      	subs	r2, r2, r5
 800bb12:	d41e      	bmi.n	800bb52 <_malloc_r+0xc6>
 800bb14:	2a0b      	cmp	r2, #11
 800bb16:	d916      	bls.n	800bb46 <_malloc_r+0xba>
 800bb18:	1961      	adds	r1, r4, r5
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	6025      	str	r5, [r4, #0]
 800bb1e:	bf18      	it	ne
 800bb20:	6059      	strne	r1, [r3, #4]
 800bb22:	6863      	ldr	r3, [r4, #4]
 800bb24:	bf08      	it	eq
 800bb26:	6031      	streq	r1, [r6, #0]
 800bb28:	5162      	str	r2, [r4, r5]
 800bb2a:	604b      	str	r3, [r1, #4]
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f104 060b 	add.w	r6, r4, #11
 800bb32:	f000 f835 	bl	800bba0 <__malloc_unlock>
 800bb36:	f026 0607 	bic.w	r6, r6, #7
 800bb3a:	1d23      	adds	r3, r4, #4
 800bb3c:	1af2      	subs	r2, r6, r3
 800bb3e:	d0b6      	beq.n	800baae <_malloc_r+0x22>
 800bb40:	1b9b      	subs	r3, r3, r6
 800bb42:	50a3      	str	r3, [r4, r2]
 800bb44:	e7b3      	b.n	800baae <_malloc_r+0x22>
 800bb46:	6862      	ldr	r2, [r4, #4]
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	bf0c      	ite	eq
 800bb4c:	6032      	streq	r2, [r6, #0]
 800bb4e:	605a      	strne	r2, [r3, #4]
 800bb50:	e7ec      	b.n	800bb2c <_malloc_r+0xa0>
 800bb52:	4623      	mov	r3, r4
 800bb54:	6864      	ldr	r4, [r4, #4]
 800bb56:	e7b2      	b.n	800babe <_malloc_r+0x32>
 800bb58:	4634      	mov	r4, r6
 800bb5a:	6876      	ldr	r6, [r6, #4]
 800bb5c:	e7b9      	b.n	800bad2 <_malloc_r+0x46>
 800bb5e:	230c      	movs	r3, #12
 800bb60:	603b      	str	r3, [r7, #0]
 800bb62:	4638      	mov	r0, r7
 800bb64:	f000 f81c 	bl	800bba0 <__malloc_unlock>
 800bb68:	e7a1      	b.n	800baae <_malloc_r+0x22>
 800bb6a:	6025      	str	r5, [r4, #0]
 800bb6c:	e7de      	b.n	800bb2c <_malloc_r+0xa0>
 800bb6e:	bf00      	nop
 800bb70:	20008d94 	.word	0x20008d94

0800bb74 <_sbrk_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d06      	ldr	r5, [pc, #24]	; (800bb90 <_sbrk_r+0x1c>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7ff fa46 	bl	800b010 <_sbrk>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_sbrk_r+0x1a>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_sbrk_r+0x1a>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20008d9c 	.word	0x20008d9c

0800bb94 <__malloc_lock>:
 800bb94:	4801      	ldr	r0, [pc, #4]	; (800bb9c <__malloc_lock+0x8>)
 800bb96:	f000 b809 	b.w	800bbac <__retarget_lock_acquire_recursive>
 800bb9a:	bf00      	nop
 800bb9c:	20008da0 	.word	0x20008da0

0800bba0 <__malloc_unlock>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__malloc_unlock+0x8>)
 800bba2:	f000 b804 	b.w	800bbae <__retarget_lock_release_recursive>
 800bba6:	bf00      	nop
 800bba8:	20008da0 	.word	0x20008da0

0800bbac <__retarget_lock_acquire_recursive>:
 800bbac:	4770      	bx	lr

0800bbae <__retarget_lock_release_recursive>:
 800bbae:	4770      	bx	lr

0800bbb0 <_init>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr

0800bbbc <_fini>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	bf00      	nop
 800bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc2:	bc08      	pop	{r3}
 800bbc4:	469e      	mov	lr, r3
 800bbc6:	4770      	bx	lr
