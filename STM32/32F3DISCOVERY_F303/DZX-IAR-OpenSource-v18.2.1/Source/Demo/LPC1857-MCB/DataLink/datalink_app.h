/*******************************************************************************************************************************************

    DZX | DATALINK | APP                                                                                                  VERSION 18.2.1
    ------------------------------------------------------------------------------------------------------------------------------------

    This contains handlers and definitions for parsing and processing messages received over a data link. This file has been auto
    generated by a tool and should not be manually edited.

        Definition File:      demolink.xml
        Protocol Version:     1
        Generation Date:      07/28/2016 12:29:17 PM


    ------------------------------------------------------------------------------------------------------------------------------------
    COPYRIGHT (C) 2016 DZX DESIGNS

*******************************************************************************************************************************************/
#ifndef DATALINK_APP_H__
#define DATALINK_APP_H__

#include "DataLink/datalink.h"
#include <string.h>

/*******************************************************************************************************************************************
    MESSAGE IDENTIFIERS
*******************************************************************************************************************************************/
#define MSGID_ENABLESTATUSSTREAM                            1
#define MSGID_READMEMORY                                    2
#define MSGID_WRITEMEMORY                                   3
#define MSGID_DEVICESTATUS                                  4

/*******************************************************************************************************************************************
    PROPERTIES
*******************************************************************************************************************************************/
#define DATALINK_APP_MAXMESSAGESIZE                         264
#define DATALINK_APP_MAXRXSIZE                              264
#define DATALINK_APP_MAXTXSIZE                              264
#define DATALINK_APP_MAXREQUESTSIZE                         264
#define DATALINK_APP_MAXRESPONSESIZE                        264
#define DATALINK_APP_MAXUNSOLICITEDSIZE                     12
#define DATALINK_APP_MAXUNSOLICITEDTXSIZE                   12
#define DATALINK_APP_MAXUNSOLICITEDRXSIZE                   8

/*******************************************************************************************************************************************
    MESSAGE REQUEST/RESPONSE STRUCTURES
*******************************************************************************************************************************************/
/*******************************************************************************************************************************************

    Request parameter definitions for the 'Read Memory' message.

*******************************************************************************************************************************************/
typedef struct REQUEST_READMEMORY {
    UINT32 address;                                             /* The starting address to be read. */
    UINT32 length;                                              /* The number of data bytes to be read and returned. */
} REQUEST_READMEMORY;

/*******************************************************************************************************************************************

    The 'Data' array for the 'Read Memory' message.

*******************************************************************************************************************************************/
typedef struct RESPONSE_READMEMORY_DATA_ARRAY {
    UINT16 count;                                               /* The number of items currently contained within the array. */
    UINT8 values[256];                                          /* The actual values of the items within the array. */
} RESPONSE_READMEMORY_DATA_ARRAY;

/*******************************************************************************************************************************************

    Response parameter definitions for the 'Read Memory' message.

*******************************************************************************************************************************************/
typedef struct RESPONSE_READMEMORY {
    RESPONSE_READMEMORY_DATA_ARRAY data;                        /* The memory data values. */
    UINT32 result;                                              /* A result code for the operation. */
} RESPONSE_READMEMORY;

/*******************************************************************************************************************************************

    The 'Data' array for the 'Write Memory' message.

*******************************************************************************************************************************************/
typedef struct REQUEST_WRITEMEMORY_DATA_ARRAY {
    UINT16 count;                                               /* The number of items currently contained within the array. */
    UINT8 values[256];                                          /* The actual values of the items within the array. */
} REQUEST_WRITEMEMORY_DATA_ARRAY;

/*******************************************************************************************************************************************

    Request parameter definitions for the 'Write Memory' message.

*******************************************************************************************************************************************/
typedef struct REQUEST_WRITEMEMORY {
    UINT32 address;                                             /* The starting address to be written. */
    REQUEST_WRITEMEMORY_DATA_ARRAY data;                        /* The data values to be written to memory. */
} REQUEST_WRITEMEMORY;

/*******************************************************************************************************************************************

    Response parameter definitions for the 'Write Memory' message.

*******************************************************************************************************************************************/
typedef struct RESPONSE_WRITEMEMORY {
    UINT32 result;                                              /* A result response code. */
} RESPONSE_WRITEMEMORY;

/*******************************************************************************************************************************************
    UNSOLICITED STRUCTURES
*******************************************************************************************************************************************/
/*******************************************************************************************************************************************

    Argument parameter definitions for the 'Device Status' message.

*******************************************************************************************************************************************/
typedef struct DEVICESTATUSARGS {
    UINT32 kernelUtilization;
    UINT32 kernelTicks;
} DEVICESTATUSARGS;

/*******************************************************************************************************************************************

    Argument parameter definitions for the 'Enable Status Stream' message.

*******************************************************************************************************************************************/
typedef struct ENABLESTATUSSTREAMARGS {
    BOOLEAN enabled;                                            /* The enable/disable state for the status stream. */
} ENABLESTATUSSTREAMARGS;


/*******************************************************************************************************************************************
    HANDLER FUNCTIONS
*******************************************************************************************************************************************/
/***************************************************************************************************************************************//**

    A handler function called when the 'Enable Status Stream' message has been received.

    @param[in]  link        A pointer to the target data link.
    @param[in]  args        A pointer the arguments for the message.

    @return     None.

*******************************************************************************************************************************************/
extern void DATALINK_EnableStatusStream_Handler(DATALINK* link, const ENABLESTATUSSTREAMARGS* args);

/***************************************************************************************************************************************//**

    A handler function called when the 'Read Memory' message has been received.

    @param[in]  link        A pointer to the target data link.
    @param[in]  request     A pointer the request parameters for the message.
    @param[in]  response    A pointer to the response parameters for the message.

    @return     None.

*******************************************************************************************************************************************/
extern void DATALINK_ReadMemory_Handler(DATALINK* link, const REQUEST_READMEMORY* request, RESPONSE_READMEMORY* response);

/***************************************************************************************************************************************//**

    A handler function called when the 'Write Memory' message has been received.

    @param[in]  link        A pointer to the target data link.
    @param[in]  request     A pointer the request parameters for the message.
    @param[in]  response    A pointer to the response parameters for the message.

    @return     None.

*******************************************************************************************************************************************/
extern void DATALINK_WriteMemory_Handler(DATALINK* link, const REQUEST_WRITEMEMORY* request, RESPONSE_WRITEMEMORY* response);


/*******************************************************************************************************************************************
    PUBLIC FUNCTIONS
*******************************************************************************************************************************************/
/***************************************************************************************************************************************//**

    Creates and initializes the custom 'App' data link.

    @param[in]  link        A pointer to the target data link.
    @param[in]  write       A pointer to a handler function to write (transmit) messages for the data link.
    @param[in]  writearg    A pointer to an application-defined variable that is passed to the write handler.

    @return     None.

*******************************************************************************************************************************************/
extern STATUS DATALINK_CreateApp(DATALINK* link, DATALINKWRITEHANDLER write, void* writearg);

/***************************************************************************************************************************************//**

    

    @param[in]  link        A pointer to the target data link.
    @param[in]  arg         

    @return     None.

*******************************************************************************************************************************************/
extern STATUS DATALINK_DeviceStatus(DATALINK* link, const DEVICESTATUSARGS* arg);

#endif /* DATALINK_APP_H__ */

