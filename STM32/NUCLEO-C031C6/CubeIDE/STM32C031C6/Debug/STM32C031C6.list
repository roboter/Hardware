
STM32C031C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000429c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004414  08004414  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08004414  08004414  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004414  08004414  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000ec  08004508  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08004508  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d399  00000000  00000000  00020157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f81  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002f478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000888  00000000  00000000  0002ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000355e  00000000  00000000  00030800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f694  00000000  00000000  00033d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ae51  00000000  00000000  000433f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f1c  00000000  00000000  000be244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c1160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ec 	.word	0x200000ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004344 	.word	0x08004344

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f0 	.word	0x200000f0
 8000104:	08004344 	.word	0x08004344

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800023a:	f000 fbb0 	bl	800099e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800023e:	f000 f873 	bl	8000328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000242:	f000 f94d 	bl	80004e0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000246:	f000 f8d7 	bl	80003f8 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 800024a:	f000 f915 	bl	8000478 <MX_USART2_UART_Init>
	MX_CRC_Init();
 800024e:	f000 f8af 	bl	80003b0 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */

	uint32_t Temperature = 32;
 8000252:	2320      	movs	r3, #32
 8000254:	60bb      	str	r3, [r7, #8]
	uint32_t Temperature_R = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]

	unsigned char One = 0;
 800025a:	1cfb      	adds	r3, r7, #3
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
//	for (uint8_t i = 0; i < sizeof(toWrite1)-1; i++) {
//		//write_eeprom_reg(i, toWrite1[i]);
//
//
//	}
	HAL_I2C_Mem_Write(&hi2c1, 0x50 << 1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t*) &toWrite2, sizeof(toWrite2), 100);
 8000260:	482a      	ldr	r0, [pc, #168]	; (800030c <main+0xd8>)
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	9302      	str	r3, [sp, #8]
 8000266:	2381      	movs	r3, #129	; 0x81
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	4b29      	ldr	r3, [pc, #164]	; (8000310 <main+0xdc>)
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2302      	movs	r3, #2
 8000270:	2200      	movs	r2, #0
 8000272:	21a0      	movs	r1, #160	; 0xa0
 8000274:	f001 f862 	bl	800133c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000278:	200a      	movs	r0, #10
 800027a:	f000 fc0d 	bl	8000a98 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, 0x50 << 1, 0, I2C_MEMADD_SIZE_16BIT, (uint8_t*) &Temperature_R, sizeof(Temperature), 100);
 800027e:	4823      	ldr	r0, [pc, #140]	; (800030c <main+0xd8>)
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	9302      	str	r3, [sp, #8]
 8000284:	2304      	movs	r3, #4
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2302      	movs	r3, #2
 800028e:	2200      	movs	r2, #0
 8000290:	21a0      	movs	r1, #160	; 0xa0
 8000292:	f001 f981 	bl	8001598 <HAL_I2C_Mem_Read>

	for (uint8_t i = 0; i < 128; i++) {
 8000296:	230f      	movs	r3, #15
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	e029      	b.n	80002f4 <main+0xc0>
		HAL_I2C_Mem_Read(&hi2c1, 0x50 << 1, i, I2C_MEMADD_SIZE_16BIT, (uint8_t*) &One, sizeof(One), 100);
 80002a0:	240f      	movs	r4, #15
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4818      	ldr	r0, [pc, #96]	; (800030c <main+0xd8>)
 80002aa:	2364      	movs	r3, #100	; 0x64
 80002ac:	9302      	str	r3, [sp, #8]
 80002ae:	2301      	movs	r3, #1
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	1cfb      	adds	r3, r7, #3
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2302      	movs	r3, #2
 80002b8:	21a0      	movs	r1, #160	; 0xa0
 80002ba:	f001 f96d 	bl	8001598 <HAL_I2C_Mem_Read>
		printf(" %1d",One);
 80002be:	1cfb      	adds	r3, r7, #3
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	001a      	movs	r2, r3
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <main+0xe0>)
 80002c6:	0011      	movs	r1, r2
 80002c8:	0018      	movs	r0, r3
 80002ca:	f002 ffc1 	bl	8003250 <iprintf>
		sprintf(Buffer, "%c", One);
 80002ce:	1cfb      	adds	r3, r7, #3
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	001a      	movs	r2, r3
 80002d4:	4910      	ldr	r1, [pc, #64]	; (8000318 <main+0xe4>)
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <main+0xe8>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 ffc9 	bl	8003270 <siprintf>
		HAL_UART_Transmit(&huart2, Buffer, sizeof(One), 10000);
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <main+0xec>)
 80002e0:	490e      	ldr	r1, [pc, #56]	; (800031c <main+0xe8>)
 80002e2:	4810      	ldr	r0, [pc, #64]	; (8000324 <main+0xf0>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	f002 fab1 	bl	800284c <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	3201      	adds	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	dacf      	bge.n	80002a0 <main+0x6c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Go through all possible i2c addresses

		HAL_Delay(10000);
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <main+0xec>)
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fbc8 	bl	8000a98 <HAL_Delay>
 8000308:	e7fa      	b.n	8000300 <main+0xcc>
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	2000012c 	.word	0x2000012c
 8000310:	20000000 	.word	0x20000000
 8000314:	0800435c 	.word	0x0800435c
 8000318:	08004364 	.word	0x08004364
 800031c:	20000214 	.word	0x20000214
 8000320:	00002710 	.word	0x00002710
 8000324:	20000180 	.word	0x20000180

08000328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b08d      	sub	sp, #52	; 0x34
 800032c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800032e:	2414      	movs	r4, #20
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	231c      	movs	r3, #28
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f003 f805 	bl	8003348 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800033e:	003b      	movs	r3, r7
 8000340:	0018      	movs	r0, r3
 8000342:	2314      	movs	r3, #20
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f002 fffe 	bl	8003348 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2202      	movs	r2, #2
 8000350:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800035a:	193b      	adds	r3, r7, r4
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	193b      	adds	r3, r7, r4
 8000362:	2240      	movs	r2, #64	; 0x40
 8000364:	615a      	str	r2, [r3, #20]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000366:	193b      	adds	r3, r7, r4
 8000368:	0018      	movs	r0, r3
 800036a:	f001 fddb 	bl	8001f24 <HAL_RCC_OscConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x4e>
		Error_Handler();
 8000372:	f000 f92d 	bl	80005d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000376:	003b      	movs	r3, r7
 8000378:	2207      	movs	r2, #7
 800037a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800037c:	003b      	movs	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	003b      	movs	r3, r7
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800038e:	003b      	movs	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000394:	003b      	movs	r3, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0018      	movs	r0, r3
 800039a:	f001 ffa7 	bl	80022ec <HAL_RCC_ClockConfig>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x7e>
		Error_Handler();
 80003a2:	f000 f915 	bl	80005d0 <Error_Handler>
	}
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b00d      	add	sp, #52	; 0x34
 80003ac:	bd90      	pop	{r4, r7, pc}
	...

080003b0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_CRC_Init+0x40>)
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MX_CRC_Init+0x44>)
 80003b8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003ba:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <MX_CRC_Init+0x40>)
 80003bc:	2200      	movs	r2, #0
 80003be:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_CRC_Init+0x40>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <MX_CRC_Init+0x40>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_CRC_Init+0x40>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <MX_CRC_Init+0x40>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <MX_CRC_Init+0x40>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fc5e 	bl	8000c9c <HAL_CRC_Init>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_CRC_Init+0x38>
		Error_Handler();
 80003e4:	f000 f8f4 	bl	80005d0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80003e8:	46c0      	nop			; (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	20000108 	.word	0x20000108
 80003f4:	40023000 	.word	0x40023000

080003f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_I2C1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_I2C1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_I2C1_Init+0x74>)
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <MX_I2C1_Init+0x7c>)
 8000406:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_I2C1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_I2C1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_I2C1_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_I2C1_Init+0x74>)
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fedb 	bl	80011f0 <HAL_I2C_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800043e:	f000 f8c7 	bl	80005d0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_I2C1_Init+0x74>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fcd4 	bl	8001df4 <HAL_I2CEx_ConfigAnalogFilter>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000450:	f000 f8be 	bl	80005d0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_I2C1_Init+0x74>)
 8000456:	2100      	movs	r1, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fd17 	bl	8001e8c <HAL_I2CEx_ConfigDigitalFilter>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000462:	f000 f8b5 	bl	80005d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000012c 	.word	0x2000012c
 8000470:	40005400 	.word	0x40005400
 8000474:	20303e5d 	.word	0x20303e5d

08000478 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 800047e:	4a17      	ldr	r2, [pc, #92]	; (80004dc <MX_USART2_UART_Init+0x64>)
 8000480:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 8000484:	22e1      	movs	r2, #225	; 0xe1
 8000486:	0252      	lsls	r2, r2, #9
 8000488:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_USART2_UART_Init+0x60>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 f96c 	bl	80027a0 <HAL_UART_Init>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80004cc:	f000 f880 	bl	80005d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	20000180 	.word	0x20000180
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b08b      	sub	sp, #44	; 0x2c
 80004e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004e6:	2414      	movs	r4, #20
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 ff29 	bl	8003348 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <MX_GPIO_Init+0xe4>)
 80004f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fa:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <MX_GPIO_Init+0xe4>)
 80004fc:	2104      	movs	r1, #4
 80004fe:	430a      	orrs	r2, r1
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
 8000502:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000506:	2204      	movs	r2, #4
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000514:	2120      	movs	r1, #32
 8000516:	430a      	orrs	r2, r1
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <MX_GPIO_Init+0xe4>)
 800051c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051e:	2220      	movs	r2, #32
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_GPIO_Init+0xe4>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_GPIO_Init+0xe4>)
 8000544:	2102      	movs	r1, #2
 8000546:	430a      	orrs	r2, r1
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0xe4>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	2202      	movs	r2, #2
 8000550:	4013      	ands	r3, r2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fdea 	bl	8001138 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : User_Button_Pin */
	GPIO_InitStruct.Pin = User_Button_Pin;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0192      	lsls	r2, r2, #6
 800056a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_GPIO_Init+0xe8>)
 8000570:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_GPIO_Init+0xec>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f000 fc68 	bl	8000e54 <HAL_GPIO_Init>

	/*Configure GPIO pin : Led_Pin */
	GPIO_InitStruct.Pin = Led_Pin;
 8000584:	0021      	movs	r1, r4
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2220      	movs	r2, #32
 800058a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2201      	movs	r2, #1
 8000590:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2203      	movs	r2, #3
 800059c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800059e:	187a      	adds	r2, r7, r1
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fc54 	bl	8000e54 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	2007      	movs	r0, #7
 80005b2:	f000 fb41 	bl	8000c38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005b6:	2007      	movs	r0, #7
 80005b8:	f000 fb53 	bl	8000c62 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b00b      	add	sp, #44	; 0x2c
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	40021000 	.word	0x40021000
 80005c8:	10110000 	.word	0x10110000
 80005cc:	50000800 	.word	0x50000800

080005d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x44>)
 80005e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_MspInit+0x44>)
 80005e8:	2101      	movs	r1, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_MspInit+0x44>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	2201      	movs	r2, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_MspInit+0x44>)
 80005fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_MspInit+0x44>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0549      	lsls	r1, r1, #21
 8000604:	430a      	orrs	r2, r1
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_MspInit+0x44>)
 800060a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	055b      	lsls	r3, r3, #21
 8000610:	4013      	ands	r3, r2
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <HAL_CRC_MspInit+0x38>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d10d      	bne.n	8000652 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_CRC_MspInit+0x3c>)
 8000638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_CRC_MspInit+0x3c>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0149      	lsls	r1, r1, #5
 8000640:	430a      	orrs	r2, r1
 8000642:	639a      	str	r2, [r3, #56]	; 0x38
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_CRC_MspInit+0x3c>)
 8000646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	015b      	lsls	r3, r3, #5
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40023000 	.word	0x40023000
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b091      	sub	sp, #68	; 0x44
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	232c      	movs	r3, #44	; 0x2c
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	0018      	movs	r0, r3
 8000672:	2314      	movs	r3, #20
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f002 fe66 	bl	8003348 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	2410      	movs	r4, #16
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	231c      	movs	r3, #28
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fe5e 	bl	8003348 <memset>
  if(hi2c->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <HAL_I2C_MspInit+0xb8>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d13e      	bne.n	8000714 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 ff8d 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006ae:	f7ff ff8f 	bl	80005d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 80006b8:	2102      	movs	r1, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2202      	movs	r2, #2
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ca:	212c      	movs	r1, #44	; 0x2c
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c0      	movs	r2, #192	; 0xc0
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2212      	movs	r2, #18
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2206      	movs	r2, #6
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f000 fbae 	bl	8000e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0389      	lsls	r1, r1, #14
 8000702:	430a      	orrs	r2, r1
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 8000708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	039b      	lsls	r3, r3, #14
 800070e:	4013      	ands	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b011      	add	sp, #68	; 0x44
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40005400 	.word	0x40005400
 8000720:	40021000 	.word	0x40021000
 8000724:	50000400 	.word	0x50000400

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08b      	sub	sp, #44	; 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	2414      	movs	r4, #20
 8000732:	193b      	adds	r3, r7, r4
 8000734:	0018      	movs	r0, r3
 8000736:	2314      	movs	r3, #20
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f002 fe04 	bl	8003348 <memset>
  if(huart->Instance==USART2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_UART_MspInit+0x8c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d130      	bne.n	80007ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800074c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	0289      	lsls	r1, r1, #10
 8000754:	430a      	orrs	r2, r1
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800075a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	029b      	lsls	r3, r3, #10
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_UART_MspInit+0x90>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_UART_MspInit+0x90>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077e:	0021      	movs	r1, r4
 8000780:	187b      	adds	r3, r7, r1
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2201      	movs	r2, #1
 800079c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	187a      	adds	r2, r7, r1
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fb54 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00b      	add	sp, #44	; 0x2c
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f93e 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	019b      	lsls	r3, r3, #6
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fcbe 	bl	8001174 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00a      	b.n	8000826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000810:	e000      	b.n	8000814 <_read+0x16>
 8000812:	bf00      	nop
 8000814:	0001      	movs	r1, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	b2ca      	uxtb	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf0      	blt.n	8000810 <_read+0x12>
  }

  return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b006      	add	sp, #24
 8000836:	bd80      	pop	{r7, pc}

08000838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e009      	b.n	800085e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	60ba      	str	r2, [r7, #8]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	e000      	b.n	8000858 <_write+0x20>
 8000856:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf1      	blt.n	800084a <_write+0x12>
  }
  return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b006      	add	sp, #24
 800086e:	bd80      	pop	{r7, pc}

08000870 <_close>:

int _close(int file)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000878:	2301      	movs	r3, #1
 800087a:	425b      	negs	r3, r3
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}

08000884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0192      	lsls	r2, r2, #6
 8000894:	605a      	str	r2, [r3, #4]
  return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_isatty>:

int _isatty(int file)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b084      	sub	sp, #16
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f002 fd7c 	bl	80033f4 <__errno>
 80008fc:	0003      	movs	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	18d2      	adds	r2, r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b006      	add	sp, #24
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20003000 	.word	0x20003000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000230 	.word	0x20000230
 8000930:	20000388 	.word	0x20000388

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <SystemInit+0x14>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0512      	lsls	r2, r2, #20
 800093e:	609a      	str	r2, [r3, #8]
#endif
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <Reset_Handler>:
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
 800094e:	4685      	mov	sp, r0
 8000950:	f7ff fff0 	bl	8000934 <SystemInit>
 8000954:	2100      	movs	r1, #0
 8000956:	e003      	b.n	8000960 <LoopCopyDataInit>

08000958 <CopyDataInit>:
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <LoopForever+0x6>)
 800095a:	585b      	ldr	r3, [r3, r1]
 800095c:	5043      	str	r3, [r0, r1]
 800095e:	3104      	adds	r1, #4

08000960 <LoopCopyDataInit>:
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <LoopForever+0xa>)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <LoopForever+0xe>)
 8000964:	1842      	adds	r2, r0, r1
 8000966:	429a      	cmp	r2, r3
 8000968:	d3f6      	bcc.n	8000958 <CopyDataInit>
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
 800096c:	e002      	b.n	8000974 <LoopFillZerobss>

0800096e <FillZerobss>:
 800096e:	2300      	movs	r3, #0
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	3204      	adds	r2, #4

08000974 <LoopFillZerobss>:
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LoopForever+0x16>)
 8000976:	429a      	cmp	r2, r3
 8000978:	d3f9      	bcc.n	800096e <FillZerobss>
 800097a:	f002 fd41 	bl	8003400 <__libc_init_array>
 800097e:	f7ff fc59 	bl	8000234 <main>

08000982 <LoopForever>:
 8000982:	e7fe      	b.n	8000982 <LoopForever>
 8000984:	20003000 	.word	0x20003000
 8000988:	0800441c 	.word	0x0800441c
 800098c:	20000000 	.word	0x20000000
 8000990:	200000ec 	.word	0x200000ec
 8000994:	200000ec 	.word	0x200000ec
 8000998:	20000384 	.word	0x20000384

0800099c <ADC1_IRQHandler>:
 800099c:	e7fe      	b.n	800099c <ADC1_IRQHandler>

0800099e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 f80e 	bl	80009cc <HAL_InitTick>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d003      	beq.n	80009bc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e001      	b.n	80009c0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009bc:	f7ff fe0e 	bl	80005dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b002      	add	sp, #8
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	230f      	movs	r3, #15
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <HAL_InitTick+0x88>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d02b      	beq.n	8000a3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_InitTick+0x8c>)
 80009e6:	681c      	ldr	r4, [r3, #0]
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_InitTick+0x88>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0019      	movs	r1, r3
 80009ee:	23fa      	movs	r3, #250	; 0xfa
 80009f0:	0098      	lsls	r0, r3, #2
 80009f2:	f7ff fb93 	bl	800011c <__udivsi3>
 80009f6:	0003      	movs	r3, r0
 80009f8:	0019      	movs	r1, r3
 80009fa:	0020      	movs	r0, r4
 80009fc:	f7ff fb8e 	bl	800011c <__udivsi3>
 8000a00:	0003      	movs	r3, r0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f93d 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d112      	bne.n	8000a32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d80a      	bhi.n	8000a28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	2301      	movs	r3, #1
 8000a16:	425b      	negs	r3, r3
 8000a18:	2200      	movs	r2, #0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f90c 	bl	8000c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_InitTick+0x90>)
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e00d      	b.n	8000a44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e008      	b.n	8000a44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a32:	230f      	movs	r3, #15
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e003      	b.n	8000a44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	781b      	ldrb	r3, [r3, #0]
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b005      	add	sp, #20
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	20000084 	.word	0x20000084
 8000a5c:	20000088 	.word	0x20000088

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	18d2      	adds	r2, r2, r3
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	2000008c 	.word	0x2000008c
 8000a80:	20000234 	.word	0x20000234

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000234 	.word	0x20000234

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b7f      	cmp	r3, #127	; 0x7f
 8000af2:	d809      	bhi.n	8000b08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	231f      	movs	r3, #31
 8000afc:	401a      	ands	r2, r3
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_EnableIRQ+0x30>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	4091      	lsls	r1, r2
 8000b04:	000a      	movs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b7f      	cmp	r3, #127	; 0x7f
 8000b28:	d828      	bhi.n	8000b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	33c0      	adds	r3, #192	; 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	589b      	ldr	r3, [r3, r2]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	481f      	ldr	r0, [pc, #124]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b7a:	e031      	b.n	8000be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0019      	movs	r1, r3
 8000b84:	230f      	movs	r3, #15
 8000b86:	400b      	ands	r3, r1
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001c      	movs	r4, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	4023      	ands	r3, r4
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	3306      	adds	r3, #6
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	18c3      	adds	r3, r0, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b003      	add	sp, #12
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	045b      	lsls	r3, r3, #17
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d301      	bcc.n	8000c08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c04:	2301      	movs	r3, #1
 8000c06:	e010      	b.n	8000c2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <SysTick_Config+0x44>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2103      	movs	r1, #3
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ff7c 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x44>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	210f      	movs	r1, #15
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	1c02      	adds	r2, r0, #0
 8000c48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	0002      	movs	r2, r0
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff33 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ffaf 	bl	8000bf0 <SysTick_Config>
 8000c92:	0003      	movs	r3, r0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e056      	b.n	8000d5c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7f5b      	ldrb	r3, [r3, #29]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d106      	bne.n	8000cc6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fcaf 	bl	8000624 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2202      	movs	r2, #2
 8000cca:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	791b      	ldrb	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10c      	bne.n	8000cee <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <HAL_CRC_Init+0xc8>)
 8000cda:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2118      	movs	r1, #24
 8000ce8:	438a      	bics	r2, r1
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	e00b      	b.n	8000d06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6899      	ldr	r1, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 f835 	bl	8000d68 <HAL_CRCEx_Polynomial_Set>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e02a      	b.n	8000d5c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d105      	bne.n	8000d1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4252      	negs	r2, r2
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	e004      	b.n	8000d24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6912      	ldr	r2, [r2, #16]
 8000d22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2260      	movs	r2, #96	; 0x60
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	0019      	movs	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695a      	ldr	r2, [r3, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	4393      	bics	r3, r2
 8000d46:	0019      	movs	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	04c11db7 	.word	0x04c11db7

08000d68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2117      	movs	r1, #23
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d7c:	231f      	movs	r3, #31
 8000d7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	d103      	bne.n	8000d90 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e045      	b.n	8000e1c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1e5a      	subs	r2, r3, #1
 8000d96:	613a      	str	r2, [r7, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <HAL_CRCEx_Polynomial_Set+0x46>
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	221f      	movs	r2, #31
 8000da0:	4013      	ands	r3, r2
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	0013      	movs	r3, r2
 8000da8:	2201      	movs	r2, #1
 8000daa:	4013      	ands	r3, r2
 8000dac:	d0f1      	beq.n	8000d92 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b18      	cmp	r3, #24
 8000db2:	d00f      	beq.n	8000dd4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b18      	cmp	r3, #24
 8000db8:	d824      	bhi.n	8000e04 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b10      	cmp	r3, #16
 8000dbe:	d011      	beq.n	8000de4 <HAL_CRCEx_Polynomial_Set+0x7c>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d81e      	bhi.n	8000e04 <HAL_CRCEx_Polynomial_Set+0x9c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_CRCEx_Polynomial_Set+0xa6>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b08      	cmp	r3, #8
 8000dd0:	d010      	beq.n	8000df4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8000dd2:	e017      	b.n	8000e04 <HAL_CRCEx_Polynomial_Set+0x9c>
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d91b      	bls.n	8000e12 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000de2:	e016      	b.n	8000e12 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d915      	bls.n	8000e16 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8000dea:	2317      	movs	r3, #23
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000df2:	e010      	b.n	8000e16 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	d90f      	bls.n	8000e1a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8000dfa:	2317      	movs	r3, #23
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000e02:	e00a      	b.n	8000e1a <HAL_CRCEx_Polynomial_Set+0xb2>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000e04:	2317      	movs	r3, #23
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
        break;
 8000e0c:	e006      	b.n	8000e1c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	e004      	b.n	8000e1c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	e002      	b.n	8000e1c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	e000      	b.n	8000e1c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8000e1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8000e1c:	2317      	movs	r3, #23
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10e      	bne.n	8000e44 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2218      	movs	r2, #24
 8000e36:	4393      	bics	r3, r2
 8000e38:	0019      	movs	r1, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e44:	2317      	movs	r3, #23
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b006      	add	sp, #24
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e62:	e153      	b.n	800110c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d100      	bne.n	8000e7c <HAL_GPIO_Init+0x28>
 8000e7a:	e144      	b.n	8001106 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x38>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d125      	bne.n	8000ed8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	58d3      	ldr	r3, [r2, r3]
 8000e98:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	2107      	movs	r1, #7
 8000ebc:	400b      	ands	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	6979      	ldr	r1, [r7, #20]
 8000ed6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00b      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4013      	ands	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	055b      	lsls	r3, r3, #21
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_GPIO_Init+0x180>
 8000fd2:	e098      	b.n	8001106 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fd4:	4a53      	ldr	r2, [pc, #332]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3318      	adds	r3, #24
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	589b      	ldr	r3, [r3, r2]
 8000fe0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	220f      	movs	r2, #15
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x1e2>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <HAL_GPIO_Init+0x2d4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x1de>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a47      	ldr	r2, [pc, #284]	; (800112c <HAL_GPIO_Init+0x2d8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x1da>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a46      	ldr	r2, [pc, #280]	; (8001130 <HAL_GPIO_Init+0x2dc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x1d6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a45      	ldr	r2, [pc, #276]	; (8001134 <HAL_GPIO_Init+0x2e0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x1d2>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001026:	2306      	movs	r3, #6
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x1e4>
 8001036:	2300      	movs	r3, #0
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	2103      	movs	r1, #3
 800103c:	400a      	ands	r2, r1
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	4093      	lsls	r3, r2
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001048:	4936      	ldr	r1, [pc, #216]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001056:	4a33      	ldr	r2, [pc, #204]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	58d3      	ldr	r3, [r2, r3]
 800105c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	4013      	ands	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800107c:	4929      	ldr	r1, [pc, #164]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8001086:	2384      	movs	r3, #132	; 0x84
 8001088:	58d3      	ldr	r3, [r2, r3]
 800108a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4013      	ands	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	029b      	lsls	r3, r3, #10
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80010aa:	491e      	ldr	r1, [pc, #120]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 80010ac:	2284      	movs	r2, #132	; 0x84
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43da      	mvns	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4013      	ands	r3, r2
 80010c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	035b      	lsls	r3, r3, #13
 80010ca:	4013      	ands	r3, r2
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	039b      	lsls	r3, r3, #14
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_GPIO_Init+0x2d0>)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	3301      	adds	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	40da      	lsrs	r2, r3
 8001114:	1e13      	subs	r3, r2, #0
 8001116:	d000      	beq.n	800111a <HAL_GPIO_Init+0x2c6>
 8001118:	e6a4      	b.n	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b006      	add	sp, #24
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021800 	.word	0x40021800
 8001128:	50000400 	.word	0x50000400
 800112c:	50000800 	.word	0x50000800
 8001130:	50000c00 	.word	0x50000c00
 8001134:	50001400 	.word	0x50001400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	0008      	movs	r0, r1
 8001142:	0011      	movs	r1, r2
 8001144:	1cbb      	adds	r3, r7, #2
 8001146:	1c02      	adds	r2, r0, #0
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	1c7b      	adds	r3, r7, #1
 800114c:	1c0a      	adds	r2, r1, #0
 800114e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001150:	1c7b      	adds	r3, r7, #1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d004      	beq.n	8001162 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001158:	1cbb      	adds	r3, r7, #2
 800115a:	881a      	ldrh	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001162:	1cbb      	adds	r3, r7, #2
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	1dba      	adds	r2, r7, #6
 8001186:	8812      	ldrh	r2, [r2, #0]
 8001188:	4013      	ands	r3, r2
 800118a:	d008      	beq.n	800119e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800118e:	1dba      	adds	r2, r7, #6
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	0018      	movs	r0, r3
 800119a:	f000 f815 	bl	80011c8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	1dba      	adds	r2, r7, #6
 80011a4:	8812      	ldrh	r2, [r2, #0]
 80011a6:	4013      	ands	r3, r2
 80011a8:	d008      	beq.n	80011bc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80011ac:	1dba      	adds	r2, r7, #6
 80011ae:	8812      	ldrh	r2, [r2, #0]
 80011b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80011b2:	1dbb      	adds	r3, r7, #6
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f810 	bl	80011dc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021800 	.word	0x40021800

080011c8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0002      	movs	r2, r0
 80011e4:	1dbb      	adds	r3, r7, #6
 80011e6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e08f      	b.n	8001322 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2241      	movs	r2, #65	; 0x41
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d107      	bne.n	800121e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	2100      	movs	r1, #0
 8001214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fa23 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2241      	movs	r2, #65	; 0x41
 8001222:	2124      	movs	r1, #36	; 0x24
 8001224:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	493b      	ldr	r1, [pc, #236]	; (800132c <HAL_I2C_Init+0x13c>)
 8001240:	400a      	ands	r2, r1
 8001242:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4938      	ldr	r1, [pc, #224]	; (8001330 <HAL_I2C_Init+0x140>)
 8001250:	400a      	ands	r2, r1
 8001252:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	0209      	lsls	r1, r1, #8
 8001268:	430a      	orrs	r2, r1
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e007      	b.n	800127e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2184      	movs	r1, #132	; 0x84
 8001278:	0209      	lsls	r1, r1, #8
 800127a:	430a      	orrs	r2, r1
 800127c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d109      	bne.n	800129a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0109      	lsls	r1, r1, #4
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	e007      	b.n	80012aa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4923      	ldr	r1, [pc, #140]	; (8001334 <HAL_I2C_Init+0x144>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4920      	ldr	r1, [pc, #128]	; (8001338 <HAL_I2C_Init+0x148>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	491a      	ldr	r1, [pc, #104]	; (8001330 <HAL_I2C_Init+0x140>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69d9      	ldr	r1, [r3, #28]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2241      	movs	r2, #65	; 0x41
 800130e:	2120      	movs	r1, #32
 8001310:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2242      	movs	r2, #66	; 0x42
 800131c:	2100      	movs	r1, #0
 800131e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	f0ffffff 	.word	0xf0ffffff
 8001330:	ffff7fff 	.word	0xffff7fff
 8001334:	fffff7ff 	.word	0xfffff7ff
 8001338:	02008000 	.word	0x02008000

0800133c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	000c      	movs	r4, r1
 8001346:	0010      	movs	r0, r2
 8001348:	0019      	movs	r1, r3
 800134a:	230a      	movs	r3, #10
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	1c22      	adds	r2, r4, #0
 8001350:	801a      	strh	r2, [r3, #0]
 8001352:	2308      	movs	r3, #8
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	801a      	strh	r2, [r3, #0]
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	1c0a      	adds	r2, r1, #0
 800135e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2241      	movs	r2, #65	; 0x41
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b20      	cmp	r3, #32
 800136a:	d000      	beq.n	800136e <HAL_I2C_Mem_Write+0x32>
 800136c:	e10c      	b.n	8001588 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <HAL_I2C_Mem_Write+0x42>
 8001374:	232c      	movs	r3, #44	; 0x2c
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0ff      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_I2C_Mem_Write+0x5c>
 8001394:	2302      	movs	r3, #2
 8001396:	e0f8      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	2101      	movs	r1, #1
 800139e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a0:	f7ff fb70 	bl	8000a84 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	0219      	lsls	r1, r3, #8
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2319      	movs	r3, #25
 80013b4:	2201      	movs	r2, #1
 80013b6:	f000 fb0b 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0e3      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2241      	movs	r2, #65	; 0x41
 80013c6:	2121      	movs	r1, #33	; 0x21
 80013c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2242      	movs	r2, #66	; 0x42
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	222c      	movs	r2, #44	; 0x2c
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	881c      	ldrh	r4, [r3, #0]
 80013f2:	2308      	movs	r3, #8
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	881a      	ldrh	r2, [r3, #0]
 80013f8:	230a      	movs	r3, #10
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	8819      	ldrh	r1, [r3, #0]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	0023      	movs	r3, r4
 800140a:	f000 f9f9 	bl	8001800 <I2C_RequestMemoryWrite>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d005      	beq.n	800141e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0b5      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	2bff      	cmp	r3, #255	; 0xff
 8001426:	d911      	bls.n	800144c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	b2da      	uxtb	r2, r3
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	045c      	lsls	r4, r3, #17
 8001438:	230a      	movs	r3, #10
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	8819      	ldrh	r1, [r3, #0]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	0023      	movs	r3, r4
 8001446:	f000 fc9b 	bl	8001d80 <I2C_TransferConfig>
 800144a:	e012      	b.n	8001472 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	049c      	lsls	r4, r3, #18
 8001460:	230a      	movs	r3, #10
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	8819      	ldrh	r1, [r3, #0]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	0023      	movs	r3, r4
 800146e:	f000 fc87 	bl	8001d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0018      	movs	r0, r3
 800147a:	f000 faf7 	bl	8001a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e081      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d03a      	beq.n	8001536 <HAL_I2C_Mem_Write+0x1fa>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d136      	bne.n	8001536 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0013      	movs	r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	f000 fa7b 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e053      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d911      	bls.n	8001510 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	045c      	lsls	r4, r3, #17
 80014fc:	230a      	movs	r3, #10
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	8819      	ldrh	r1, [r3, #0]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	0023      	movs	r3, r4
 800150a:	f000 fc39 	bl	8001d80 <I2C_TransferConfig>
 800150e:	e012      	b.n	8001536 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	b2da      	uxtb	r2, r3
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	049c      	lsls	r4, r3, #18
 8001524:	230a      	movs	r3, #10
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	8819      	ldrh	r1, [r3, #0]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	0023      	movs	r3, r4
 8001532:	f000 fc25 	bl	8001d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d198      	bne.n	8001472 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fad6 	bl	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800154c:	1e03      	subs	r3, r0, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e01a      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2220      	movs	r2, #32
 800155a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	490b      	ldr	r1, [pc, #44]	; (8001594 <HAL_I2C_Mem_Write+0x258>)
 8001568:	400a      	ands	r2, r1
 800156a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2241      	movs	r2, #65	; 0x41
 8001570:	2120      	movs	r1, #32
 8001572:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2242      	movs	r2, #66	; 0x42
 8001578:	2100      	movs	r1, #0
 800157a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	2100      	movs	r1, #0
 8001582:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	e000      	b.n	800158a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001588:	2302      	movs	r3, #2
  }
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b007      	add	sp, #28
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	fe00e800 	.word	0xfe00e800

08001598 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	000c      	movs	r4, r1
 80015a2:	0010      	movs	r0, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	230a      	movs	r3, #10
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	1c22      	adds	r2, r4, #0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	2308      	movs	r3, #8
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	1c02      	adds	r2, r0, #0
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	1dbb      	adds	r3, r7, #6
 80015b8:	1c0a      	adds	r2, r1, #0
 80015ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2241      	movs	r2, #65	; 0x41
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d000      	beq.n	80015ca <HAL_I2C_Mem_Read+0x32>
 80015c8:	e110      	b.n	80017ec <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_I2C_Mem_Read+0x42>
 80015d0:	232c      	movs	r3, #44	; 0x2c
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e103      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2240      	movs	r2, #64	; 0x40
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_I2C_Mem_Read+0x5c>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0fc      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	2101      	movs	r1, #1
 80015fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015fc:	f7ff fa42 	bl	8000a84 <HAL_GetTick>
 8001600:	0003      	movs	r3, r0
 8001602:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	0219      	lsls	r1, r3, #8
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2319      	movs	r3, #25
 8001610:	2201      	movs	r2, #1
 8001612:	f000 f9dd 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0e7      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2241      	movs	r2, #65	; 0x41
 8001622:	2122      	movs	r1, #34	; 0x22
 8001624:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2242      	movs	r2, #66	; 0x42
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	222c      	movs	r2, #44	; 0x2c
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	8812      	ldrh	r2, [r2, #0]
 8001642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	881c      	ldrh	r4, [r3, #0]
 800164e:	2308      	movs	r3, #8
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	230a      	movs	r3, #10
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	0023      	movs	r3, r4
 8001666:	f000 f92f 	bl	80018c8 <I2C_RequestMemoryRead>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d005      	beq.n	800167a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0b9      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d911      	bls.n	80016a8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	b2da      	uxtb	r2, r3
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	045c      	lsls	r4, r3, #17
 8001694:	230a      	movs	r3, #10
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <HAL_I2C_Mem_Read+0x260>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	0023      	movs	r3, r4
 80016a2:	f000 fb6d 	bl	8001d80 <I2C_TransferConfig>
 80016a6:	e012      	b.n	80016ce <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	049c      	lsls	r4, r3, #18
 80016bc:	230a      	movs	r3, #10
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	8819      	ldrh	r1, [r3, #0]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_I2C_Mem_Read+0x260>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	0023      	movs	r3, r4
 80016ca:	f000 fb59 	bl	8001d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	0013      	movs	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	2104      	movs	r1, #4
 80016dc:	f000 f978 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e082      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d03a      	beq.n	800179a <HAL_I2C_Mem_Read+0x202>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d136      	bne.n	800179a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0013      	movs	r3, r2
 8001736:	2200      	movs	r2, #0
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	f000 f949 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e053      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d911      	bls.n	8001774 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	b2da      	uxtb	r2, r3
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	045c      	lsls	r4, r3, #17
 8001760:	230a      	movs	r3, #10
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 fb07 	bl	8001d80 <I2C_TransferConfig>
 8001772:	e012      	b.n	800179a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	049c      	lsls	r4, r3, #18
 8001788:	230a      	movs	r3, #10
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	8819      	ldrh	r1, [r3, #0]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	0023      	movs	r3, r4
 8001796:	f000 faf3 	bl	8001d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d194      	bne.n	80016ce <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f9a4 	bl	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b0:	1e03      	subs	r3, r0, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01a      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2220      	movs	r2, #32
 80017be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <HAL_I2C_Mem_Read+0x264>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2241      	movs	r2, #65	; 0x41
 80017d4:	2120      	movs	r1, #32
 80017d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2242      	movs	r2, #66	; 0x42
 80017dc:	2100      	movs	r1, #0
 80017de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
  }
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b007      	add	sp, #28
 80017f4:	bd90      	pop	{r4, r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	80002400 	.word	0x80002400
 80017fc:	fe00e800 	.word	0xfe00e800

08001800 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	000c      	movs	r4, r1
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	250a      	movs	r5, #10
 8001810:	197b      	adds	r3, r7, r5
 8001812:	1c22      	adds	r2, r4, #0
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	2308      	movs	r3, #8
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	1c02      	adds	r2, r0, #0
 800181c:	801a      	strh	r2, [r3, #0]
 800181e:	1dbb      	adds	r3, r7, #6
 8001820:	1c0a      	adds	r2, r1, #0
 8001822:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	045c      	lsls	r4, r3, #17
 800182e:	197b      	adds	r3, r7, r5
 8001830:	8819      	ldrh	r1, [r3, #0]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <I2C_RequestMemoryWrite+0xc4>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	0023      	movs	r3, r4
 800183a:	f000 faa1 	bl	8001d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	0018      	movs	r0, r3
 8001846:	f000 f911 	bl	8001a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e033      	b.n	80018ba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001852:	1dbb      	adds	r3, r7, #6
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800185a:	2308      	movs	r3, #8
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
 8001868:	e019      	b.n	800189e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800186a:	2308      	movs	r3, #8
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	6a39      	ldr	r1, [r7, #32]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0018      	movs	r0, r3
 8001884:	f000 f8f2 	bl	8001a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d001      	beq.n	8001890 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e014      	b.n	80018ba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001890:	2308      	movs	r3, #8
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800189e:	6a3a      	ldr	r2, [r7, #32]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	0013      	movs	r3, r2
 80018a8:	2200      	movs	r2, #0
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	f000 f890 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bdb0      	pop	{r4, r5, r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	80002000 	.word	0x80002000

080018c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	000c      	movs	r4, r1
 80018d2:	0010      	movs	r0, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	250a      	movs	r5, #10
 80018d8:	197b      	adds	r3, r7, r5
 80018da:	1c22      	adds	r2, r4, #0
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	2308      	movs	r3, #8
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	1dbb      	adds	r3, r7, #6
 80018e8:	1c0a      	adds	r2, r1, #0
 80018ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018ec:	1dbb      	adds	r3, r7, #6
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	197b      	adds	r3, r7, r5
 80018f4:	8819      	ldrh	r1, [r3, #0]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <I2C_RequestMemoryRead+0xc0>)
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	f000 fa3f 	bl	8001d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001904:	6a39      	ldr	r1, [r7, #32]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f8af 	bl	8001a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e033      	b.n	800197e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800191e:	2308      	movs	r3, #8
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
 800192c:	e019      	b.n	8001962 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800192e:	2308      	movs	r3, #8
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b29b      	uxth	r3, r3
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	6a39      	ldr	r1, [r7, #32]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	0018      	movs	r0, r3
 8001948:	f000 f890 	bl	8001a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e014      	b.n	800197e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001954:	2308      	movs	r3, #8
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	0013      	movs	r3, r2
 800196c:	2200      	movs	r2, #0
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	f000 f82e 	bl	80019d0 <I2C_WaitOnFlagUntilTimeout>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	80002000 	.word	0x80002000

0800198c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d103      	bne.n	80019aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d007      	beq.n	80019c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2101      	movs	r1, #1
 80019c4:	430a      	orrs	r2, r1
 80019c6:	619a      	str	r2, [r3, #24]
  }
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	1dfb      	adds	r3, r7, #7
 80019de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e0:	e030      	b.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	d02d      	beq.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e8:	f7ff f84c 	bl	8000a84 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d302      	bcc.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d122      	bne.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4013      	ands	r3, r2
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	425a      	negs	r2, r3
 8001a0e:	4153      	adcs	r3, r2
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	001a      	movs	r2, r3
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d113      	bne.n	8001a44 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	2220      	movs	r2, #32
 8001a22:	431a      	orrs	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2241      	movs	r2, #65	; 0x41
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2242      	movs	r2, #66	; 0x42
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00f      	b.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	425a      	negs	r2, r3
 8001a54:	4153      	adcs	r3, r2
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	001a      	movs	r2, r3
 8001a5a:	1dfb      	adds	r3, r7, #7
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d0bf      	beq.n	80019e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a78:	e032      	b.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 f87d 	bl	8001b80 <I2C_IsErrorOccurred>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e030      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	d025      	beq.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a94:	f7fe fff6 	bl	8000a84 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d302      	bcc.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11a      	bne.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d013      	beq.n	8001ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	2220      	movs	r2, #32
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2241      	movs	r2, #65	; 0x41
 8001ac8:	2120      	movs	r1, #32
 8001aca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2242      	movs	r2, #66	; 0x42
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	2100      	movs	r1, #0
 8001ada:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e007      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d1c5      	bne.n	8001a7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	0018      	movs	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	e02f      	b.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f837 	bl	8001b80 <I2C_IsErrorOccurred>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e02d      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7fe ffb3 	bl	8000a84 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11a      	bne.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2220      	movs	r2, #32
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	d013      	beq.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	2220      	movs	r2, #32
 8001b44:	431a      	orrs	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2241      	movs	r2, #65	; 0x41
 8001b4e:	2120      	movs	r1, #32
 8001b50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2242      	movs	r2, #66	; 0x42
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d1c8      	bne.n	8001b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08b      	sub	sp, #44	; 0x2c
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2327      	movs	r3, #39	; 0x27
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d100      	bne.n	8001bae <I2C_IsErrorOccurred+0x2e>
 8001bac:	e082      	b.n	8001cb4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bb6:	e060      	b.n	8001c7a <I2C_IsErrorOccurred+0xfa>
 8001bb8:	2427      	movs	r4, #39	; 0x27
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	193a      	adds	r2, r7, r4
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	d058      	beq.n	8001c7a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc8:	f7fe ff5c 	bl	8000a84 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d306      	bcc.n	8001be6 <I2C_IsErrorOccurred+0x66>
 8001bd8:	193b      	adds	r3, r7, r4
 8001bda:	193a      	adds	r2, r7, r4
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d149      	bne.n	8001c7a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	01db      	lsls	r3, r3, #7
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bf4:	2013      	movs	r0, #19
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	2142      	movs	r1, #66	; 0x42
 8001bfc:	5c52      	ldrb	r2, [r2, r1]
 8001bfe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d126      	bne.n	8001c62 <I2C_IsErrorOccurred+0xe2>
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	01db      	lsls	r3, r3, #7
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d021      	beq.n	8001c62 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d01d      	beq.n	8001c62 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	01c9      	lsls	r1, r1, #7
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c38:	f7fe ff24 	bl	8000a84 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c40:	e00f      	b.n	8001c62 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c42:	f7fe ff1f 	bl	8000a84 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b19      	cmp	r3, #25
 8001c4e:	d908      	bls.n	8001c62 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	2220      	movs	r2, #32
 8001c54:	4313      	orrs	r3, r2
 8001c56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c58:	2327      	movs	r3, #39	; 0x27
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]

              break;
 8001c60:	e00b      	b.n	8001c7a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2127      	movs	r1, #39	; 0x27
 8001c6e:	187a      	adds	r2, r7, r1
 8001c70:	1879      	adds	r1, r7, r1
 8001c72:	7809      	ldrb	r1, [r1, #0]
 8001c74:	7011      	strb	r1, [r2, #0]
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d1e3      	bne.n	8001c42 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2220      	movs	r2, #32
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d004      	beq.n	8001c92 <I2C_IsErrorOccurred+0x112>
 8001c88:	2327      	movs	r3, #39	; 0x27
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d092      	beq.n	8001bb8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c92:	2327      	movs	r3, #39	; 0x27
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cac:	2327      	movs	r3, #39	; 0x27
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d00c      	beq.n	8001ce0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cd8:	2327      	movs	r3, #39	; 0x27
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00c      	beq.n	8001d04 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	2208      	movs	r2, #8
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	00d2      	lsls	r2, r2, #3
 8001cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfc:	2327      	movs	r3, #39	; 0x27
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d00c      	beq.n	8001d28 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2202      	movs	r2, #2
 8001d12:	4313      	orrs	r3, r2
 8001d14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d20:	2327      	movs	r3, #39	; 0x27
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d28:	2327      	movs	r3, #39	; 0x27
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01d      	beq.n	8001d6e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7ff fe29 	bl	800198c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	490d      	ldr	r1, [pc, #52]	; (8001d7c <I2C_IsErrorOccurred+0x1fc>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2241      	movs	r2, #65	; 0x41
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2242      	movs	r2, #66	; 0x42
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d6e:	2327      	movs	r3, #39	; 0x27
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b00b      	add	sp, #44	; 0x2c
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	fe00e800 	.word	0xfe00e800

08001d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	0008      	movs	r0, r1
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	240a      	movs	r4, #10
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	1c02      	adds	r2, r0, #0
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	2009      	movs	r0, #9
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	1c0a      	adds	r2, r1, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	059b      	lsls	r3, r3, #22
 8001da4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	0419      	lsls	r1, r3, #16
 8001dac:	23ff      	movs	r3, #255	; 0xff
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dca:	0d51      	lsrs	r1, r2, #21
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	00d2      	lsls	r2, r2, #3
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	4907      	ldr	r1, [pc, #28]	; (8001df0 <I2C_TransferConfig+0x70>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	43d2      	mvns	r2, r2
 8001dd8:	401a      	ands	r2, r3
 8001dda:	0011      	movs	r1, r2
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b007      	add	sp, #28
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	03ff63ff 	.word	0x03ff63ff

08001df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	; 0x41
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d138      	bne.n	8001e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e032      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2241      	movs	r2, #65	; 0x41
 8001e24:	2124      	movs	r1, #36	; 0x24
 8001e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4911      	ldr	r1, [pc, #68]	; (8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2241      	movs	r2, #65	; 0x41
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	ffffefff 	.word	0xffffefff

08001e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2241      	movs	r2, #65	; 0x41
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d139      	bne.n	8001f16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e033      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2241      	movs	r2, #65	; 0x41
 8001ebc:	2124      	movs	r1, #36	; 0x24
 8001ebe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	; 0x41
 8001f06:	2120      	movs	r1, #32
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	fffff0ff 	.word	0xfffff0ff

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1d0      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1e>
 8001f40:	e069      	b.n	8002016 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4bc8      	ldr	r3, [pc, #800]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d15d      	bne.n	8002016 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1bc      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_OscConfig+0x56>
 8001f6a:	4bbe      	ldr	r3, [pc, #760]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4bbd      	ldr	r3, [pc, #756]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	0249      	lsls	r1, r1, #9
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e020      	b.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	23a0      	movs	r3, #160	; 0xa0
 8001f80:	02db      	lsls	r3, r3, #11
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d10e      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x80>
 8001f86:	4bb7      	ldr	r3, [pc, #732]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4bb6      	ldr	r3, [pc, #728]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	02c9      	lsls	r1, r1, #11
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4bb3      	ldr	r3, [pc, #716]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4bb2      	ldr	r3, [pc, #712]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0249      	lsls	r1, r1, #9
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x98>
 8001fa4:	4baf      	ldr	r3, [pc, #700]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4bae      	ldr	r3, [pc, #696]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001faa:	49af      	ldr	r1, [pc, #700]	; (8002268 <HAL_RCC_OscConfig+0x344>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4bac      	ldr	r3, [pc, #688]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4bab      	ldr	r3, [pc, #684]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fb6:	49ad      	ldr	r1, [pc, #692]	; (800226c <HAL_RCC_OscConfig+0x348>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d014      	beq.n	8001fee <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fd5e 	bl	8000a84 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fce:	f7fe fd59 	bl	8000a84 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	; 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e17b      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe0:	4ba0      	ldr	r3, [pc, #640]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0xaa>
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fd49 	bl	8000a84 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fd44 	bl	8000a84 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e166      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800200a:	4b96      	ldr	r3, [pc, #600]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d100      	bne.n	8002022 <HAL_RCC_OscConfig+0xfe>
 8002020:	e086      	b.n	8002130 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b90      	ldr	r3, [pc, #576]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2238      	movs	r2, #56	; 0x38
 8002028:	4013      	ands	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12f      	bne.n	8002092 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e14c      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b89      	ldr	r3, [pc, #548]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a8b      	ldr	r2, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x34c>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	021a      	lsls	r2, r3, #8
 800204e:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d112      	bne.n	8002080 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a85      	ldr	r2, [pc, #532]	; (8002274 <HAL_RCC_OscConfig+0x350>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	4b7e      	ldr	r3, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0adb      	lsrs	r3, r3, #11
 8002074:	2207      	movs	r2, #7
 8002076:	4013      	ands	r3, r2
 8002078:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x354>)
 800207a:	40da      	lsrs	r2, r3
 800207c:	4b7f      	ldr	r3, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x358>)
 800207e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x35c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0018      	movs	r0, r3
 8002086:	f7fe fca1 	bl	80009cc <HAL_InitTick>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d050      	beq.n	8002130 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e122      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a75      	ldr	r2, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x350>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b6e      	ldr	r3, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0049      	lsls	r1, r1, #1
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fce2 	bl	8000a84 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020c6:	f7fe fcdd 	bl	8000a84 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0ff      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d8:	4b62      	ldr	r3, [pc, #392]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_RCC_OscConfig+0x34c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e019      	b.n	8002130 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b58      	ldr	r3, [pc, #352]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002102:	4960      	ldr	r1, [pc, #384]	; (8002284 <HAL_RCC_OscConfig+0x360>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fcbc 	bl	8000a84 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002112:	f7fe fcb7 	bl	8000a84 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0d9      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4013      	ands	r3, r2
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2208      	movs	r2, #8
 8002136:	4013      	ands	r3, r2
 8002138:	d042      	beq.n	80021c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2238      	movs	r2, #56	; 0x38
 8002140:	4013      	ands	r3, r2
 8002142:	2b18      	cmp	r3, #24
 8002144:	d105      	bne.n	8002152 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d138      	bne.n	80021c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0c2      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d019      	beq.n	800218e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800215c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002160:	2101      	movs	r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fc8d 	bl	8000a84 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002170:	f7fe fc88 	bl	8000a84 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0aa      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	2202      	movs	r2, #2
 8002188:	4013      	ands	r3, r2
 800218a:	d0f1      	beq.n	8002170 <HAL_RCC_OscConfig+0x24c>
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800218e:	4b35      	ldr	r3, [pc, #212]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002194:	2101      	movs	r1, #1
 8002196:	438a      	bics	r2, r1
 8002198:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fc73 	bl	8000a84 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021a4:	f7fe fc6e 	bl	8000a84 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e090      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d1f1      	bne.n	80021a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	d100      	bne.n	80021cc <HAL_RCC_OscConfig+0x2a8>
 80021ca:	e084      	b.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2238      	movs	r2, #56	; 0x38
 80021da:	4013      	ands	r3, r2
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d000      	beq.n	80021ea <HAL_RCC_OscConfig+0x2c6>
 80021e8:	e075      	b.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e074      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_OscConfig+0x2e0>
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	65da      	str	r2, [r3, #92]	; 0x5c
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x31a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x302>
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800220e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002212:	2104      	movs	r1, #4
 8002214:	430a      	orrs	r2, r1
 8002216:	65da      	str	r2, [r3, #92]	; 0x5c
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800221a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x31a>
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_OscConfig+0x340>)
 8002238:	2104      	movs	r1, #4
 800223a:	438a      	bics	r2, r1
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fc1d 	bl	8000a84 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe fc18 	bl	8000a84 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_RCC_OscConfig+0x364>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d915      	bls.n	800228c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e039      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
 8002264:	40021000 	.word	0x40021000
 8002268:	fffeffff 	.word	0xfffeffff
 800226c:	fffbffff 	.word	0xfffbffff
 8002270:	ffff80ff 	.word	0xffff80ff
 8002274:	ffffc7ff 	.word	0xffffc7ff
 8002278:	02dc6c00 	.word	0x02dc6c00
 800227c:	20000084 	.word	0x20000084
 8002280:	20000088 	.word	0x20000088
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d0dc      	beq.n	8002250 <HAL_RCC_OscConfig+0x32c>
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fbf4 	bl	8000a84 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fbef 	bl	8000a84 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x3c0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e010      	b.n	80022d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_RCC_OscConfig+0x3bc>)
 80022d0:	4905      	ldr	r1, [pc, #20]	; (80022e8 <HAL_RCC_OscConfig+0x3c4>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	00001388 	.word	0x00001388
 80022e8:	efffffff 	.word	0xefffffff

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0e9      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2207      	movs	r2, #7
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d91e      	bls.n	800234c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2207      	movs	r2, #7
 8002314:	4393      	bics	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	4b70      	ldr	r3, [pc, #448]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002320:	f7fe fbb0 	bl	8000a84 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002328:	e009      	b.n	800233e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800232a:	f7fe fbab 	bl	8000a84 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0ca      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d1ee      	bne.n	800232a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d017      	beq.n	8002386 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2204      	movs	r2, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002360:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a60      	ldr	r2, [pc, #384]	; (80024e8 <HAL_RCC_ClockConfig+0x1fc>)
 8002366:	401a      	ands	r2, r3
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	21b0      	movs	r1, #176	; 0xb0
 800236c:	0109      	lsls	r1, r1, #4
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_RCC_ClockConfig+0x200>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d055      	beq.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002390:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	221c      	movs	r2, #28
 8002396:	4393      	bics	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b51      	ldr	r3, [pc, #324]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d11f      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e08b      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c4:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d113      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e07f      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d106      	bne.n	80023ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d108      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e074      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023ea:	4b3e      	ldr	r3, [pc, #248]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e06d      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f8:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2207      	movs	r2, #7
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7fe fb3a 	bl	8000a84 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002414:	e009      	b.n	800242a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002416:	f7fe fb35 	bl	8000a84 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e054      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2238      	movs	r2, #56	; 0x38
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ec      	bne.n	8002416 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2207      	movs	r2, #7
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d21e      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2207      	movs	r2, #7
 8002450:	4393      	bics	r3, r2
 8002452:	0019      	movs	r1, r3
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245c:	f7fe fb12 	bl	8000a84 <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002464:	e009      	b.n	800247a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002466:	f7fe fb0d 	bl	8000a84 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_RCC_ClockConfig+0x1f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e02c      	b.n	80024d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2207      	movs	r2, #7
 8002480:	4013      	ands	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2204      	movs	r2, #4
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x204>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024a6:	f000 f82b 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024aa:	0001      	movs	r1, r0
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_RCC_ClockConfig+0x1f8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	220f      	movs	r2, #15
 80024b4:	401a      	ands	r2, r3
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_RCC_ClockConfig+0x208>)
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	58d3      	ldr	r3, [r2, r3]
 80024bc:	221f      	movs	r2, #31
 80024be:	4013      	ands	r3, r2
 80024c0:	000a      	movs	r2, r1
 80024c2:	40da      	lsrs	r2, r3
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_ClockConfig+0x20c>)
 80024c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_ClockConfig+0x210>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe fa7d 	bl	80009cc <HAL_InitTick>
 80024d2:	0003      	movs	r3, r0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40022000 	.word	0x40022000
 80024e0:	00001388 	.word	0x00001388
 80024e4:	40021000 	.word	0x40021000
 80024e8:	ffff84ff 	.word	0xffff84ff
 80024ec:	fffff0ff 	.word	0xfffff0ff
 80024f0:	ffff8fff 	.word	0xffff8fff
 80024f4:	08004368 	.word	0x08004368
 80024f8:	20000084 	.word	0x20000084
 80024fc:	20000088 	.word	0x20000088

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2238      	movs	r2, #56	; 0x38
 800250c:	4013      	ands	r3, r2
 800250e:	d10f      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0adb      	lsrs	r3, r3, #11
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	4815      	ldr	r0, [pc, #84]	; (800257c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002526:	f7fd fdf9 	bl	800011c <__udivsi3>
 800252a:	0003      	movs	r3, r0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e01e      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2238      	movs	r2, #56	; 0x38
 8002536:	4013      	ands	r3, r2
 8002538:	2b08      	cmp	r3, #8
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_GetSysClockFreq+0x7c>)
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	e015      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	2b20      	cmp	r3, #32
 800254c:	d103      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e00b      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_RCC_GetSysClockFreq+0x78>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2238      	movs	r2, #56	; 0x38
 800255c:	4013      	ands	r3, r2
 800255e:	2b18      	cmp	r3, #24
 8002560:	d103      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002562:	23fa      	movs	r3, #250	; 0xfa
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	e001      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	02dc6c00 	.word	0x02dc6c00

08002580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_RCC_GetHCLKFreq+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	20000084 	.word	0x20000084

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002598:	f7ff fff2 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 800259c:	0001      	movs	r1, r0
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0b1b      	lsrs	r3, r3, #12
 80025a4:	2207      	movs	r2, #7
 80025a6:	401a      	ands	r2, r3
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80025aa:	0092      	lsls	r2, r2, #2
 80025ac:	58d3      	ldr	r3, [r2, r3]
 80025ae:	221f      	movs	r2, #31
 80025b0:	4013      	ands	r3, r2
 80025b2:	40d9      	lsrs	r1, r3
 80025b4:	000b      	movs	r3, r1
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	080043a8 	.word	0x080043a8

080025c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025cc:	2313      	movs	r3, #19
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d4:	2312      	movs	r3, #18
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	4013      	ands	r3, r2
 80025e6:	d100      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025e8:	e079      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2011      	movs	r0, #17
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b64      	ldr	r3, [pc, #400]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	055b      	lsls	r3, r3, #21
 80025fa:	4013      	ands	r3, r2
 80025fc:	d110      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002602:	4b60      	ldr	r3, [pc, #384]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0549      	lsls	r1, r1, #21
 8002608:	430a      	orrs	r2, r1
 800260a:	63da      	str	r2, [r3, #60]	; 0x3c
 800260c:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800260e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	055b      	lsls	r3, r3, #21
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	183b      	adds	r3, r7, r0
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002620:	4b58      	ldr	r3, [pc, #352]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4013      	ands	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d014      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002640:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002642:	4013      	ands	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0249      	lsls	r1, r1, #9
 8002650:	430a      	orrs	r2, r1
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002654:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800265a:	494c      	ldr	r1, [pc, #304]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800265c:	400a      	ands	r2, r1
 800265e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002660:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	d016      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fa09 	bl	8000a84 <HAL_GetTick>
 8002672:	0003      	movs	r3, r0
 8002674:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002676:	e00c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002678:	f7fe fa04 	bl	8000a84 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	4a43      	ldr	r2, [pc, #268]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d904      	bls.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002688:	2313      	movs	r3, #19
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2203      	movs	r2, #3
 800268e:	701a      	strb	r2, [r3, #0]
          break;
 8002690:	e004      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2202      	movs	r2, #2
 8002698:	4013      	ands	r3, r2
 800269a:	d0ed      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800269c:	2313      	movs	r3, #19
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	4a37      	ldr	r2, [pc, #220]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b6:	430a      	orrs	r2, r1
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ba:	e005      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026bc:	2312      	movs	r3, #18
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2213      	movs	r2, #19
 80026c2:	18ba      	adds	r2, r7, r2
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026c8:	2311      	movs	r3, #17
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d8:	492e      	ldr	r1, [pc, #184]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026da:	400a      	ands	r2, r1
 80026dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e8:	4b26      	ldr	r3, [pc, #152]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2203      	movs	r2, #3
 80026ee:	4393      	bics	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2240      	movs	r2, #64	; 0x40
 8002702:	4013      	ands	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002716:	430a      	orrs	r2, r1
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	01db      	lsls	r3, r3, #7
 8002722:	4013      	ands	r3, r2
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	0899      	lsrs	r1, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002734:	430a      	orrs	r2, r1
 8002736:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4013      	ands	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800274a:	4013      	ands	r3, r2
 800274c:	0019      	movs	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002754:	430a      	orrs	r2, r1
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	da09      	bge.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	22e0      	movs	r2, #224	; 0xe0
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002774:	2312      	movs	r3, #18
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b006      	add	sp, #24
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40021000 	.word	0x40021000
 8002788:	fffffcff 	.word	0xfffffcff
 800278c:	fffeffff 	.word	0xfffeffff
 8002790:	00001388 	.word	0x00001388
 8002794:	efffffff 	.word	0xefffffff
 8002798:	ffffcfff 	.word	0xffffcfff
 800279c:	ffff3fff 	.word	0xffff3fff

080027a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e046      	b.n	8002840 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2288      	movs	r2, #136	; 0x88
 80027b6:	589b      	ldr	r3, [r3, r2]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2284      	movs	r2, #132	; 0x84
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fd ffae 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2288      	movs	r2, #136	; 0x88
 80027d0:	2124      	movs	r1, #36	; 0x24
 80027d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2101      	movs	r1, #1
 80027e0:	438a      	bics	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fa4e 	bl	8002c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 f8cc 	bl	8002994 <UART_SetConfig>
 80027fc:	0003      	movs	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e01c      	b.n	8002840 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	490d      	ldr	r1, [pc, #52]	; (8002848 <HAL_UART_Init+0xa8>)
 8002812:	400a      	ands	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	212a      	movs	r1, #42	; 0x2a
 8002822:	438a      	bics	r2, r1
 8002824:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fadd 	bl	8002df8 <UART_CheckIdleState>
 800283e:	0003      	movs	r3, r0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	ffffb7ff 	.word	0xffffb7ff

0800284c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2288      	movs	r2, #136	; 0x88
 8002860:	589b      	ldr	r3, [r3, r2]
 8002862:	2b20      	cmp	r3, #32
 8002864:	d000      	beq.n	8002868 <HAL_UART_Transmit+0x1c>
 8002866:	e090      	b.n	800298a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_UART_Transmit+0x2a>
 800286e:	1dbb      	adds	r3, r7, #6
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e088      	b.n	800298c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	429a      	cmp	r2, r3
 8002884:	d109      	bne.n	800289a <HAL_UART_Transmit+0x4e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d001      	beq.n	800289a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e078      	b.n	800298c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2290      	movs	r2, #144	; 0x90
 800289e:	2100      	movs	r1, #0
 80028a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2288      	movs	r2, #136	; 0x88
 80028a6:	2121      	movs	r1, #33	; 0x21
 80028a8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028aa:	f7fe f8eb 	bl	8000a84 <HAL_GetTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1dba      	adds	r2, r7, #6
 80028b6:	2154      	movs	r1, #84	; 0x54
 80028b8:	8812      	ldrh	r2, [r2, #0]
 80028ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1dba      	adds	r2, r7, #6
 80028c0:	2156      	movs	r1, #86	; 0x56
 80028c2:	8812      	ldrh	r2, [r2, #0]
 80028c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	015b      	lsls	r3, r3, #5
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d108      	bne.n	80028e4 <HAL_UART_Transmit+0x98>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e003      	b.n	80028ec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028ec:	e030      	b.n	8002950 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	0013      	movs	r3, r2
 80028f8:	2200      	movs	r2, #0
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	f000 fb26 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2288      	movs	r2, #136	; 0x88
 8002908:	2120      	movs	r1, #32
 800290a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e03d      	b.n	800298c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	001a      	movs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	05d2      	lsls	r2, r2, #23
 8002922:	0dd2      	lsrs	r2, r2, #23
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3302      	adds	r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e007      	b.n	800293e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3301      	adds	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2256      	movs	r2, #86	; 0x56
 8002942:	5a9b      	ldrh	r3, [r3, r2]
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b299      	uxth	r1, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2256      	movs	r2, #86	; 0x56
 800294e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2256      	movs	r2, #86	; 0x56
 8002954:	5a9b      	ldrh	r3, [r3, r2]
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1c8      	bne.n	80028ee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	0013      	movs	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	f000 faef 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2288      	movs	r2, #136	; 0x88
 8002976:	2120      	movs	r1, #32
 8002978:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e006      	b.n	800298c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2288      	movs	r2, #136	; 0x88
 8002982:	2120      	movs	r1, #32
 8002984:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	0018      	movs	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	b008      	add	sp, #32
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800299c:	231e      	movs	r3, #30
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4aab      	ldr	r2, [pc, #684]	; (8002c70 <UART_SetConfig+0x2dc>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4aa6      	ldr	r2, [pc, #664]	; (8002c74 <UART_SetConfig+0x2e0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a9d      	ldr	r2, [pc, #628]	; (8002c78 <UART_SetConfig+0x2e4>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	220f      	movs	r2, #15
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a93      	ldr	r2, [pc, #588]	; (8002c7c <UART_SetConfig+0x2e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d127      	bne.n	8002a82 <UART_SetConfig+0xee>
 8002a32:	4b93      	ldr	r3, [pc, #588]	; (8002c80 <UART_SetConfig+0x2ec>)
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d017      	beq.n	8002a6e <UART_SetConfig+0xda>
 8002a3e:	d81b      	bhi.n	8002a78 <UART_SetConfig+0xe4>
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d00a      	beq.n	8002a5a <UART_SetConfig+0xc6>
 8002a44:	d818      	bhi.n	8002a78 <UART_SetConfig+0xe4>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <UART_SetConfig+0xbc>
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d00a      	beq.n	8002a64 <UART_SetConfig+0xd0>
 8002a4e:	e013      	b.n	8002a78 <UART_SetConfig+0xe4>
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e021      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a5a:	231f      	movs	r3, #31
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2202      	movs	r2, #2
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	e01c      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2204      	movs	r2, #4
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e017      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a6e:	231f      	movs	r3, #31
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2208      	movs	r2, #8
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e012      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a78:	231f      	movs	r3, #31
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e00d      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7f      	ldr	r2, [pc, #508]	; (8002c84 <UART_SetConfig+0x2f0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d104      	bne.n	8002a96 <UART_SetConfig+0x102>
 8002a8c:	231f      	movs	r3, #31
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e003      	b.n	8002a9e <UART_SetConfig+0x10a>
 8002a96:	231f      	movs	r3, #31
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d000      	beq.n	8002aac <UART_SetConfig+0x118>
 8002aaa:	e06f      	b.n	8002b8c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002aac:	231f      	movs	r3, #31
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d01f      	beq.n	8002af6 <UART_SetConfig+0x162>
 8002ab6:	dc22      	bgt.n	8002afe <UART_SetConfig+0x16a>
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d017      	beq.n	8002aec <UART_SetConfig+0x158>
 8002abc:	dc1f      	bgt.n	8002afe <UART_SetConfig+0x16a>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x134>
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d005      	beq.n	8002ad2 <UART_SetConfig+0x13e>
 8002ac6:	e01a      	b.n	8002afe <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac8:	f7ff fd64 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002acc:	0003      	movs	r3, r0
 8002ace:	61bb      	str	r3, [r7, #24]
        break;
 8002ad0:	e01c      	b.n	8002b0c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002ad2:	4b6b      	ldr	r3, [pc, #428]	; (8002c80 <UART_SetConfig+0x2ec>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2207      	movs	r2, #7
 8002ada:	4013      	ands	r3, r2
 8002adc:	3301      	adds	r3, #1
 8002ade:	0019      	movs	r1, r3
 8002ae0:	4869      	ldr	r0, [pc, #420]	; (8002c88 <UART_SetConfig+0x2f4>)
 8002ae2:	f7fd fb1b 	bl	800011c <__udivsi3>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	61bb      	str	r3, [r7, #24]
        break;
 8002aea:	e00f      	b.n	8002b0c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aec:	f7ff fd08 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002af0:	0003      	movs	r3, r0
 8002af2:	61bb      	str	r3, [r7, #24]
        break;
 8002af4:	e00a      	b.n	8002b0c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	61bb      	str	r3, [r7, #24]
        break;
 8002afc:	e006      	b.n	8002b0c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b02:	231e      	movs	r3, #30
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
        break;
 8002b0a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d100      	bne.n	8002b14 <UART_SetConfig+0x180>
 8002b12:	e097      	b.n	8002c44 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <UART_SetConfig+0x2f8>)
 8002b1a:	0052      	lsls	r2, r2, #1
 8002b1c:	5ad3      	ldrh	r3, [r2, r3]
 8002b1e:	0019      	movs	r1, r3
 8002b20:	69b8      	ldr	r0, [r7, #24]
 8002b22:	f7fd fafb 	bl	800011c <__udivsi3>
 8002b26:	0003      	movs	r3, r0
 8002b28:	005a      	lsls	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	18d2      	adds	r2, r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0019      	movs	r1, r3
 8002b38:	0010      	movs	r0, r2
 8002b3a:	f7fd faef 	bl	800011c <__udivsi3>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d91c      	bls.n	8002b82 <UART_SetConfig+0x1ee>
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	025b      	lsls	r3, r3, #9
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d217      	bcs.n	8002b82 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	200e      	movs	r0, #14
 8002b58:	183b      	adds	r3, r7, r0
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2207      	movs	r2, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b299      	uxth	r1, r3
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	183a      	adds	r2, r7, r0
 8002b70:	8812      	ldrh	r2, [r2, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	183a      	adds	r2, r7, r0
 8002b7c:	8812      	ldrh	r2, [r2, #0]
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	e060      	b.n	8002c44 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b82:	231e      	movs	r3, #30
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e05b      	b.n	8002c44 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d01f      	beq.n	8002bd6 <UART_SetConfig+0x242>
 8002b96:	dc22      	bgt.n	8002bde <UART_SetConfig+0x24a>
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d017      	beq.n	8002bcc <UART_SetConfig+0x238>
 8002b9c:	dc1f      	bgt.n	8002bde <UART_SetConfig+0x24a>
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <UART_SetConfig+0x214>
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d005      	beq.n	8002bb2 <UART_SetConfig+0x21e>
 8002ba6:	e01a      	b.n	8002bde <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f7ff fcf4 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
        break;
 8002bb0:	e01c      	b.n	8002bec <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <UART_SetConfig+0x2ec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2207      	movs	r2, #7
 8002bba:	4013      	ands	r3, r2
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	4831      	ldr	r0, [pc, #196]	; (8002c88 <UART_SetConfig+0x2f4>)
 8002bc2:	f7fd faab 	bl	800011c <__udivsi3>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
        break;
 8002bca:	e00f      	b.n	8002bec <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bcc:	f7ff fc98 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	61bb      	str	r3, [r7, #24]
        break;
 8002bd4:	e00a      	b.n	8002bec <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	61bb      	str	r3, [r7, #24]
        break;
 8002bdc:	e006      	b.n	8002bec <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002be2:	231e      	movs	r3, #30
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
        break;
 8002bea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <UART_SetConfig+0x2f8>)
 8002bf8:	0052      	lsls	r2, r2, #1
 8002bfa:	5ad3      	ldrh	r3, [r2, r3]
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	69b8      	ldr	r0, [r7, #24]
 8002c00:	f7fd fa8c 	bl	800011c <__udivsi3>
 8002c04:	0003      	movs	r3, r0
 8002c06:	001a      	movs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	18d2      	adds	r2, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0019      	movs	r1, r3
 8002c16:	0010      	movs	r0, r2
 8002c18:	f7fd fa80 	bl	800011c <__udivsi3>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	d90a      	bls.n	8002c3c <UART_SetConfig+0x2a8>
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d205      	bcs.n	8002c3c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e003      	b.n	8002c44 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c3c:	231e      	movs	r3, #30
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	226a      	movs	r2, #106	; 0x6a
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2268      	movs	r2, #104	; 0x68
 8002c50:	2101      	movs	r1, #1
 8002c52:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002c60:	231e      	movs	r3, #30
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b008      	add	sp, #32
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	cfff69f3 	.word	0xcfff69f3
 8002c74:	ffffcfff 	.word	0xffffcfff
 8002c78:	11fff4ff 	.word	0x11fff4ff
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40004400 	.word	0x40004400
 8002c88:	02dc6c00 	.word	0x02dc6c00
 8002c8c:	080043c8 	.word	0x080043c8

08002c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <UART_AdvFeatureConfig+0x144>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a43      	ldr	r2, [pc, #268]	; (8002dd8 <UART_AdvFeatureConfig+0x148>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <UART_AdvFeatureConfig+0x14c>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <UART_AdvFeatureConfig+0x150>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2210      	movs	r2, #16
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <UART_AdvFeatureConfig+0x154>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	2220      	movs	r2, #32
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <UART_AdvFeatureConfig+0x158>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	2240      	movs	r2, #64	; 0x40
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d01d      	beq.n	8002daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <UART_AdvFeatureConfig+0x15c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	035b      	lsls	r3, r3, #13
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10b      	bne.n	8002daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <UART_AdvFeatureConfig+0x160>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <UART_AdvFeatureConfig+0x164>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffff7fff 	.word	0xffff7fff
 8002dd8:	fffdffff 	.word	0xfffdffff
 8002ddc:	fffeffff 	.word	0xfffeffff
 8002de0:	fffbffff 	.word	0xfffbffff
 8002de4:	ffffefff 	.word	0xffffefff
 8002de8:	ffffdfff 	.word	0xffffdfff
 8002dec:	ffefffff 	.word	0xffefffff
 8002df0:	ff9fffff 	.word	0xff9fffff
 8002df4:	fff7ffff 	.word	0xfff7ffff

08002df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2290      	movs	r2, #144	; 0x90
 8002e04:	2100      	movs	r1, #0
 8002e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e08:	f7fd fe3c 	bl	8000a84 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2208      	movs	r2, #8
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d12d      	bne.n	8002e7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0391      	lsls	r1, r2, #14
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <UART_CheckIdleState+0x14c>)
 8002e28:	9200      	str	r2, [sp, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f000 f88e 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d022      	beq.n	8002e7a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e34:	f3ef 8310 	mrs	r3, PRIMASK
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e3e:	2301      	movs	r3, #1
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	f383 8810 	msr	PRIMASK, r3
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	438a      	bics	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2288      	movs	r2, #136	; 0x88
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2284      	movs	r2, #132	; 0x84
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e060      	b.n	8002f3c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d146      	bne.n	8002f16 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	03d1      	lsls	r1, r2, #15
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <UART_CheckIdleState+0x14c>)
 8002e92:	9200      	str	r2, [sp, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f000 f859 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d03b      	beq.n	8002f16 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4922      	ldr	r1, [pc, #136]	; (8002f48 <UART_CheckIdleState+0x150>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f383 8810 	msr	PRIMASK, r3
}
 8002ece:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f383 8810 	msr	PRIMASK, r3
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	228c      	movs	r2, #140	; 0x8c
 8002f06:	2120      	movs	r1, #32
 8002f08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2284      	movs	r2, #132	; 0x84
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e012      	b.n	8002f3c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2288      	movs	r2, #136	; 0x88
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	228c      	movs	r2, #140	; 0x8c
 8002f22:	2120      	movs	r1, #32
 8002f24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2284      	movs	r2, #132	; 0x84
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b010      	add	sp, #64	; 0x40
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	01ffffff 	.word	0x01ffffff
 8002f48:	fffffedf 	.word	0xfffffedf

08002f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	e04b      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3301      	adds	r3, #1
 8002f62:	d048      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fd fd8e 	bl	8000a84 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e04b      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2204      	movs	r2, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d035      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d111      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f83c 	bl	8003020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2290      	movs	r2, #144	; 0x90
 8002fac:	2108      	movs	r1, #8
 8002fae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2284      	movs	r2, #132	; 0x84
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02c      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d112      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f81f 	bl	8003020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2290      	movs	r2, #144	; 0x90
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2284      	movs	r2, #132	; 0x84
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	425a      	negs	r2, r3
 8003006:	4153      	adcs	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d0a4      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003028:	f3ef 8310 	mrs	r3, PRIMASK
 800302c:	617b      	str	r3, [r7, #20]
  return(result);
 800302e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	2301      	movs	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4926      	ldr	r1, [pc, #152]	; (80030e4 <UART_EndRxTransfer+0xc4>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	623b      	str	r3, [r7, #32]
  return(result);
 8003060:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
 8003064:	2301      	movs	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	491b      	ldr	r1, [pc, #108]	; (80030e8 <UART_EndRxTransfer+0xc8>)
 800307c:	400a      	ands	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d118      	bne.n	80030c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003094:	f3ef 8310 	mrs	r3, PRIMASK
 8003098:	60bb      	str	r3, [r7, #8]
  return(result);
 800309a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309e:	2301      	movs	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2110      	movs	r1, #16
 80030b6:	438a      	bics	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	228c      	movs	r2, #140	; 0x8c
 80030ca:	2120      	movs	r1, #32
 80030cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b00e      	add	sp, #56	; 0x38
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	fffffedf 	.word	0xfffffedf
 80030e8:	effffffe 	.word	0xeffffffe

080030ec <std>:
 80030ec:	2300      	movs	r3, #0
 80030ee:	b510      	push	{r4, lr}
 80030f0:	0004      	movs	r4, r0
 80030f2:	6003      	str	r3, [r0, #0]
 80030f4:	6043      	str	r3, [r0, #4]
 80030f6:	6083      	str	r3, [r0, #8]
 80030f8:	8181      	strh	r1, [r0, #12]
 80030fa:	6643      	str	r3, [r0, #100]	; 0x64
 80030fc:	0019      	movs	r1, r3
 80030fe:	81c2      	strh	r2, [r0, #14]
 8003100:	6103      	str	r3, [r0, #16]
 8003102:	6143      	str	r3, [r0, #20]
 8003104:	6183      	str	r3, [r0, #24]
 8003106:	2208      	movs	r2, #8
 8003108:	305c      	adds	r0, #92	; 0x5c
 800310a:	f000 f91d 	bl	8003348 <memset>
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <std+0x38>)
 8003110:	6224      	str	r4, [r4, #32]
 8003112:	6263      	str	r3, [r4, #36]	; 0x24
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <std+0x3c>)
 8003116:	62a3      	str	r3, [r4, #40]	; 0x28
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <std+0x40>)
 800311a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <std+0x44>)
 800311e:	6323      	str	r3, [r4, #48]	; 0x30
 8003120:	bd10      	pop	{r4, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	080032b1 	.word	0x080032b1
 8003128:	080032d9 	.word	0x080032d9
 800312c:	08003311 	.word	0x08003311
 8003130:	0800333d 	.word	0x0800333d

08003134 <stdio_exit_handler>:
 8003134:	b510      	push	{r4, lr}
 8003136:	4a03      	ldr	r2, [pc, #12]	; (8003144 <stdio_exit_handler+0x10>)
 8003138:	4903      	ldr	r1, [pc, #12]	; (8003148 <stdio_exit_handler+0x14>)
 800313a:	4804      	ldr	r0, [pc, #16]	; (800314c <stdio_exit_handler+0x18>)
 800313c:	f000 f86c 	bl	8003218 <_fwalk_sglue>
 8003140:	bd10      	pop	{r4, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	20000090 	.word	0x20000090
 8003148:	08003fa9 	.word	0x08003fa9
 800314c:	2000009c 	.word	0x2000009c

08003150 <cleanup_stdio>:
 8003150:	6841      	ldr	r1, [r0, #4]
 8003152:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <cleanup_stdio+0x30>)
 8003154:	b510      	push	{r4, lr}
 8003156:	0004      	movs	r4, r0
 8003158:	4299      	cmp	r1, r3
 800315a:	d001      	beq.n	8003160 <cleanup_stdio+0x10>
 800315c:	f000 ff24 	bl	8003fa8 <_fflush_r>
 8003160:	68a1      	ldr	r1, [r4, #8]
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <cleanup_stdio+0x34>)
 8003164:	4299      	cmp	r1, r3
 8003166:	d002      	beq.n	800316e <cleanup_stdio+0x1e>
 8003168:	0020      	movs	r0, r4
 800316a:	f000 ff1d 	bl	8003fa8 <_fflush_r>
 800316e:	68e1      	ldr	r1, [r4, #12]
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <cleanup_stdio+0x38>)
 8003172:	4299      	cmp	r1, r3
 8003174:	d002      	beq.n	800317c <cleanup_stdio+0x2c>
 8003176:	0020      	movs	r0, r4
 8003178:	f000 ff16 	bl	8003fa8 <_fflush_r>
 800317c:	bd10      	pop	{r4, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	20000238 	.word	0x20000238
 8003184:	200002a0 	.word	0x200002a0
 8003188:	20000308 	.word	0x20000308

0800318c <global_stdio_init.part.0>:
 800318c:	b510      	push	{r4, lr}
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <global_stdio_init.part.0+0x28>)
 8003190:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <global_stdio_init.part.0+0x2c>)
 8003192:	2104      	movs	r1, #4
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	4809      	ldr	r0, [pc, #36]	; (80031bc <global_stdio_init.part.0+0x30>)
 8003198:	2200      	movs	r2, #0
 800319a:	f7ff ffa7 	bl	80030ec <std>
 800319e:	2201      	movs	r2, #1
 80031a0:	2109      	movs	r1, #9
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <global_stdio_init.part.0+0x34>)
 80031a4:	f7ff ffa2 	bl	80030ec <std>
 80031a8:	2202      	movs	r2, #2
 80031aa:	2112      	movs	r1, #18
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <global_stdio_init.part.0+0x38>)
 80031ae:	f7ff ff9d 	bl	80030ec <std>
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	20000370 	.word	0x20000370
 80031b8:	08003135 	.word	0x08003135
 80031bc:	20000238 	.word	0x20000238
 80031c0:	200002a0 	.word	0x200002a0
 80031c4:	20000308 	.word	0x20000308

080031c8 <__sfp_lock_acquire>:
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4802      	ldr	r0, [pc, #8]	; (80031d4 <__sfp_lock_acquire+0xc>)
 80031cc:	f000 f93c 	bl	8003448 <__retarget_lock_acquire_recursive>
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000379 	.word	0x20000379

080031d8 <__sfp_lock_release>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	4802      	ldr	r0, [pc, #8]	; (80031e4 <__sfp_lock_release+0xc>)
 80031dc:	f000 f935 	bl	800344a <__retarget_lock_release_recursive>
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000379 	.word	0x20000379

080031e8 <__sinit>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	0004      	movs	r4, r0
 80031ec:	f7ff ffec 	bl	80031c8 <__sfp_lock_acquire>
 80031f0:	6a23      	ldr	r3, [r4, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <__sinit+0x14>
 80031f6:	f7ff ffef 	bl	80031d8 <__sfp_lock_release>
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__sinit+0x28>)
 80031fe:	6223      	str	r3, [r4, #32]
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__sinit+0x2c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f6      	bne.n	80031f6 <__sinit+0xe>
 8003208:	f7ff ffc0 	bl	800318c <global_stdio_init.part.0>
 800320c:	e7f3      	b.n	80031f6 <__sinit+0xe>
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	08003151 	.word	0x08003151
 8003214:	20000370 	.word	0x20000370

08003218 <_fwalk_sglue>:
 8003218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800321a:	0014      	movs	r4, r2
 800321c:	2600      	movs	r6, #0
 800321e:	9000      	str	r0, [sp, #0]
 8003220:	9101      	str	r1, [sp, #4]
 8003222:	68a5      	ldr	r5, [r4, #8]
 8003224:	6867      	ldr	r7, [r4, #4]
 8003226:	3f01      	subs	r7, #1
 8003228:	d504      	bpl.n	8003234 <_fwalk_sglue+0x1c>
 800322a:	6824      	ldr	r4, [r4, #0]
 800322c:	2c00      	cmp	r4, #0
 800322e:	d1f8      	bne.n	8003222 <_fwalk_sglue+0xa>
 8003230:	0030      	movs	r0, r6
 8003232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003234:	89ab      	ldrh	r3, [r5, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d908      	bls.n	800324c <_fwalk_sglue+0x34>
 800323a:	220e      	movs	r2, #14
 800323c:	5eab      	ldrsh	r3, [r5, r2]
 800323e:	3301      	adds	r3, #1
 8003240:	d004      	beq.n	800324c <_fwalk_sglue+0x34>
 8003242:	0029      	movs	r1, r5
 8003244:	9800      	ldr	r0, [sp, #0]
 8003246:	9b01      	ldr	r3, [sp, #4]
 8003248:	4798      	blx	r3
 800324a:	4306      	orrs	r6, r0
 800324c:	3568      	adds	r5, #104	; 0x68
 800324e:	e7ea      	b.n	8003226 <_fwalk_sglue+0xe>

08003250 <iprintf>:
 8003250:	b40f      	push	{r0, r1, r2, r3}
 8003252:	b507      	push	{r0, r1, r2, lr}
 8003254:	4905      	ldr	r1, [pc, #20]	; (800326c <iprintf+0x1c>)
 8003256:	ab04      	add	r3, sp, #16
 8003258:	6808      	ldr	r0, [r1, #0]
 800325a:	cb04      	ldmia	r3!, {r2}
 800325c:	6881      	ldr	r1, [r0, #8]
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	f000 fb7c 	bl	800395c <_vfiprintf_r>
 8003264:	b003      	add	sp, #12
 8003266:	bc08      	pop	{r3}
 8003268:	b004      	add	sp, #16
 800326a:	4718      	bx	r3
 800326c:	200000e8 	.word	0x200000e8

08003270 <siprintf>:
 8003270:	b40e      	push	{r1, r2, r3}
 8003272:	b500      	push	{lr}
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <siprintf+0x34>)
 8003276:	b09c      	sub	sp, #112	; 0x70
 8003278:	ab1d      	add	r3, sp, #116	; 0x74
 800327a:	9002      	str	r0, [sp, #8]
 800327c:	9006      	str	r0, [sp, #24]
 800327e:	9107      	str	r1, [sp, #28]
 8003280:	9104      	str	r1, [sp, #16]
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <siprintf+0x38>)
 8003284:	4909      	ldr	r1, [pc, #36]	; (80032ac <siprintf+0x3c>)
 8003286:	cb04      	ldmia	r3!, {r2}
 8003288:	9105      	str	r1, [sp, #20]
 800328a:	6800      	ldr	r0, [r0, #0]
 800328c:	a902      	add	r1, sp, #8
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f000 fa3c 	bl	800370c <_svfiprintf_r>
 8003294:	2200      	movs	r2, #0
 8003296:	9b02      	ldr	r3, [sp, #8]
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	b01c      	add	sp, #112	; 0x70
 800329c:	bc08      	pop	{r3}
 800329e:	b003      	add	sp, #12
 80032a0:	4718      	bx	r3
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	7fffffff 	.word	0x7fffffff
 80032a8:	200000e8 	.word	0x200000e8
 80032ac:	ffff0208 	.word	0xffff0208

080032b0 <__sread>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	000c      	movs	r4, r1
 80032b4:	250e      	movs	r5, #14
 80032b6:	5f49      	ldrsh	r1, [r1, r5]
 80032b8:	f000 f874 	bl	80033a4 <_read_r>
 80032bc:	2800      	cmp	r0, #0
 80032be:	db03      	blt.n	80032c8 <__sread+0x18>
 80032c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032c2:	181b      	adds	r3, r3, r0
 80032c4:	6563      	str	r3, [r4, #84]	; 0x54
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <__sread+0x24>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	e7f9      	b.n	80032c6 <__sread+0x16>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	ffffefff 	.word	0xffffefff

080032d8 <__swrite>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	001f      	movs	r7, r3
 80032dc:	898b      	ldrh	r3, [r1, #12]
 80032de:	0005      	movs	r5, r0
 80032e0:	000c      	movs	r4, r1
 80032e2:	0016      	movs	r6, r2
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	d505      	bpl.n	80032f4 <__swrite+0x1c>
 80032e8:	230e      	movs	r3, #14
 80032ea:	5ec9      	ldrsh	r1, [r1, r3]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2302      	movs	r3, #2
 80032f0:	f000 f844 	bl	800337c <_lseek_r>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <__swrite+0x34>)
 80032f8:	0028      	movs	r0, r5
 80032fa:	4013      	ands	r3, r2
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	0032      	movs	r2, r6
 8003300:	230e      	movs	r3, #14
 8003302:	5ee1      	ldrsh	r1, [r4, r3]
 8003304:	003b      	movs	r3, r7
 8003306:	f000 f861 	bl	80033cc <_write_r>
 800330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330c:	ffffefff 	.word	0xffffefff

08003310 <__sseek>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	000c      	movs	r4, r1
 8003314:	250e      	movs	r5, #14
 8003316:	5f49      	ldrsh	r1, [r1, r5]
 8003318:	f000 f830 	bl	800337c <_lseek_r>
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	1c42      	adds	r2, r0, #1
 8003320:	d103      	bne.n	800332a <__sseek+0x1a>
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <__sseek+0x28>)
 8003324:	4013      	ands	r3, r2
 8003326:	81a3      	strh	r3, [r4, #12]
 8003328:	bd70      	pop	{r4, r5, r6, pc}
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	0152      	lsls	r2, r2, #5
 800332e:	4313      	orrs	r3, r2
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	6560      	str	r0, [r4, #84]	; 0x54
 8003334:	e7f8      	b.n	8003328 <__sseek+0x18>
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	ffffefff 	.word	0xffffefff

0800333c <__sclose>:
 800333c:	b510      	push	{r4, lr}
 800333e:	230e      	movs	r3, #14
 8003340:	5ec9      	ldrsh	r1, [r1, r3]
 8003342:	f000 f809 	bl	8003358 <_close_r>
 8003346:	bd10      	pop	{r4, pc}

08003348 <memset>:
 8003348:	0003      	movs	r3, r0
 800334a:	1882      	adds	r2, r0, r2
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	7019      	strb	r1, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <_close_r>:
 8003358:	2300      	movs	r3, #0
 800335a:	b570      	push	{r4, r5, r6, lr}
 800335c:	4d06      	ldr	r5, [pc, #24]	; (8003378 <_close_r+0x20>)
 800335e:	0004      	movs	r4, r0
 8003360:	0008      	movs	r0, r1
 8003362:	602b      	str	r3, [r5, #0]
 8003364:	f7fd fa84 	bl	8000870 <_close>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d103      	bne.n	8003374 <_close_r+0x1c>
 800336c:	682b      	ldr	r3, [r5, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d000      	beq.n	8003374 <_close_r+0x1c>
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000374 	.word	0x20000374

0800337c <_lseek_r>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	0004      	movs	r4, r0
 8003380:	0008      	movs	r0, r1
 8003382:	0011      	movs	r1, r2
 8003384:	001a      	movs	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	4d05      	ldr	r5, [pc, #20]	; (80033a0 <_lseek_r+0x24>)
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fa91 	bl	80008b2 <_lseek>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d103      	bne.n	800339c <_lseek_r+0x20>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d000      	beq.n	800339c <_lseek_r+0x20>
 800339a:	6023      	str	r3, [r4, #0]
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	20000374 	.word	0x20000374

080033a4 <_read_r>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	0004      	movs	r4, r0
 80033a8:	0008      	movs	r0, r1
 80033aa:	0011      	movs	r1, r2
 80033ac:	001a      	movs	r2, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	4d05      	ldr	r5, [pc, #20]	; (80033c8 <_read_r+0x24>)
 80033b2:	602b      	str	r3, [r5, #0]
 80033b4:	f7fd fa23 	bl	80007fe <_read>
 80033b8:	1c43      	adds	r3, r0, #1
 80033ba:	d103      	bne.n	80033c4 <_read_r+0x20>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d000      	beq.n	80033c4 <_read_r+0x20>
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000374 	.word	0x20000374

080033cc <_write_r>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	0004      	movs	r4, r0
 80033d0:	0008      	movs	r0, r1
 80033d2:	0011      	movs	r1, r2
 80033d4:	001a      	movs	r2, r3
 80033d6:	2300      	movs	r3, #0
 80033d8:	4d05      	ldr	r5, [pc, #20]	; (80033f0 <_write_r+0x24>)
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	f7fd fa2c 	bl	8000838 <_write>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d103      	bne.n	80033ec <_write_r+0x20>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d000      	beq.n	80033ec <_write_r+0x20>
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	20000374 	.word	0x20000374

080033f4 <__errno>:
 80033f4:	4b01      	ldr	r3, [pc, #4]	; (80033fc <__errno+0x8>)
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	4770      	bx	lr
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	200000e8 	.word	0x200000e8

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2600      	movs	r6, #0
 8003404:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x38>)
 8003406:	4d0d      	ldr	r5, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003408:	1b64      	subs	r4, r4, r5
 800340a:	10a4      	asrs	r4, r4, #2
 800340c:	42a6      	cmp	r6, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	2600      	movs	r6, #0
 8003412:	f000 ff97 	bl	8004344 <_init>
 8003416:	4c0a      	ldr	r4, [pc, #40]	; (8003440 <__libc_init_array+0x40>)
 8003418:	4d0a      	ldr	r5, [pc, #40]	; (8003444 <__libc_init_array+0x44>)
 800341a:	1b64      	subs	r4, r4, r5
 800341c:	10a4      	asrs	r4, r4, #2
 800341e:	42a6      	cmp	r6, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	00b3      	lsls	r3, r6, #2
 8003426:	58eb      	ldr	r3, [r5, r3]
 8003428:	4798      	blx	r3
 800342a:	3601      	adds	r6, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	00b3      	lsls	r3, r6, #2
 8003430:	58eb      	ldr	r3, [r5, r3]
 8003432:	4798      	blx	r3
 8003434:	3601      	adds	r6, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	08004414 	.word	0x08004414
 800343c:	08004414 	.word	0x08004414
 8003440:	08004418 	.word	0x08004418
 8003444:	08004414 	.word	0x08004414

08003448 <__retarget_lock_acquire_recursive>:
 8003448:	4770      	bx	lr

0800344a <__retarget_lock_release_recursive>:
 800344a:	4770      	bx	lr

0800344c <_free_r>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0005      	movs	r5, r0
 8003450:	2900      	cmp	r1, #0
 8003452:	d010      	beq.n	8003476 <_free_r+0x2a>
 8003454:	1f0c      	subs	r4, r1, #4
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da00      	bge.n	800345e <_free_r+0x12>
 800345c:	18e4      	adds	r4, r4, r3
 800345e:	0028      	movs	r0, r5
 8003460:	f000 f8e2 	bl	8003628 <__malloc_lock>
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <_free_r+0x90>)
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <_free_r+0x2c>
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	6014      	str	r4, [r2, #0]
 8003470:	0028      	movs	r0, r5
 8003472:	f000 f8e1 	bl	8003638 <__malloc_unlock>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	42a3      	cmp	r3, r4
 800347a:	d908      	bls.n	800348e <_free_r+0x42>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	1821      	adds	r1, r4, r0
 8003480:	428b      	cmp	r3, r1
 8003482:	d1f3      	bne.n	800346c <_free_r+0x20>
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	1809      	adds	r1, r1, r0
 800348a:	6021      	str	r1, [r4, #0]
 800348c:	e7ee      	b.n	800346c <_free_r+0x20>
 800348e:	001a      	movs	r2, r3
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <_free_r+0x4e>
 8003496:	42a3      	cmp	r3, r4
 8003498:	d9f9      	bls.n	800348e <_free_r+0x42>
 800349a:	6811      	ldr	r1, [r2, #0]
 800349c:	1850      	adds	r0, r2, r1
 800349e:	42a0      	cmp	r0, r4
 80034a0:	d10b      	bne.n	80034ba <_free_r+0x6e>
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	1809      	adds	r1, r1, r0
 80034a6:	1850      	adds	r0, r2, r1
 80034a8:	6011      	str	r1, [r2, #0]
 80034aa:	4283      	cmp	r3, r0
 80034ac:	d1e0      	bne.n	8003470 <_free_r+0x24>
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	1841      	adds	r1, r0, r1
 80034b4:	6011      	str	r1, [r2, #0]
 80034b6:	6053      	str	r3, [r2, #4]
 80034b8:	e7da      	b.n	8003470 <_free_r+0x24>
 80034ba:	42a0      	cmp	r0, r4
 80034bc:	d902      	bls.n	80034c4 <_free_r+0x78>
 80034be:	230c      	movs	r3, #12
 80034c0:	602b      	str	r3, [r5, #0]
 80034c2:	e7d5      	b.n	8003470 <_free_r+0x24>
 80034c4:	6820      	ldr	r0, [r4, #0]
 80034c6:	1821      	adds	r1, r4, r0
 80034c8:	428b      	cmp	r3, r1
 80034ca:	d103      	bne.n	80034d4 <_free_r+0x88>
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	1809      	adds	r1, r1, r0
 80034d2:	6021      	str	r1, [r4, #0]
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	6054      	str	r4, [r2, #4]
 80034d8:	e7ca      	b.n	8003470 <_free_r+0x24>
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	2000037c 	.word	0x2000037c

080034e0 <sbrk_aligned>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	4e0f      	ldr	r6, [pc, #60]	; (8003520 <sbrk_aligned+0x40>)
 80034e4:	000d      	movs	r5, r1
 80034e6:	6831      	ldr	r1, [r6, #0]
 80034e8:	0004      	movs	r4, r0
 80034ea:	2900      	cmp	r1, #0
 80034ec:	d102      	bne.n	80034f4 <sbrk_aligned+0x14>
 80034ee:	f000 fe41 	bl	8004174 <_sbrk_r>
 80034f2:	6030      	str	r0, [r6, #0]
 80034f4:	0029      	movs	r1, r5
 80034f6:	0020      	movs	r0, r4
 80034f8:	f000 fe3c 	bl	8004174 <_sbrk_r>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d00a      	beq.n	8003516 <sbrk_aligned+0x36>
 8003500:	2303      	movs	r3, #3
 8003502:	1cc5      	adds	r5, r0, #3
 8003504:	439d      	bics	r5, r3
 8003506:	42a8      	cmp	r0, r5
 8003508:	d007      	beq.n	800351a <sbrk_aligned+0x3a>
 800350a:	1a29      	subs	r1, r5, r0
 800350c:	0020      	movs	r0, r4
 800350e:	f000 fe31 	bl	8004174 <_sbrk_r>
 8003512:	3001      	adds	r0, #1
 8003514:	d101      	bne.n	800351a <sbrk_aligned+0x3a>
 8003516:	2501      	movs	r5, #1
 8003518:	426d      	negs	r5, r5
 800351a:	0028      	movs	r0, r5
 800351c:	bd70      	pop	{r4, r5, r6, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	20000380 	.word	0x20000380

08003524 <_malloc_r>:
 8003524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003526:	2203      	movs	r2, #3
 8003528:	1ccb      	adds	r3, r1, #3
 800352a:	4393      	bics	r3, r2
 800352c:	3308      	adds	r3, #8
 800352e:	0006      	movs	r6, r0
 8003530:	001f      	movs	r7, r3
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d238      	bcs.n	80035a8 <_malloc_r+0x84>
 8003536:	270c      	movs	r7, #12
 8003538:	42b9      	cmp	r1, r7
 800353a:	d837      	bhi.n	80035ac <_malloc_r+0x88>
 800353c:	0030      	movs	r0, r6
 800353e:	f000 f873 	bl	8003628 <__malloc_lock>
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <_malloc_r+0x100>)
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	001c      	movs	r4, r3
 800354a:	2c00      	cmp	r4, #0
 800354c:	d133      	bne.n	80035b6 <_malloc_r+0x92>
 800354e:	0039      	movs	r1, r7
 8003550:	0030      	movs	r0, r6
 8003552:	f7ff ffc5 	bl	80034e0 <sbrk_aligned>
 8003556:	0004      	movs	r4, r0
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d15e      	bne.n	800361a <_malloc_r+0xf6>
 800355c:	9b00      	ldr	r3, [sp, #0]
 800355e:	681c      	ldr	r4, [r3, #0]
 8003560:	0025      	movs	r5, r4
 8003562:	2d00      	cmp	r5, #0
 8003564:	d14e      	bne.n	8003604 <_malloc_r+0xe0>
 8003566:	2c00      	cmp	r4, #0
 8003568:	d051      	beq.n	800360e <_malloc_r+0xea>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	0029      	movs	r1, r5
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	0030      	movs	r0, r6
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	f000 fdfe 	bl	8004174 <_sbrk_r>
 8003578:	9b01      	ldr	r3, [sp, #4]
 800357a:	4283      	cmp	r3, r0
 800357c:	d147      	bne.n	800360e <_malloc_r+0xea>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	0030      	movs	r0, r6
 8003582:	1aff      	subs	r7, r7, r3
 8003584:	0039      	movs	r1, r7
 8003586:	f7ff ffab 	bl	80034e0 <sbrk_aligned>
 800358a:	3001      	adds	r0, #1
 800358c:	d03f      	beq.n	800360e <_malloc_r+0xea>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	19db      	adds	r3, r3, r7
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	9b00      	ldr	r3, [sp, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d040      	beq.n	800361e <_malloc_r+0xfa>
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	42a2      	cmp	r2, r4
 80035a0:	d133      	bne.n	800360a <_malloc_r+0xe6>
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	e014      	b.n	80035d2 <_malloc_r+0xae>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dac5      	bge.n	8003538 <_malloc_r+0x14>
 80035ac:	230c      	movs	r3, #12
 80035ae:	2500      	movs	r5, #0
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	0028      	movs	r0, r5
 80035b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035b6:	6821      	ldr	r1, [r4, #0]
 80035b8:	1bc9      	subs	r1, r1, r7
 80035ba:	d420      	bmi.n	80035fe <_malloc_r+0xda>
 80035bc:	290b      	cmp	r1, #11
 80035be:	d918      	bls.n	80035f2 <_malloc_r+0xce>
 80035c0:	19e2      	adds	r2, r4, r7
 80035c2:	6027      	str	r7, [r4, #0]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	d112      	bne.n	80035ee <_malloc_r+0xca>
 80035c8:	9b00      	ldr	r3, [sp, #0]
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	6011      	str	r1, [r2, #0]
 80035d0:	6053      	str	r3, [r2, #4]
 80035d2:	0030      	movs	r0, r6
 80035d4:	0025      	movs	r5, r4
 80035d6:	f000 f82f 	bl	8003638 <__malloc_unlock>
 80035da:	2207      	movs	r2, #7
 80035dc:	350b      	adds	r5, #11
 80035de:	1d23      	adds	r3, r4, #4
 80035e0:	4395      	bics	r5, r2
 80035e2:	1aea      	subs	r2, r5, r3
 80035e4:	429d      	cmp	r5, r3
 80035e6:	d0e4      	beq.n	80035b2 <_malloc_r+0x8e>
 80035e8:	1b5b      	subs	r3, r3, r5
 80035ea:	50a3      	str	r3, [r4, r2]
 80035ec:	e7e1      	b.n	80035b2 <_malloc_r+0x8e>
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	e7ec      	b.n	80035cc <_malloc_r+0xa8>
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	d1d5      	bne.n	80035a4 <_malloc_r+0x80>
 80035f8:	9b00      	ldr	r3, [sp, #0]
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e7e9      	b.n	80035d2 <_malloc_r+0xae>
 80035fe:	0023      	movs	r3, r4
 8003600:	6864      	ldr	r4, [r4, #4]
 8003602:	e7a2      	b.n	800354a <_malloc_r+0x26>
 8003604:	002c      	movs	r4, r5
 8003606:	686d      	ldr	r5, [r5, #4]
 8003608:	e7ab      	b.n	8003562 <_malloc_r+0x3e>
 800360a:	0013      	movs	r3, r2
 800360c:	e7c4      	b.n	8003598 <_malloc_r+0x74>
 800360e:	230c      	movs	r3, #12
 8003610:	0030      	movs	r0, r6
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	f000 f810 	bl	8003638 <__malloc_unlock>
 8003618:	e7cb      	b.n	80035b2 <_malloc_r+0x8e>
 800361a:	6027      	str	r7, [r4, #0]
 800361c:	e7d9      	b.n	80035d2 <_malloc_r+0xae>
 800361e:	605b      	str	r3, [r3, #4]
 8003620:	deff      	udf	#255	; 0xff
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	2000037c 	.word	0x2000037c

08003628 <__malloc_lock>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4802      	ldr	r0, [pc, #8]	; (8003634 <__malloc_lock+0xc>)
 800362c:	f7ff ff0c 	bl	8003448 <__retarget_lock_acquire_recursive>
 8003630:	bd10      	pop	{r4, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000378 	.word	0x20000378

08003638 <__malloc_unlock>:
 8003638:	b510      	push	{r4, lr}
 800363a:	4802      	ldr	r0, [pc, #8]	; (8003644 <__malloc_unlock+0xc>)
 800363c:	f7ff ff05 	bl	800344a <__retarget_lock_release_recursive>
 8003640:	bd10      	pop	{r4, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20000378 	.word	0x20000378

08003648 <__ssputs_r>:
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	9203      	str	r2, [sp, #12]
 8003650:	688e      	ldr	r6, [r1, #8]
 8003652:	9a01      	ldr	r2, [sp, #4]
 8003654:	0007      	movs	r7, r0
 8003656:	000c      	movs	r4, r1
 8003658:	680b      	ldr	r3, [r1, #0]
 800365a:	4296      	cmp	r6, r2
 800365c:	d831      	bhi.n	80036c2 <__ssputs_r+0x7a>
 800365e:	898a      	ldrh	r2, [r1, #12]
 8003660:	2190      	movs	r1, #144	; 0x90
 8003662:	00c9      	lsls	r1, r1, #3
 8003664:	420a      	tst	r2, r1
 8003666:	d029      	beq.n	80036bc <__ssputs_r+0x74>
 8003668:	2003      	movs	r0, #3
 800366a:	6921      	ldr	r1, [r4, #16]
 800366c:	1a5b      	subs	r3, r3, r1
 800366e:	9302      	str	r3, [sp, #8]
 8003670:	6963      	ldr	r3, [r4, #20]
 8003672:	4343      	muls	r3, r0
 8003674:	0fdd      	lsrs	r5, r3, #31
 8003676:	18ed      	adds	r5, r5, r3
 8003678:	9b01      	ldr	r3, [sp, #4]
 800367a:	9802      	ldr	r0, [sp, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	181b      	adds	r3, r3, r0
 8003680:	106d      	asrs	r5, r5, #1
 8003682:	42ab      	cmp	r3, r5
 8003684:	d900      	bls.n	8003688 <__ssputs_r+0x40>
 8003686:	001d      	movs	r5, r3
 8003688:	0552      	lsls	r2, r2, #21
 800368a:	d529      	bpl.n	80036e0 <__ssputs_r+0x98>
 800368c:	0029      	movs	r1, r5
 800368e:	0038      	movs	r0, r7
 8003690:	f7ff ff48 	bl	8003524 <_malloc_r>
 8003694:	1e06      	subs	r6, r0, #0
 8003696:	d02d      	beq.n	80036f4 <__ssputs_r+0xac>
 8003698:	9a02      	ldr	r2, [sp, #8]
 800369a:	6921      	ldr	r1, [r4, #16]
 800369c:	f000 fd87 	bl	80041ae <memcpy>
 80036a0:	89a2      	ldrh	r2, [r4, #12]
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <__ssputs_r+0xc0>)
 80036a4:	401a      	ands	r2, r3
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	4313      	orrs	r3, r2
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	9b02      	ldr	r3, [sp, #8]
 80036ae:	6126      	str	r6, [r4, #16]
 80036b0:	18f6      	adds	r6, r6, r3
 80036b2:	6026      	str	r6, [r4, #0]
 80036b4:	6165      	str	r5, [r4, #20]
 80036b6:	9e01      	ldr	r6, [sp, #4]
 80036b8:	1aed      	subs	r5, r5, r3
 80036ba:	60a5      	str	r5, [r4, #8]
 80036bc:	9b01      	ldr	r3, [sp, #4]
 80036be:	429e      	cmp	r6, r3
 80036c0:	d900      	bls.n	80036c4 <__ssputs_r+0x7c>
 80036c2:	9e01      	ldr	r6, [sp, #4]
 80036c4:	0032      	movs	r2, r6
 80036c6:	9903      	ldr	r1, [sp, #12]
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	f000 fd3f 	bl	800414c <memmove>
 80036ce:	2000      	movs	r0, #0
 80036d0:	68a3      	ldr	r3, [r4, #8]
 80036d2:	1b9b      	subs	r3, r3, r6
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	199b      	adds	r3, r3, r6
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	b005      	add	sp, #20
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	002a      	movs	r2, r5
 80036e2:	0038      	movs	r0, r7
 80036e4:	f000 fd6c 	bl	80041c0 <_realloc_r>
 80036e8:	1e06      	subs	r6, r0, #0
 80036ea:	d1df      	bne.n	80036ac <__ssputs_r+0x64>
 80036ec:	0038      	movs	r0, r7
 80036ee:	6921      	ldr	r1, [r4, #16]
 80036f0:	f7ff feac 	bl	800344c <_free_r>
 80036f4:	230c      	movs	r3, #12
 80036f6:	2001      	movs	r0, #1
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	89a2      	ldrh	r2, [r4, #12]
 80036fc:	3334      	adds	r3, #52	; 0x34
 80036fe:	4313      	orrs	r3, r2
 8003700:	81a3      	strh	r3, [r4, #12]
 8003702:	4240      	negs	r0, r0
 8003704:	e7ea      	b.n	80036dc <__ssputs_r+0x94>
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	fffffb7f 	.word	0xfffffb7f

0800370c <_svfiprintf_r>:
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370e:	b0a1      	sub	sp, #132	; 0x84
 8003710:	9003      	str	r0, [sp, #12]
 8003712:	001d      	movs	r5, r3
 8003714:	898b      	ldrh	r3, [r1, #12]
 8003716:	000f      	movs	r7, r1
 8003718:	0016      	movs	r6, r2
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	d511      	bpl.n	8003742 <_svfiprintf_r+0x36>
 800371e:	690b      	ldr	r3, [r1, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10e      	bne.n	8003742 <_svfiprintf_r+0x36>
 8003724:	2140      	movs	r1, #64	; 0x40
 8003726:	f7ff fefd 	bl	8003524 <_malloc_r>
 800372a:	6038      	str	r0, [r7, #0]
 800372c:	6138      	str	r0, [r7, #16]
 800372e:	2800      	cmp	r0, #0
 8003730:	d105      	bne.n	800373e <_svfiprintf_r+0x32>
 8003732:	230c      	movs	r3, #12
 8003734:	9a03      	ldr	r2, [sp, #12]
 8003736:	3801      	subs	r0, #1
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	b021      	add	sp, #132	; 0x84
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373e:	2340      	movs	r3, #64	; 0x40
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	2300      	movs	r3, #0
 8003744:	ac08      	add	r4, sp, #32
 8003746:	6163      	str	r3, [r4, #20]
 8003748:	3320      	adds	r3, #32
 800374a:	7663      	strb	r3, [r4, #25]
 800374c:	3310      	adds	r3, #16
 800374e:	76a3      	strb	r3, [r4, #26]
 8003750:	9507      	str	r5, [sp, #28]
 8003752:	0035      	movs	r5, r6
 8003754:	782b      	ldrb	r3, [r5, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <_svfiprintf_r+0x52>
 800375a:	2b25      	cmp	r3, #37	; 0x25
 800375c:	d148      	bne.n	80037f0 <_svfiprintf_r+0xe4>
 800375e:	1bab      	subs	r3, r5, r6
 8003760:	9305      	str	r3, [sp, #20]
 8003762:	42b5      	cmp	r5, r6
 8003764:	d00b      	beq.n	800377e <_svfiprintf_r+0x72>
 8003766:	0032      	movs	r2, r6
 8003768:	0039      	movs	r1, r7
 800376a:	9803      	ldr	r0, [sp, #12]
 800376c:	f7ff ff6c 	bl	8003648 <__ssputs_r>
 8003770:	3001      	adds	r0, #1
 8003772:	d100      	bne.n	8003776 <_svfiprintf_r+0x6a>
 8003774:	e0af      	b.n	80038d6 <_svfiprintf_r+0x1ca>
 8003776:	6963      	ldr	r3, [r4, #20]
 8003778:	9a05      	ldr	r2, [sp, #20]
 800377a:	189b      	adds	r3, r3, r2
 800377c:	6163      	str	r3, [r4, #20]
 800377e:	782b      	ldrb	r3, [r5, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d100      	bne.n	8003786 <_svfiprintf_r+0x7a>
 8003784:	e0a7      	b.n	80038d6 <_svfiprintf_r+0x1ca>
 8003786:	2201      	movs	r2, #1
 8003788:	2300      	movs	r3, #0
 800378a:	4252      	negs	r2, r2
 800378c:	6062      	str	r2, [r4, #4]
 800378e:	a904      	add	r1, sp, #16
 8003790:	3254      	adds	r2, #84	; 0x54
 8003792:	1852      	adds	r2, r2, r1
 8003794:	1c6e      	adds	r6, r5, #1
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	60e3      	str	r3, [r4, #12]
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	7013      	strb	r3, [r2, #0]
 800379e:	65a3      	str	r3, [r4, #88]	; 0x58
 80037a0:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <_svfiprintf_r+0x1ec>)
 80037a2:	2205      	movs	r2, #5
 80037a4:	0018      	movs	r0, r3
 80037a6:	7831      	ldrb	r1, [r6, #0]
 80037a8:	9305      	str	r3, [sp, #20]
 80037aa:	f000 fcf5 	bl	8004198 <memchr>
 80037ae:	1c75      	adds	r5, r6, #1
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d11f      	bne.n	80037f4 <_svfiprintf_r+0xe8>
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	06d3      	lsls	r3, r2, #27
 80037b8:	d504      	bpl.n	80037c4 <_svfiprintf_r+0xb8>
 80037ba:	2353      	movs	r3, #83	; 0x53
 80037bc:	a904      	add	r1, sp, #16
 80037be:	185b      	adds	r3, r3, r1
 80037c0:	2120      	movs	r1, #32
 80037c2:	7019      	strb	r1, [r3, #0]
 80037c4:	0713      	lsls	r3, r2, #28
 80037c6:	d504      	bpl.n	80037d2 <_svfiprintf_r+0xc6>
 80037c8:	2353      	movs	r3, #83	; 0x53
 80037ca:	a904      	add	r1, sp, #16
 80037cc:	185b      	adds	r3, r3, r1
 80037ce:	212b      	movs	r1, #43	; 0x2b
 80037d0:	7019      	strb	r1, [r3, #0]
 80037d2:	7833      	ldrb	r3, [r6, #0]
 80037d4:	2b2a      	cmp	r3, #42	; 0x2a
 80037d6:	d016      	beq.n	8003806 <_svfiprintf_r+0xfa>
 80037d8:	0035      	movs	r5, r6
 80037da:	2100      	movs	r1, #0
 80037dc:	200a      	movs	r0, #10
 80037de:	68e3      	ldr	r3, [r4, #12]
 80037e0:	782a      	ldrb	r2, [r5, #0]
 80037e2:	1c6e      	adds	r6, r5, #1
 80037e4:	3a30      	subs	r2, #48	; 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d94e      	bls.n	8003888 <_svfiprintf_r+0x17c>
 80037ea:	2900      	cmp	r1, #0
 80037ec:	d111      	bne.n	8003812 <_svfiprintf_r+0x106>
 80037ee:	e017      	b.n	8003820 <_svfiprintf_r+0x114>
 80037f0:	3501      	adds	r5, #1
 80037f2:	e7af      	b.n	8003754 <_svfiprintf_r+0x48>
 80037f4:	9b05      	ldr	r3, [sp, #20]
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	1ac0      	subs	r0, r0, r3
 80037fa:	2301      	movs	r3, #1
 80037fc:	4083      	lsls	r3, r0
 80037fe:	4313      	orrs	r3, r2
 8003800:	002e      	movs	r6, r5
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	e7cc      	b.n	80037a0 <_svfiprintf_r+0x94>
 8003806:	9b07      	ldr	r3, [sp, #28]
 8003808:	1d19      	adds	r1, r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	9107      	str	r1, [sp, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db01      	blt.n	8003816 <_svfiprintf_r+0x10a>
 8003812:	930b      	str	r3, [sp, #44]	; 0x2c
 8003814:	e004      	b.n	8003820 <_svfiprintf_r+0x114>
 8003816:	425b      	negs	r3, r3
 8003818:	60e3      	str	r3, [r4, #12]
 800381a:	2302      	movs	r3, #2
 800381c:	4313      	orrs	r3, r2
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	782b      	ldrb	r3, [r5, #0]
 8003822:	2b2e      	cmp	r3, #46	; 0x2e
 8003824:	d10a      	bne.n	800383c <_svfiprintf_r+0x130>
 8003826:	786b      	ldrb	r3, [r5, #1]
 8003828:	2b2a      	cmp	r3, #42	; 0x2a
 800382a:	d135      	bne.n	8003898 <_svfiprintf_r+0x18c>
 800382c:	9b07      	ldr	r3, [sp, #28]
 800382e:	3502      	adds	r5, #2
 8003830:	1d1a      	adds	r2, r3, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	9207      	str	r2, [sp, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db2b      	blt.n	8003892 <_svfiprintf_r+0x186>
 800383a:	9309      	str	r3, [sp, #36]	; 0x24
 800383c:	4e2f      	ldr	r6, [pc, #188]	; (80038fc <_svfiprintf_r+0x1f0>)
 800383e:	2203      	movs	r2, #3
 8003840:	0030      	movs	r0, r6
 8003842:	7829      	ldrb	r1, [r5, #0]
 8003844:	f000 fca8 	bl	8004198 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d006      	beq.n	800385a <_svfiprintf_r+0x14e>
 800384c:	2340      	movs	r3, #64	; 0x40
 800384e:	1b80      	subs	r0, r0, r6
 8003850:	4083      	lsls	r3, r0
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	3501      	adds	r5, #1
 8003856:	4313      	orrs	r3, r2
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	7829      	ldrb	r1, [r5, #0]
 800385c:	2206      	movs	r2, #6
 800385e:	4828      	ldr	r0, [pc, #160]	; (8003900 <_svfiprintf_r+0x1f4>)
 8003860:	1c6e      	adds	r6, r5, #1
 8003862:	7621      	strb	r1, [r4, #24]
 8003864:	f000 fc98 	bl	8004198 <memchr>
 8003868:	2800      	cmp	r0, #0
 800386a:	d03c      	beq.n	80038e6 <_svfiprintf_r+0x1da>
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <_svfiprintf_r+0x1f8>)
 800386e:	2b00      	cmp	r3, #0
 8003870:	d125      	bne.n	80038be <_svfiprintf_r+0x1b2>
 8003872:	2207      	movs	r2, #7
 8003874:	9b07      	ldr	r3, [sp, #28]
 8003876:	3307      	adds	r3, #7
 8003878:	4393      	bics	r3, r2
 800387a:	3308      	adds	r3, #8
 800387c:	9307      	str	r3, [sp, #28]
 800387e:	6963      	ldr	r3, [r4, #20]
 8003880:	9a04      	ldr	r2, [sp, #16]
 8003882:	189b      	adds	r3, r3, r2
 8003884:	6163      	str	r3, [r4, #20]
 8003886:	e764      	b.n	8003752 <_svfiprintf_r+0x46>
 8003888:	4343      	muls	r3, r0
 800388a:	0035      	movs	r5, r6
 800388c:	2101      	movs	r1, #1
 800388e:	189b      	adds	r3, r3, r2
 8003890:	e7a6      	b.n	80037e0 <_svfiprintf_r+0xd4>
 8003892:	2301      	movs	r3, #1
 8003894:	425b      	negs	r3, r3
 8003896:	e7d0      	b.n	800383a <_svfiprintf_r+0x12e>
 8003898:	2300      	movs	r3, #0
 800389a:	200a      	movs	r0, #10
 800389c:	001a      	movs	r2, r3
 800389e:	3501      	adds	r5, #1
 80038a0:	6063      	str	r3, [r4, #4]
 80038a2:	7829      	ldrb	r1, [r5, #0]
 80038a4:	1c6e      	adds	r6, r5, #1
 80038a6:	3930      	subs	r1, #48	; 0x30
 80038a8:	2909      	cmp	r1, #9
 80038aa:	d903      	bls.n	80038b4 <_svfiprintf_r+0x1a8>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0c5      	beq.n	800383c <_svfiprintf_r+0x130>
 80038b0:	9209      	str	r2, [sp, #36]	; 0x24
 80038b2:	e7c3      	b.n	800383c <_svfiprintf_r+0x130>
 80038b4:	4342      	muls	r2, r0
 80038b6:	0035      	movs	r5, r6
 80038b8:	2301      	movs	r3, #1
 80038ba:	1852      	adds	r2, r2, r1
 80038bc:	e7f1      	b.n	80038a2 <_svfiprintf_r+0x196>
 80038be:	aa07      	add	r2, sp, #28
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	0021      	movs	r1, r4
 80038c4:	003a      	movs	r2, r7
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_svfiprintf_r+0x1fc>)
 80038c8:	9803      	ldr	r0, [sp, #12]
 80038ca:	e000      	b.n	80038ce <_svfiprintf_r+0x1c2>
 80038cc:	bf00      	nop
 80038ce:	9004      	str	r0, [sp, #16]
 80038d0:	9b04      	ldr	r3, [sp, #16]
 80038d2:	3301      	adds	r3, #1
 80038d4:	d1d3      	bne.n	800387e <_svfiprintf_r+0x172>
 80038d6:	89bb      	ldrh	r3, [r7, #12]
 80038d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80038da:	065b      	lsls	r3, r3, #25
 80038dc:	d400      	bmi.n	80038e0 <_svfiprintf_r+0x1d4>
 80038de:	e72c      	b.n	800373a <_svfiprintf_r+0x2e>
 80038e0:	2001      	movs	r0, #1
 80038e2:	4240      	negs	r0, r0
 80038e4:	e729      	b.n	800373a <_svfiprintf_r+0x2e>
 80038e6:	aa07      	add	r2, sp, #28
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	0021      	movs	r1, r4
 80038ec:	003a      	movs	r2, r7
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <_svfiprintf_r+0x1fc>)
 80038f0:	9803      	ldr	r0, [sp, #12]
 80038f2:	f000 f9bf 	bl	8003c74 <_printf_i>
 80038f6:	e7ea      	b.n	80038ce <_svfiprintf_r+0x1c2>
 80038f8:	080043e0 	.word	0x080043e0
 80038fc:	080043e6 	.word	0x080043e6
 8003900:	080043ea 	.word	0x080043ea
 8003904:	00000000 	.word	0x00000000
 8003908:	08003649 	.word	0x08003649

0800390c <__sfputc_r>:
 800390c:	6893      	ldr	r3, [r2, #8]
 800390e:	b510      	push	{r4, lr}
 8003910:	3b01      	subs	r3, #1
 8003912:	6093      	str	r3, [r2, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da04      	bge.n	8003922 <__sfputc_r+0x16>
 8003918:	6994      	ldr	r4, [r2, #24]
 800391a:	42a3      	cmp	r3, r4
 800391c:	db07      	blt.n	800392e <__sfputc_r+0x22>
 800391e:	290a      	cmp	r1, #10
 8003920:	d005      	beq.n	800392e <__sfputc_r+0x22>
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	1c58      	adds	r0, r3, #1
 8003926:	6010      	str	r0, [r2, #0]
 8003928:	7019      	strb	r1, [r3, #0]
 800392a:	0008      	movs	r0, r1
 800392c:	bd10      	pop	{r4, pc}
 800392e:	f000 fb66 	bl	8003ffe <__swbuf_r>
 8003932:	0001      	movs	r1, r0
 8003934:	e7f9      	b.n	800392a <__sfputc_r+0x1e>

08003936 <__sfputs_r>:
 8003936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003938:	0006      	movs	r6, r0
 800393a:	000f      	movs	r7, r1
 800393c:	0014      	movs	r4, r2
 800393e:	18d5      	adds	r5, r2, r3
 8003940:	42ac      	cmp	r4, r5
 8003942:	d101      	bne.n	8003948 <__sfputs_r+0x12>
 8003944:	2000      	movs	r0, #0
 8003946:	e007      	b.n	8003958 <__sfputs_r+0x22>
 8003948:	7821      	ldrb	r1, [r4, #0]
 800394a:	003a      	movs	r2, r7
 800394c:	0030      	movs	r0, r6
 800394e:	f7ff ffdd 	bl	800390c <__sfputc_r>
 8003952:	3401      	adds	r4, #1
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d1f3      	bne.n	8003940 <__sfputs_r+0xa>
 8003958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800395c <_vfiprintf_r>:
 800395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800395e:	b0a1      	sub	sp, #132	; 0x84
 8003960:	000f      	movs	r7, r1
 8003962:	0015      	movs	r5, r2
 8003964:	001e      	movs	r6, r3
 8003966:	9003      	str	r0, [sp, #12]
 8003968:	2800      	cmp	r0, #0
 800396a:	d004      	beq.n	8003976 <_vfiprintf_r+0x1a>
 800396c:	6a03      	ldr	r3, [r0, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <_vfiprintf_r+0x1a>
 8003972:	f7ff fc39 	bl	80031e8 <__sinit>
 8003976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003978:	07db      	lsls	r3, r3, #31
 800397a:	d405      	bmi.n	8003988 <_vfiprintf_r+0x2c>
 800397c:	89bb      	ldrh	r3, [r7, #12]
 800397e:	059b      	lsls	r3, r3, #22
 8003980:	d402      	bmi.n	8003988 <_vfiprintf_r+0x2c>
 8003982:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003984:	f7ff fd60 	bl	8003448 <__retarget_lock_acquire_recursive>
 8003988:	89bb      	ldrh	r3, [r7, #12]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	d502      	bpl.n	8003994 <_vfiprintf_r+0x38>
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d113      	bne.n	80039bc <_vfiprintf_r+0x60>
 8003994:	0039      	movs	r1, r7
 8003996:	9803      	ldr	r0, [sp, #12]
 8003998:	f000 fb74 	bl	8004084 <__swsetup_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	d00d      	beq.n	80039bc <_vfiprintf_r+0x60>
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	07db      	lsls	r3, r3, #31
 80039a4:	d503      	bpl.n	80039ae <_vfiprintf_r+0x52>
 80039a6:	2001      	movs	r0, #1
 80039a8:	4240      	negs	r0, r0
 80039aa:	b021      	add	sp, #132	; 0x84
 80039ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ae:	89bb      	ldrh	r3, [r7, #12]
 80039b0:	059b      	lsls	r3, r3, #22
 80039b2:	d4f8      	bmi.n	80039a6 <_vfiprintf_r+0x4a>
 80039b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80039b6:	f7ff fd48 	bl	800344a <__retarget_lock_release_recursive>
 80039ba:	e7f4      	b.n	80039a6 <_vfiprintf_r+0x4a>
 80039bc:	2300      	movs	r3, #0
 80039be:	ac08      	add	r4, sp, #32
 80039c0:	6163      	str	r3, [r4, #20]
 80039c2:	3320      	adds	r3, #32
 80039c4:	7663      	strb	r3, [r4, #25]
 80039c6:	3310      	adds	r3, #16
 80039c8:	76a3      	strb	r3, [r4, #26]
 80039ca:	9607      	str	r6, [sp, #28]
 80039cc:	002e      	movs	r6, r5
 80039ce:	7833      	ldrb	r3, [r6, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <_vfiprintf_r+0x7c>
 80039d4:	2b25      	cmp	r3, #37	; 0x25
 80039d6:	d148      	bne.n	8003a6a <_vfiprintf_r+0x10e>
 80039d8:	1b73      	subs	r3, r6, r5
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	42ae      	cmp	r6, r5
 80039de:	d00b      	beq.n	80039f8 <_vfiprintf_r+0x9c>
 80039e0:	002a      	movs	r2, r5
 80039e2:	0039      	movs	r1, r7
 80039e4:	9803      	ldr	r0, [sp, #12]
 80039e6:	f7ff ffa6 	bl	8003936 <__sfputs_r>
 80039ea:	3001      	adds	r0, #1
 80039ec:	d100      	bne.n	80039f0 <_vfiprintf_r+0x94>
 80039ee:	e0af      	b.n	8003b50 <_vfiprintf_r+0x1f4>
 80039f0:	6963      	ldr	r3, [r4, #20]
 80039f2:	9a05      	ldr	r2, [sp, #20]
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	6163      	str	r3, [r4, #20]
 80039f8:	7833      	ldrb	r3, [r6, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d100      	bne.n	8003a00 <_vfiprintf_r+0xa4>
 80039fe:	e0a7      	b.n	8003b50 <_vfiprintf_r+0x1f4>
 8003a00:	2201      	movs	r2, #1
 8003a02:	2300      	movs	r3, #0
 8003a04:	4252      	negs	r2, r2
 8003a06:	6062      	str	r2, [r4, #4]
 8003a08:	a904      	add	r1, sp, #16
 8003a0a:	3254      	adds	r2, #84	; 0x54
 8003a0c:	1852      	adds	r2, r2, r1
 8003a0e:	1c75      	adds	r5, r6, #1
 8003a10:	6023      	str	r3, [r4, #0]
 8003a12:	60e3      	str	r3, [r4, #12]
 8003a14:	60a3      	str	r3, [r4, #8]
 8003a16:	7013      	strb	r3, [r2, #0]
 8003a18:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <_vfiprintf_r+0x224>)
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	0018      	movs	r0, r3
 8003a20:	7829      	ldrb	r1, [r5, #0]
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	f000 fbb8 	bl	8004198 <memchr>
 8003a28:	1c6e      	adds	r6, r5, #1
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d11f      	bne.n	8003a6e <_vfiprintf_r+0x112>
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	06d3      	lsls	r3, r2, #27
 8003a32:	d504      	bpl.n	8003a3e <_vfiprintf_r+0xe2>
 8003a34:	2353      	movs	r3, #83	; 0x53
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	185b      	adds	r3, r3, r1
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	7019      	strb	r1, [r3, #0]
 8003a3e:	0713      	lsls	r3, r2, #28
 8003a40:	d504      	bpl.n	8003a4c <_vfiprintf_r+0xf0>
 8003a42:	2353      	movs	r3, #83	; 0x53
 8003a44:	a904      	add	r1, sp, #16
 8003a46:	185b      	adds	r3, r3, r1
 8003a48:	212b      	movs	r1, #43	; 0x2b
 8003a4a:	7019      	strb	r1, [r3, #0]
 8003a4c:	782b      	ldrb	r3, [r5, #0]
 8003a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a50:	d016      	beq.n	8003a80 <_vfiprintf_r+0x124>
 8003a52:	002e      	movs	r6, r5
 8003a54:	2100      	movs	r1, #0
 8003a56:	200a      	movs	r0, #10
 8003a58:	68e3      	ldr	r3, [r4, #12]
 8003a5a:	7832      	ldrb	r2, [r6, #0]
 8003a5c:	1c75      	adds	r5, r6, #1
 8003a5e:	3a30      	subs	r2, #48	; 0x30
 8003a60:	2a09      	cmp	r2, #9
 8003a62:	d94e      	bls.n	8003b02 <_vfiprintf_r+0x1a6>
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d111      	bne.n	8003a8c <_vfiprintf_r+0x130>
 8003a68:	e017      	b.n	8003a9a <_vfiprintf_r+0x13e>
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7af      	b.n	80039ce <_vfiprintf_r+0x72>
 8003a6e:	9b05      	ldr	r3, [sp, #20]
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	1ac0      	subs	r0, r0, r3
 8003a74:	2301      	movs	r3, #1
 8003a76:	4083      	lsls	r3, r0
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	0035      	movs	r5, r6
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	e7cc      	b.n	8003a1a <_vfiprintf_r+0xbe>
 8003a80:	9b07      	ldr	r3, [sp, #28]
 8003a82:	1d19      	adds	r1, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	9107      	str	r1, [sp, #28]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db01      	blt.n	8003a90 <_vfiprintf_r+0x134>
 8003a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a8e:	e004      	b.n	8003a9a <_vfiprintf_r+0x13e>
 8003a90:	425b      	negs	r3, r3
 8003a92:	60e3      	str	r3, [r4, #12]
 8003a94:	2302      	movs	r3, #2
 8003a96:	4313      	orrs	r3, r2
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	7833      	ldrb	r3, [r6, #0]
 8003a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a9e:	d10a      	bne.n	8003ab6 <_vfiprintf_r+0x15a>
 8003aa0:	7873      	ldrb	r3, [r6, #1]
 8003aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa4:	d135      	bne.n	8003b12 <_vfiprintf_r+0x1b6>
 8003aa6:	9b07      	ldr	r3, [sp, #28]
 8003aa8:	3602      	adds	r6, #2
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	9207      	str	r2, [sp, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	db2b      	blt.n	8003b0c <_vfiprintf_r+0x1b0>
 8003ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ab6:	4d33      	ldr	r5, [pc, #204]	; (8003b84 <_vfiprintf_r+0x228>)
 8003ab8:	2203      	movs	r2, #3
 8003aba:	0028      	movs	r0, r5
 8003abc:	7831      	ldrb	r1, [r6, #0]
 8003abe:	f000 fb6b 	bl	8004198 <memchr>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d006      	beq.n	8003ad4 <_vfiprintf_r+0x178>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	1b40      	subs	r0, r0, r5
 8003aca:	4083      	lsls	r3, r0
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	3601      	adds	r6, #1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	7831      	ldrb	r1, [r6, #0]
 8003ad6:	2206      	movs	r2, #6
 8003ad8:	482b      	ldr	r0, [pc, #172]	; (8003b88 <_vfiprintf_r+0x22c>)
 8003ada:	1c75      	adds	r5, r6, #1
 8003adc:	7621      	strb	r1, [r4, #24]
 8003ade:	f000 fb5b 	bl	8004198 <memchr>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d043      	beq.n	8003b6e <_vfiprintf_r+0x212>
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <_vfiprintf_r+0x230>)
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d125      	bne.n	8003b38 <_vfiprintf_r+0x1dc>
 8003aec:	2207      	movs	r2, #7
 8003aee:	9b07      	ldr	r3, [sp, #28]
 8003af0:	3307      	adds	r3, #7
 8003af2:	4393      	bics	r3, r2
 8003af4:	3308      	adds	r3, #8
 8003af6:	9307      	str	r3, [sp, #28]
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	9a04      	ldr	r2, [sp, #16]
 8003afc:	189b      	adds	r3, r3, r2
 8003afe:	6163      	str	r3, [r4, #20]
 8003b00:	e764      	b.n	80039cc <_vfiprintf_r+0x70>
 8003b02:	4343      	muls	r3, r0
 8003b04:	002e      	movs	r6, r5
 8003b06:	2101      	movs	r1, #1
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	e7a6      	b.n	8003a5a <_vfiprintf_r+0xfe>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	425b      	negs	r3, r3
 8003b10:	e7d0      	b.n	8003ab4 <_vfiprintf_r+0x158>
 8003b12:	2300      	movs	r3, #0
 8003b14:	200a      	movs	r0, #10
 8003b16:	001a      	movs	r2, r3
 8003b18:	3601      	adds	r6, #1
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	7831      	ldrb	r1, [r6, #0]
 8003b1e:	1c75      	adds	r5, r6, #1
 8003b20:	3930      	subs	r1, #48	; 0x30
 8003b22:	2909      	cmp	r1, #9
 8003b24:	d903      	bls.n	8003b2e <_vfiprintf_r+0x1d2>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0c5      	beq.n	8003ab6 <_vfiprintf_r+0x15a>
 8003b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b2c:	e7c3      	b.n	8003ab6 <_vfiprintf_r+0x15a>
 8003b2e:	4342      	muls	r2, r0
 8003b30:	002e      	movs	r6, r5
 8003b32:	2301      	movs	r3, #1
 8003b34:	1852      	adds	r2, r2, r1
 8003b36:	e7f1      	b.n	8003b1c <_vfiprintf_r+0x1c0>
 8003b38:	aa07      	add	r2, sp, #28
 8003b3a:	9200      	str	r2, [sp, #0]
 8003b3c:	0021      	movs	r1, r4
 8003b3e:	003a      	movs	r2, r7
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <_vfiprintf_r+0x234>)
 8003b42:	9803      	ldr	r0, [sp, #12]
 8003b44:	e000      	b.n	8003b48 <_vfiprintf_r+0x1ec>
 8003b46:	bf00      	nop
 8003b48:	9004      	str	r0, [sp, #16]
 8003b4a:	9b04      	ldr	r3, [sp, #16]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	d1d3      	bne.n	8003af8 <_vfiprintf_r+0x19c>
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	07db      	lsls	r3, r3, #31
 8003b54:	d405      	bmi.n	8003b62 <_vfiprintf_r+0x206>
 8003b56:	89bb      	ldrh	r3, [r7, #12]
 8003b58:	059b      	lsls	r3, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_vfiprintf_r+0x206>
 8003b5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b5e:	f7ff fc74 	bl	800344a <__retarget_lock_release_recursive>
 8003b62:	89bb      	ldrh	r3, [r7, #12]
 8003b64:	065b      	lsls	r3, r3, #25
 8003b66:	d500      	bpl.n	8003b6a <_vfiprintf_r+0x20e>
 8003b68:	e71d      	b.n	80039a6 <_vfiprintf_r+0x4a>
 8003b6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b6c:	e71d      	b.n	80039aa <_vfiprintf_r+0x4e>
 8003b6e:	aa07      	add	r2, sp, #28
 8003b70:	9200      	str	r2, [sp, #0]
 8003b72:	0021      	movs	r1, r4
 8003b74:	003a      	movs	r2, r7
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <_vfiprintf_r+0x234>)
 8003b78:	9803      	ldr	r0, [sp, #12]
 8003b7a:	f000 f87b 	bl	8003c74 <_printf_i>
 8003b7e:	e7e3      	b.n	8003b48 <_vfiprintf_r+0x1ec>
 8003b80:	080043e0 	.word	0x080043e0
 8003b84:	080043e6 	.word	0x080043e6
 8003b88:	080043ea 	.word	0x080043ea
 8003b8c:	00000000 	.word	0x00000000
 8003b90:	08003937 	.word	0x08003937

08003b94 <_printf_common>:
 8003b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b96:	0016      	movs	r6, r2
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	688a      	ldr	r2, [r1, #8]
 8003b9c:	690b      	ldr	r3, [r1, #16]
 8003b9e:	000c      	movs	r4, r1
 8003ba0:	9000      	str	r0, [sp, #0]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	da00      	bge.n	8003ba8 <_printf_common+0x14>
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	0022      	movs	r2, r4
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	3243      	adds	r2, #67	; 0x43
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d001      	beq.n	8003bb8 <_printf_common+0x24>
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	6033      	str	r3, [r6, #0]
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	069b      	lsls	r3, r3, #26
 8003bbc:	d502      	bpl.n	8003bc4 <_printf_common+0x30>
 8003bbe:	6833      	ldr	r3, [r6, #0]
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	0015      	movs	r5, r2
 8003bca:	401d      	ands	r5, r3
 8003bcc:	421a      	tst	r2, r3
 8003bce:	d027      	beq.n	8003c20 <_printf_common+0x8c>
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	3343      	adds	r3, #67	; 0x43
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	1e5a      	subs	r2, r3, #1
 8003bd8:	4193      	sbcs	r3, r2
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	0692      	lsls	r2, r2, #26
 8003bde:	d430      	bmi.n	8003c42 <_printf_common+0xae>
 8003be0:	0022      	movs	r2, r4
 8003be2:	9901      	ldr	r1, [sp, #4]
 8003be4:	9800      	ldr	r0, [sp, #0]
 8003be6:	9d08      	ldr	r5, [sp, #32]
 8003be8:	3243      	adds	r2, #67	; 0x43
 8003bea:	47a8      	blx	r5
 8003bec:	3001      	adds	r0, #1
 8003bee:	d025      	beq.n	8003c3c <_printf_common+0xa8>
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	2500      	movs	r5, #0
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d105      	bne.n	8003c08 <_printf_common+0x74>
 8003bfc:	6833      	ldr	r3, [r6, #0]
 8003bfe:	68e5      	ldr	r5, [r4, #12]
 8003c00:	1aed      	subs	r5, r5, r3
 8003c02:	43eb      	mvns	r3, r5
 8003c04:	17db      	asrs	r3, r3, #31
 8003c06:	401d      	ands	r5, r3
 8003c08:	68a3      	ldr	r3, [r4, #8]
 8003c0a:	6922      	ldr	r2, [r4, #16]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	dd01      	ble.n	8003c14 <_printf_common+0x80>
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	18ed      	adds	r5, r5, r3
 8003c14:	2600      	movs	r6, #0
 8003c16:	42b5      	cmp	r5, r6
 8003c18:	d120      	bne.n	8003c5c <_printf_common+0xc8>
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	e010      	b.n	8003c40 <_printf_common+0xac>
 8003c1e:	3501      	adds	r5, #1
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	6832      	ldr	r2, [r6, #0]
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	42ab      	cmp	r3, r5
 8003c28:	ddd2      	ble.n	8003bd0 <_printf_common+0x3c>
 8003c2a:	0022      	movs	r2, r4
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	9901      	ldr	r1, [sp, #4]
 8003c30:	9800      	ldr	r0, [sp, #0]
 8003c32:	9f08      	ldr	r7, [sp, #32]
 8003c34:	3219      	adds	r2, #25
 8003c36:	47b8      	blx	r7
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d1f0      	bne.n	8003c1e <_printf_common+0x8a>
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	4240      	negs	r0, r0
 8003c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c42:	2030      	movs	r0, #48	; 0x30
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	3143      	adds	r1, #67	; 0x43
 8003c48:	7008      	strb	r0, [r1, #0]
 8003c4a:	0021      	movs	r1, r4
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	3145      	adds	r1, #69	; 0x45
 8003c50:	7809      	ldrb	r1, [r1, #0]
 8003c52:	18a2      	adds	r2, r4, r2
 8003c54:	3243      	adds	r2, #67	; 0x43
 8003c56:	3302      	adds	r3, #2
 8003c58:	7011      	strb	r1, [r2, #0]
 8003c5a:	e7c1      	b.n	8003be0 <_printf_common+0x4c>
 8003c5c:	0022      	movs	r2, r4
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9901      	ldr	r1, [sp, #4]
 8003c62:	9800      	ldr	r0, [sp, #0]
 8003c64:	9f08      	ldr	r7, [sp, #32]
 8003c66:	321a      	adds	r2, #26
 8003c68:	47b8      	blx	r7
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d0e6      	beq.n	8003c3c <_printf_common+0xa8>
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7d1      	b.n	8003c16 <_printf_common+0x82>
	...

08003c74 <_printf_i>:
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b08b      	sub	sp, #44	; 0x2c
 8003c78:	9206      	str	r2, [sp, #24]
 8003c7a:	000a      	movs	r2, r1
 8003c7c:	3243      	adds	r2, #67	; 0x43
 8003c7e:	9307      	str	r3, [sp, #28]
 8003c80:	9005      	str	r0, [sp, #20]
 8003c82:	9204      	str	r2, [sp, #16]
 8003c84:	7e0a      	ldrb	r2, [r1, #24]
 8003c86:	000c      	movs	r4, r1
 8003c88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c8a:	2a78      	cmp	r2, #120	; 0x78
 8003c8c:	d809      	bhi.n	8003ca2 <_printf_i+0x2e>
 8003c8e:	2a62      	cmp	r2, #98	; 0x62
 8003c90:	d80b      	bhi.n	8003caa <_printf_i+0x36>
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d100      	bne.n	8003c98 <_printf_i+0x24>
 8003c96:	e0be      	b.n	8003e16 <_printf_i+0x1a2>
 8003c98:	497c      	ldr	r1, [pc, #496]	; (8003e8c <_printf_i+0x218>)
 8003c9a:	9103      	str	r1, [sp, #12]
 8003c9c:	2a58      	cmp	r2, #88	; 0x58
 8003c9e:	d100      	bne.n	8003ca2 <_printf_i+0x2e>
 8003ca0:	e093      	b.n	8003dca <_printf_i+0x156>
 8003ca2:	0026      	movs	r6, r4
 8003ca4:	3642      	adds	r6, #66	; 0x42
 8003ca6:	7032      	strb	r2, [r6, #0]
 8003ca8:	e022      	b.n	8003cf0 <_printf_i+0x7c>
 8003caa:	0010      	movs	r0, r2
 8003cac:	3863      	subs	r0, #99	; 0x63
 8003cae:	2815      	cmp	r0, #21
 8003cb0:	d8f7      	bhi.n	8003ca2 <_printf_i+0x2e>
 8003cb2:	f7fc fa29 	bl	8000108 <__gnu_thumb1_case_shi>
 8003cb6:	0016      	.short	0x0016
 8003cb8:	fff6001f 	.word	0xfff6001f
 8003cbc:	fff6fff6 	.word	0xfff6fff6
 8003cc0:	001ffff6 	.word	0x001ffff6
 8003cc4:	fff6fff6 	.word	0xfff6fff6
 8003cc8:	fff6fff6 	.word	0xfff6fff6
 8003ccc:	003600a3 	.word	0x003600a3
 8003cd0:	fff60083 	.word	0xfff60083
 8003cd4:	00b4fff6 	.word	0x00b4fff6
 8003cd8:	0036fff6 	.word	0x0036fff6
 8003cdc:	fff6fff6 	.word	0xfff6fff6
 8003ce0:	0087      	.short	0x0087
 8003ce2:	0026      	movs	r6, r4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	3642      	adds	r6, #66	; 0x42
 8003ce8:	1d11      	adds	r1, r2, #4
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	7033      	strb	r3, [r6, #0]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0a2      	b.n	8003e3a <_printf_i+0x1c6>
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	6809      	ldr	r1, [r1, #0]
 8003cf8:	1d02      	adds	r2, r0, #4
 8003cfa:	060d      	lsls	r5, r1, #24
 8003cfc:	d50b      	bpl.n	8003d16 <_printf_i+0xa2>
 8003cfe:	6805      	ldr	r5, [r0, #0]
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	da03      	bge.n	8003d0e <_printf_i+0x9a>
 8003d06:	232d      	movs	r3, #45	; 0x2d
 8003d08:	9a04      	ldr	r2, [sp, #16]
 8003d0a:	426d      	negs	r5, r5
 8003d0c:	7013      	strb	r3, [r2, #0]
 8003d0e:	4b5f      	ldr	r3, [pc, #380]	; (8003e8c <_printf_i+0x218>)
 8003d10:	270a      	movs	r7, #10
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	e01b      	b.n	8003d4e <_printf_i+0xda>
 8003d16:	6805      	ldr	r5, [r0, #0]
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	0649      	lsls	r1, r1, #25
 8003d1c:	d5f1      	bpl.n	8003d02 <_printf_i+0x8e>
 8003d1e:	b22d      	sxth	r5, r5
 8003d20:	e7ef      	b.n	8003d02 <_printf_i+0x8e>
 8003d22:	680d      	ldr	r5, [r1, #0]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	1d08      	adds	r0, r1, #4
 8003d28:	6018      	str	r0, [r3, #0]
 8003d2a:	062e      	lsls	r6, r5, #24
 8003d2c:	d501      	bpl.n	8003d32 <_printf_i+0xbe>
 8003d2e:	680d      	ldr	r5, [r1, #0]
 8003d30:	e003      	b.n	8003d3a <_printf_i+0xc6>
 8003d32:	066d      	lsls	r5, r5, #25
 8003d34:	d5fb      	bpl.n	8003d2e <_printf_i+0xba>
 8003d36:	680d      	ldr	r5, [r1, #0]
 8003d38:	b2ad      	uxth	r5, r5
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <_printf_i+0x218>)
 8003d3c:	2708      	movs	r7, #8
 8003d3e:	9303      	str	r3, [sp, #12]
 8003d40:	2a6f      	cmp	r2, #111	; 0x6f
 8003d42:	d000      	beq.n	8003d46 <_printf_i+0xd2>
 8003d44:	3702      	adds	r7, #2
 8003d46:	0023      	movs	r3, r4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	3343      	adds	r3, #67	; 0x43
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	6863      	ldr	r3, [r4, #4]
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db03      	blt.n	8003d5e <_printf_i+0xea>
 8003d56:	2104      	movs	r1, #4
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	438a      	bics	r2, r1
 8003d5c:	6022      	str	r2, [r4, #0]
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	d102      	bne.n	8003d68 <_printf_i+0xf4>
 8003d62:	9e04      	ldr	r6, [sp, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <_printf_i+0x10e>
 8003d68:	9e04      	ldr	r6, [sp, #16]
 8003d6a:	0028      	movs	r0, r5
 8003d6c:	0039      	movs	r1, r7
 8003d6e:	f7fc fa5b 	bl	8000228 <__aeabi_uidivmod>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	3e01      	subs	r6, #1
 8003d76:	5c5b      	ldrb	r3, [r3, r1]
 8003d78:	7033      	strb	r3, [r6, #0]
 8003d7a:	002b      	movs	r3, r5
 8003d7c:	0005      	movs	r5, r0
 8003d7e:	429f      	cmp	r7, r3
 8003d80:	d9f3      	bls.n	8003d6a <_printf_i+0xf6>
 8003d82:	2f08      	cmp	r7, #8
 8003d84:	d109      	bne.n	8003d9a <_printf_i+0x126>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	07db      	lsls	r3, r3, #31
 8003d8a:	d506      	bpl.n	8003d9a <_printf_i+0x126>
 8003d8c:	6862      	ldr	r2, [r4, #4]
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	dc02      	bgt.n	8003d9a <_printf_i+0x126>
 8003d94:	2330      	movs	r3, #48	; 0x30
 8003d96:	3e01      	subs	r6, #1
 8003d98:	7033      	strb	r3, [r6, #0]
 8003d9a:	9b04      	ldr	r3, [sp, #16]
 8003d9c:	1b9b      	subs	r3, r3, r6
 8003d9e:	6123      	str	r3, [r4, #16]
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	0021      	movs	r1, r4
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	9805      	ldr	r0, [sp, #20]
 8003da8:	9b06      	ldr	r3, [sp, #24]
 8003daa:	aa09      	add	r2, sp, #36	; 0x24
 8003dac:	f7ff fef2 	bl	8003b94 <_printf_common>
 8003db0:	3001      	adds	r0, #1
 8003db2:	d147      	bne.n	8003e44 <_printf_i+0x1d0>
 8003db4:	2001      	movs	r0, #1
 8003db6:	4240      	negs	r0, r0
 8003db8:	b00b      	add	sp, #44	; 0x2c
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	2278      	movs	r2, #120	; 0x78
 8003dc6:	4932      	ldr	r1, [pc, #200]	; (8003e90 <_printf_i+0x21c>)
 8003dc8:	9103      	str	r1, [sp, #12]
 8003dca:	0021      	movs	r1, r4
 8003dcc:	3145      	adds	r1, #69	; 0x45
 8003dce:	700a      	strb	r2, [r1, #0]
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	c920      	ldmia	r1!, {r5}
 8003dd6:	0610      	lsls	r0, r2, #24
 8003dd8:	d402      	bmi.n	8003de0 <_printf_i+0x16c>
 8003dda:	0650      	lsls	r0, r2, #25
 8003ddc:	d500      	bpl.n	8003de0 <_printf_i+0x16c>
 8003dde:	b2ad      	uxth	r5, r5
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	07d3      	lsls	r3, r2, #31
 8003de4:	d502      	bpl.n	8003dec <_printf_i+0x178>
 8003de6:	2320      	movs	r3, #32
 8003de8:	4313      	orrs	r3, r2
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	2710      	movs	r7, #16
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	d1a9      	bne.n	8003d46 <_printf_i+0xd2>
 8003df2:	2220      	movs	r2, #32
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	4393      	bics	r3, r2
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	e7a4      	b.n	8003d46 <_printf_i+0xd2>
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	680d      	ldr	r5, [r1, #0]
 8003e00:	1d10      	adds	r0, r2, #4
 8003e02:	6949      	ldr	r1, [r1, #20]
 8003e04:	6018      	str	r0, [r3, #0]
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	062e      	lsls	r6, r5, #24
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0x19c>
 8003e0c:	6019      	str	r1, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0x1a2>
 8003e10:	066d      	lsls	r5, r5, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0x198>
 8003e14:	8019      	strh	r1, [r3, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9e04      	ldr	r6, [sp, #16]
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	e7c0      	b.n	8003da0 <_printf_i+0x12c>
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	1d11      	adds	r1, r2, #4
 8003e22:	6019      	str	r1, [r3, #0]
 8003e24:	6816      	ldr	r6, [r2, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	0030      	movs	r0, r6
 8003e2a:	6862      	ldr	r2, [r4, #4]
 8003e2c:	f000 f9b4 	bl	8004198 <memchr>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d001      	beq.n	8003e38 <_printf_i+0x1c4>
 8003e34:	1b80      	subs	r0, r0, r6
 8003e36:	6060      	str	r0, [r4, #4]
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9a04      	ldr	r2, [sp, #16]
 8003e40:	7013      	strb	r3, [r2, #0]
 8003e42:	e7ad      	b.n	8003da0 <_printf_i+0x12c>
 8003e44:	0032      	movs	r2, r6
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	9906      	ldr	r1, [sp, #24]
 8003e4a:	9805      	ldr	r0, [sp, #20]
 8003e4c:	9d07      	ldr	r5, [sp, #28]
 8003e4e:	47a8      	blx	r5
 8003e50:	3001      	adds	r0, #1
 8003e52:	d0af      	beq.n	8003db4 <_printf_i+0x140>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	079b      	lsls	r3, r3, #30
 8003e58:	d415      	bmi.n	8003e86 <_printf_i+0x212>
 8003e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5c:	68e0      	ldr	r0, [r4, #12]
 8003e5e:	4298      	cmp	r0, r3
 8003e60:	daaa      	bge.n	8003db8 <_printf_i+0x144>
 8003e62:	0018      	movs	r0, r3
 8003e64:	e7a8      	b.n	8003db8 <_printf_i+0x144>
 8003e66:	0022      	movs	r2, r4
 8003e68:	2301      	movs	r3, #1
 8003e6a:	9906      	ldr	r1, [sp, #24]
 8003e6c:	9805      	ldr	r0, [sp, #20]
 8003e6e:	9e07      	ldr	r6, [sp, #28]
 8003e70:	3219      	adds	r2, #25
 8003e72:	47b0      	blx	r6
 8003e74:	3001      	adds	r0, #1
 8003e76:	d09d      	beq.n	8003db4 <_printf_i+0x140>
 8003e78:	3501      	adds	r5, #1
 8003e7a:	68e3      	ldr	r3, [r4, #12]
 8003e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	42ab      	cmp	r3, r5
 8003e82:	dcf0      	bgt.n	8003e66 <_printf_i+0x1f2>
 8003e84:	e7e9      	b.n	8003e5a <_printf_i+0x1e6>
 8003e86:	2500      	movs	r5, #0
 8003e88:	e7f7      	b.n	8003e7a <_printf_i+0x206>
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	080043f1 	.word	0x080043f1
 8003e90:	08004402 	.word	0x08004402

08003e94 <__sflush_r>:
 8003e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e96:	898b      	ldrh	r3, [r1, #12]
 8003e98:	0005      	movs	r5, r0
 8003e9a:	000c      	movs	r4, r1
 8003e9c:	071a      	lsls	r2, r3, #28
 8003e9e:	d45c      	bmi.n	8003f5a <__sflush_r+0xc6>
 8003ea0:	684a      	ldr	r2, [r1, #4]
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	dc04      	bgt.n	8003eb0 <__sflush_r+0x1c>
 8003ea6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	dc01      	bgt.n	8003eb0 <__sflush_r+0x1c>
 8003eac:	2000      	movs	r0, #0
 8003eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003eb2:	2f00      	cmp	r7, #0
 8003eb4:	d0fa      	beq.n	8003eac <__sflush_r+0x18>
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2080      	movs	r0, #128	; 0x80
 8003eba:	682e      	ldr	r6, [r5, #0]
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	0140      	lsls	r0, r0, #5
 8003ec2:	6a21      	ldr	r1, [r4, #32]
 8003ec4:	4002      	ands	r2, r0
 8003ec6:	4203      	tst	r3, r0
 8003ec8:	d034      	beq.n	8003f34 <__sflush_r+0xa0>
 8003eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	075b      	lsls	r3, r3, #29
 8003ed0:	d506      	bpl.n	8003ee0 <__sflush_r+0x4c>
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	1ac0      	subs	r0, r0, r3
 8003ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <__sflush_r+0x4c>
 8003edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ede:	1ac0      	subs	r0, r0, r3
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ee8:	6a21      	ldr	r1, [r4, #32]
 8003eea:	47b8      	blx	r7
 8003eec:	89a2      	ldrh	r2, [r4, #12]
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d106      	bne.n	8003f00 <__sflush_r+0x6c>
 8003ef2:	6829      	ldr	r1, [r5, #0]
 8003ef4:	291d      	cmp	r1, #29
 8003ef6:	d82c      	bhi.n	8003f52 <__sflush_r+0xbe>
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <__sflush_r+0x110>)
 8003efa:	410b      	asrs	r3, r1
 8003efc:	07db      	lsls	r3, r3, #31
 8003efe:	d428      	bmi.n	8003f52 <__sflush_r+0xbe>
 8003f00:	2300      	movs	r3, #0
 8003f02:	6063      	str	r3, [r4, #4]
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	04d2      	lsls	r2, r2, #19
 8003f0a:	d505      	bpl.n	8003f18 <__sflush_r+0x84>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <__sflush_r+0x82>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d100      	bne.n	8003f18 <__sflush_r+0x84>
 8003f16:	6560      	str	r0, [r4, #84]	; 0x54
 8003f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f1a:	602e      	str	r6, [r5, #0]
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	d0c5      	beq.n	8003eac <__sflush_r+0x18>
 8003f20:	0023      	movs	r3, r4
 8003f22:	3344      	adds	r3, #68	; 0x44
 8003f24:	4299      	cmp	r1, r3
 8003f26:	d002      	beq.n	8003f2e <__sflush_r+0x9a>
 8003f28:	0028      	movs	r0, r5
 8003f2a:	f7ff fa8f 	bl	800344c <_free_r>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	6360      	str	r0, [r4, #52]	; 0x34
 8003f32:	e7bc      	b.n	8003eae <__sflush_r+0x1a>
 8003f34:	2301      	movs	r3, #1
 8003f36:	0028      	movs	r0, r5
 8003f38:	47b8      	blx	r7
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	d1c6      	bne.n	8003ecc <__sflush_r+0x38>
 8003f3e:	682b      	ldr	r3, [r5, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0c3      	beq.n	8003ecc <__sflush_r+0x38>
 8003f44:	2b1d      	cmp	r3, #29
 8003f46:	d001      	beq.n	8003f4c <__sflush_r+0xb8>
 8003f48:	2b16      	cmp	r3, #22
 8003f4a:	d101      	bne.n	8003f50 <__sflush_r+0xbc>
 8003f4c:	602e      	str	r6, [r5, #0]
 8003f4e:	e7ad      	b.n	8003eac <__sflush_r+0x18>
 8003f50:	89a2      	ldrh	r2, [r4, #12]
 8003f52:	2340      	movs	r3, #64	; 0x40
 8003f54:	4313      	orrs	r3, r2
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	e7a9      	b.n	8003eae <__sflush_r+0x1a>
 8003f5a:	690e      	ldr	r6, [r1, #16]
 8003f5c:	2e00      	cmp	r6, #0
 8003f5e:	d0a5      	beq.n	8003eac <__sflush_r+0x18>
 8003f60:	680f      	ldr	r7, [r1, #0]
 8003f62:	600e      	str	r6, [r1, #0]
 8003f64:	1bba      	subs	r2, r7, r6
 8003f66:	9201      	str	r2, [sp, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	079b      	lsls	r3, r3, #30
 8003f6c:	d100      	bne.n	8003f70 <__sflush_r+0xdc>
 8003f6e:	694a      	ldr	r2, [r1, #20]
 8003f70:	60a2      	str	r2, [r4, #8]
 8003f72:	9b01      	ldr	r3, [sp, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dd99      	ble.n	8003eac <__sflush_r+0x18>
 8003f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f7a:	0032      	movs	r2, r6
 8003f7c:	001f      	movs	r7, r3
 8003f7e:	0028      	movs	r0, r5
 8003f80:	9b01      	ldr	r3, [sp, #4]
 8003f82:	6a21      	ldr	r1, [r4, #32]
 8003f84:	47b8      	blx	r7
 8003f86:	2800      	cmp	r0, #0
 8003f88:	dc06      	bgt.n	8003f98 <__sflush_r+0x104>
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	89a2      	ldrh	r2, [r4, #12]
 8003f90:	4240      	negs	r0, r0
 8003f92:	4313      	orrs	r3, r2
 8003f94:	81a3      	strh	r3, [r4, #12]
 8003f96:	e78a      	b.n	8003eae <__sflush_r+0x1a>
 8003f98:	9b01      	ldr	r3, [sp, #4]
 8003f9a:	1836      	adds	r6, r6, r0
 8003f9c:	1a1b      	subs	r3, r3, r0
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	e7e7      	b.n	8003f72 <__sflush_r+0xde>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	dfbffffe 	.word	0xdfbffffe

08003fa8 <_fflush_r>:
 8003fa8:	690b      	ldr	r3, [r1, #16]
 8003faa:	b570      	push	{r4, r5, r6, lr}
 8003fac:	0005      	movs	r5, r0
 8003fae:	000c      	movs	r4, r1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_fflush_r+0x12>
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d004      	beq.n	8003fc8 <_fflush_r+0x20>
 8003fbe:	6a03      	ldr	r3, [r0, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <_fflush_r+0x20>
 8003fc4:	f7ff f910 	bl	80031e8 <__sinit>
 8003fc8:	220c      	movs	r2, #12
 8003fca:	5ea3      	ldrsh	r3, [r4, r2]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f1      	beq.n	8003fb4 <_fflush_r+0xc>
 8003fd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fd2:	07d2      	lsls	r2, r2, #31
 8003fd4:	d404      	bmi.n	8003fe0 <_fflush_r+0x38>
 8003fd6:	059b      	lsls	r3, r3, #22
 8003fd8:	d402      	bmi.n	8003fe0 <_fflush_r+0x38>
 8003fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fdc:	f7ff fa34 	bl	8003448 <__retarget_lock_acquire_recursive>
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	0021      	movs	r1, r4
 8003fe4:	f7ff ff56 	bl	8003e94 <__sflush_r>
 8003fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fea:	0005      	movs	r5, r0
 8003fec:	07db      	lsls	r3, r3, #31
 8003fee:	d4e2      	bmi.n	8003fb6 <_fflush_r+0xe>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	059b      	lsls	r3, r3, #22
 8003ff4:	d4df      	bmi.n	8003fb6 <_fflush_r+0xe>
 8003ff6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ff8:	f7ff fa27 	bl	800344a <__retarget_lock_release_recursive>
 8003ffc:	e7db      	b.n	8003fb6 <_fflush_r+0xe>

08003ffe <__swbuf_r>:
 8003ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004000:	0006      	movs	r6, r0
 8004002:	000d      	movs	r5, r1
 8004004:	0014      	movs	r4, r2
 8004006:	2800      	cmp	r0, #0
 8004008:	d004      	beq.n	8004014 <__swbuf_r+0x16>
 800400a:	6a03      	ldr	r3, [r0, #32]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <__swbuf_r+0x16>
 8004010:	f7ff f8ea 	bl	80031e8 <__sinit>
 8004014:	69a3      	ldr	r3, [r4, #24]
 8004016:	60a3      	str	r3, [r4, #8]
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	071b      	lsls	r3, r3, #28
 800401c:	d528      	bpl.n	8004070 <__swbuf_r+0x72>
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d025      	beq.n	8004070 <__swbuf_r+0x72>
 8004024:	6923      	ldr	r3, [r4, #16]
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	b2ef      	uxtb	r7, r5
 800402a:	1ac0      	subs	r0, r0, r3
 800402c:	6963      	ldr	r3, [r4, #20]
 800402e:	b2ed      	uxtb	r5, r5
 8004030:	4283      	cmp	r3, r0
 8004032:	dc05      	bgt.n	8004040 <__swbuf_r+0x42>
 8004034:	0021      	movs	r1, r4
 8004036:	0030      	movs	r0, r6
 8004038:	f7ff ffb6 	bl	8003fa8 <_fflush_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	d11d      	bne.n	800407c <__swbuf_r+0x7e>
 8004040:	68a3      	ldr	r3, [r4, #8]
 8004042:	3001      	adds	r0, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	60a3      	str	r3, [r4, #8]
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	6022      	str	r2, [r4, #0]
 800404e:	701f      	strb	r7, [r3, #0]
 8004050:	6963      	ldr	r3, [r4, #20]
 8004052:	4283      	cmp	r3, r0
 8004054:	d004      	beq.n	8004060 <__swbuf_r+0x62>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	07db      	lsls	r3, r3, #31
 800405a:	d507      	bpl.n	800406c <__swbuf_r+0x6e>
 800405c:	2d0a      	cmp	r5, #10
 800405e:	d105      	bne.n	800406c <__swbuf_r+0x6e>
 8004060:	0021      	movs	r1, r4
 8004062:	0030      	movs	r0, r6
 8004064:	f7ff ffa0 	bl	8003fa8 <_fflush_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	d107      	bne.n	800407c <__swbuf_r+0x7e>
 800406c:	0028      	movs	r0, r5
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	0021      	movs	r1, r4
 8004072:	0030      	movs	r0, r6
 8004074:	f000 f806 	bl	8004084 <__swsetup_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	d0d3      	beq.n	8004024 <__swbuf_r+0x26>
 800407c:	2501      	movs	r5, #1
 800407e:	426d      	negs	r5, r5
 8004080:	e7f4      	b.n	800406c <__swbuf_r+0x6e>
	...

08004084 <__swsetup_r>:
 8004084:	4b30      	ldr	r3, [pc, #192]	; (8004148 <__swsetup_r+0xc4>)
 8004086:	b570      	push	{r4, r5, r6, lr}
 8004088:	0005      	movs	r5, r0
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	000c      	movs	r4, r1
 800408e:	2800      	cmp	r0, #0
 8004090:	d004      	beq.n	800409c <__swsetup_r+0x18>
 8004092:	6a03      	ldr	r3, [r0, #32]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <__swsetup_r+0x18>
 8004098:	f7ff f8a6 	bl	80031e8 <__sinit>
 800409c:	230c      	movs	r3, #12
 800409e:	5ee2      	ldrsh	r2, [r4, r3]
 80040a0:	b293      	uxth	r3, r2
 80040a2:	0711      	lsls	r1, r2, #28
 80040a4:	d423      	bmi.n	80040ee <__swsetup_r+0x6a>
 80040a6:	06d9      	lsls	r1, r3, #27
 80040a8:	d407      	bmi.n	80040ba <__swsetup_r+0x36>
 80040aa:	2309      	movs	r3, #9
 80040ac:	2001      	movs	r0, #1
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	3337      	adds	r3, #55	; 0x37
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	4240      	negs	r0, r0
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	075b      	lsls	r3, r3, #29
 80040bc:	d513      	bpl.n	80040e6 <__swsetup_r+0x62>
 80040be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040c0:	2900      	cmp	r1, #0
 80040c2:	d008      	beq.n	80040d6 <__swsetup_r+0x52>
 80040c4:	0023      	movs	r3, r4
 80040c6:	3344      	adds	r3, #68	; 0x44
 80040c8:	4299      	cmp	r1, r3
 80040ca:	d002      	beq.n	80040d2 <__swsetup_r+0x4e>
 80040cc:	0028      	movs	r0, r5
 80040ce:	f7ff f9bd 	bl	800344c <_free_r>
 80040d2:	2300      	movs	r3, #0
 80040d4:	6363      	str	r3, [r4, #52]	; 0x34
 80040d6:	2224      	movs	r2, #36	; 0x24
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	4393      	bics	r3, r2
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	2300      	movs	r3, #0
 80040e0:	6063      	str	r3, [r4, #4]
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	2308      	movs	r3, #8
 80040e8:	89a2      	ldrh	r2, [r4, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <__swsetup_r+0x88>
 80040f4:	21a0      	movs	r1, #160	; 0xa0
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	0089      	lsls	r1, r1, #2
 80040fc:	0092      	lsls	r2, r2, #2
 80040fe:	400b      	ands	r3, r1
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <__swsetup_r+0x88>
 8004104:	0021      	movs	r1, r4
 8004106:	0028      	movs	r0, r5
 8004108:	f000 f8b2 	bl	8004270 <__smakebuf_r>
 800410c:	220c      	movs	r2, #12
 800410e:	5ea3      	ldrsh	r3, [r4, r2]
 8004110:	2001      	movs	r0, #1
 8004112:	001a      	movs	r2, r3
 8004114:	b299      	uxth	r1, r3
 8004116:	4002      	ands	r2, r0
 8004118:	4203      	tst	r3, r0
 800411a:	d00f      	beq.n	800413c <__swsetup_r+0xb8>
 800411c:	2200      	movs	r2, #0
 800411e:	60a2      	str	r2, [r4, #8]
 8004120:	6962      	ldr	r2, [r4, #20]
 8004122:	4252      	negs	r2, r2
 8004124:	61a2      	str	r2, [r4, #24]
 8004126:	2000      	movs	r0, #0
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	4282      	cmp	r2, r0
 800412c:	d1c4      	bne.n	80040b8 <__swsetup_r+0x34>
 800412e:	0609      	lsls	r1, r1, #24
 8004130:	d5c2      	bpl.n	80040b8 <__swsetup_r+0x34>
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	4313      	orrs	r3, r2
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	3801      	subs	r0, #1
 800413a:	e7bd      	b.n	80040b8 <__swsetup_r+0x34>
 800413c:	0788      	lsls	r0, r1, #30
 800413e:	d400      	bmi.n	8004142 <__swsetup_r+0xbe>
 8004140:	6962      	ldr	r2, [r4, #20]
 8004142:	60a2      	str	r2, [r4, #8]
 8004144:	e7ef      	b.n	8004126 <__swsetup_r+0xa2>
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	200000e8 	.word	0x200000e8

0800414c <memmove>:
 800414c:	b510      	push	{r4, lr}
 800414e:	4288      	cmp	r0, r1
 8004150:	d902      	bls.n	8004158 <memmove+0xc>
 8004152:	188b      	adds	r3, r1, r2
 8004154:	4298      	cmp	r0, r3
 8004156:	d303      	bcc.n	8004160 <memmove+0x14>
 8004158:	2300      	movs	r3, #0
 800415a:	e007      	b.n	800416c <memmove+0x20>
 800415c:	5c8b      	ldrb	r3, [r1, r2]
 800415e:	5483      	strb	r3, [r0, r2]
 8004160:	3a01      	subs	r2, #1
 8004162:	d2fb      	bcs.n	800415c <memmove+0x10>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	5ccc      	ldrb	r4, [r1, r3]
 8004168:	54c4      	strb	r4, [r0, r3]
 800416a:	3301      	adds	r3, #1
 800416c:	429a      	cmp	r2, r3
 800416e:	d1fa      	bne.n	8004166 <memmove+0x1a>
 8004170:	e7f8      	b.n	8004164 <memmove+0x18>
	...

08004174 <_sbrk_r>:
 8004174:	2300      	movs	r3, #0
 8004176:	b570      	push	{r4, r5, r6, lr}
 8004178:	4d06      	ldr	r5, [pc, #24]	; (8004194 <_sbrk_r+0x20>)
 800417a:	0004      	movs	r4, r0
 800417c:	0008      	movs	r0, r1
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	f7fc fba2 	bl	80008c8 <_sbrk>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	d103      	bne.n	8004190 <_sbrk_r+0x1c>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d000      	beq.n	8004190 <_sbrk_r+0x1c>
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	20000374 	.word	0x20000374

08004198 <memchr>:
 8004198:	b2c9      	uxtb	r1, r1
 800419a:	1882      	adds	r2, r0, r2
 800419c:	4290      	cmp	r0, r2
 800419e:	d101      	bne.n	80041a4 <memchr+0xc>
 80041a0:	2000      	movs	r0, #0
 80041a2:	4770      	bx	lr
 80041a4:	7803      	ldrb	r3, [r0, #0]
 80041a6:	428b      	cmp	r3, r1
 80041a8:	d0fb      	beq.n	80041a2 <memchr+0xa>
 80041aa:	3001      	adds	r0, #1
 80041ac:	e7f6      	b.n	800419c <memchr+0x4>

080041ae <memcpy>:
 80041ae:	2300      	movs	r3, #0
 80041b0:	b510      	push	{r4, lr}
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xa>
 80041b6:	bd10      	pop	{r4, pc}
 80041b8:	5ccc      	ldrb	r4, [r1, r3]
 80041ba:	54c4      	strb	r4, [r0, r3]
 80041bc:	3301      	adds	r3, #1
 80041be:	e7f8      	b.n	80041b2 <memcpy+0x4>

080041c0 <_realloc_r>:
 80041c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c2:	0007      	movs	r7, r0
 80041c4:	000e      	movs	r6, r1
 80041c6:	0014      	movs	r4, r2
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d105      	bne.n	80041d8 <_realloc_r+0x18>
 80041cc:	0011      	movs	r1, r2
 80041ce:	f7ff f9a9 	bl	8003524 <_malloc_r>
 80041d2:	0005      	movs	r5, r0
 80041d4:	0028      	movs	r0, r5
 80041d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d103      	bne.n	80041e4 <_realloc_r+0x24>
 80041dc:	f7ff f936 	bl	800344c <_free_r>
 80041e0:	0025      	movs	r5, r4
 80041e2:	e7f7      	b.n	80041d4 <_realloc_r+0x14>
 80041e4:	f000 f8a6 	bl	8004334 <_malloc_usable_size_r>
 80041e8:	9001      	str	r0, [sp, #4]
 80041ea:	4284      	cmp	r4, r0
 80041ec:	d803      	bhi.n	80041f6 <_realloc_r+0x36>
 80041ee:	0035      	movs	r5, r6
 80041f0:	0843      	lsrs	r3, r0, #1
 80041f2:	42a3      	cmp	r3, r4
 80041f4:	d3ee      	bcc.n	80041d4 <_realloc_r+0x14>
 80041f6:	0021      	movs	r1, r4
 80041f8:	0038      	movs	r0, r7
 80041fa:	f7ff f993 	bl	8003524 <_malloc_r>
 80041fe:	1e05      	subs	r5, r0, #0
 8004200:	d0e8      	beq.n	80041d4 <_realloc_r+0x14>
 8004202:	9b01      	ldr	r3, [sp, #4]
 8004204:	0022      	movs	r2, r4
 8004206:	429c      	cmp	r4, r3
 8004208:	d900      	bls.n	800420c <_realloc_r+0x4c>
 800420a:	001a      	movs	r2, r3
 800420c:	0031      	movs	r1, r6
 800420e:	0028      	movs	r0, r5
 8004210:	f7ff ffcd 	bl	80041ae <memcpy>
 8004214:	0031      	movs	r1, r6
 8004216:	0038      	movs	r0, r7
 8004218:	f7ff f918 	bl	800344c <_free_r>
 800421c:	e7da      	b.n	80041d4 <_realloc_r+0x14>
	...

08004220 <__swhatbuf_r>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	000e      	movs	r6, r1
 8004224:	001d      	movs	r5, r3
 8004226:	230e      	movs	r3, #14
 8004228:	5ec9      	ldrsh	r1, [r1, r3]
 800422a:	0014      	movs	r4, r2
 800422c:	b096      	sub	sp, #88	; 0x58
 800422e:	2900      	cmp	r1, #0
 8004230:	da0c      	bge.n	800424c <__swhatbuf_r+0x2c>
 8004232:	89b2      	ldrh	r2, [r6, #12]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	0011      	movs	r1, r2
 8004238:	4019      	ands	r1, r3
 800423a:	421a      	tst	r2, r3
 800423c:	d013      	beq.n	8004266 <__swhatbuf_r+0x46>
 800423e:	2100      	movs	r1, #0
 8004240:	3b40      	subs	r3, #64	; 0x40
 8004242:	2000      	movs	r0, #0
 8004244:	6029      	str	r1, [r5, #0]
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	b016      	add	sp, #88	; 0x58
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	466a      	mov	r2, sp
 800424e:	f000 f84d 	bl	80042ec <_fstat_r>
 8004252:	2800      	cmp	r0, #0
 8004254:	dbed      	blt.n	8004232 <__swhatbuf_r+0x12>
 8004256:	23f0      	movs	r3, #240	; 0xf0
 8004258:	9901      	ldr	r1, [sp, #4]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	4019      	ands	r1, r3
 800425e:	4b03      	ldr	r3, [pc, #12]	; (800426c <__swhatbuf_r+0x4c>)
 8004260:	18c9      	adds	r1, r1, r3
 8004262:	424b      	negs	r3, r1
 8004264:	4159      	adcs	r1, r3
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	e7ea      	b.n	8004242 <__swhatbuf_r+0x22>
 800426c:	ffffe000 	.word	0xffffe000

08004270 <__smakebuf_r>:
 8004270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004272:	2602      	movs	r6, #2
 8004274:	898b      	ldrh	r3, [r1, #12]
 8004276:	0005      	movs	r5, r0
 8004278:	000c      	movs	r4, r1
 800427a:	4233      	tst	r3, r6
 800427c:	d006      	beq.n	800428c <__smakebuf_r+0x1c>
 800427e:	0023      	movs	r3, r4
 8004280:	3347      	adds	r3, #71	; 0x47
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	6123      	str	r3, [r4, #16]
 8004286:	2301      	movs	r3, #1
 8004288:	6163      	str	r3, [r4, #20]
 800428a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800428c:	466a      	mov	r2, sp
 800428e:	ab01      	add	r3, sp, #4
 8004290:	f7ff ffc6 	bl	8004220 <__swhatbuf_r>
 8004294:	9900      	ldr	r1, [sp, #0]
 8004296:	0007      	movs	r7, r0
 8004298:	0028      	movs	r0, r5
 800429a:	f7ff f943 	bl	8003524 <_malloc_r>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d108      	bne.n	80042b4 <__smakebuf_r+0x44>
 80042a2:	220c      	movs	r2, #12
 80042a4:	5ea3      	ldrsh	r3, [r4, r2]
 80042a6:	059a      	lsls	r2, r3, #22
 80042a8:	d4ef      	bmi.n	800428a <__smakebuf_r+0x1a>
 80042aa:	2203      	movs	r2, #3
 80042ac:	4393      	bics	r3, r2
 80042ae:	431e      	orrs	r6, r3
 80042b0:	81a6      	strh	r6, [r4, #12]
 80042b2:	e7e4      	b.n	800427e <__smakebuf_r+0xe>
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	89a2      	ldrh	r2, [r4, #12]
 80042b8:	6020      	str	r0, [r4, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	9b00      	ldr	r3, [sp, #0]
 80042c0:	6120      	str	r0, [r4, #16]
 80042c2:	6163      	str	r3, [r4, #20]
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <__smakebuf_r+0x74>
 80042ca:	0028      	movs	r0, r5
 80042cc:	230e      	movs	r3, #14
 80042ce:	5ee1      	ldrsh	r1, [r4, r3]
 80042d0:	f000 f81e 	bl	8004310 <_isatty_r>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d005      	beq.n	80042e4 <__smakebuf_r+0x74>
 80042d8:	2303      	movs	r3, #3
 80042da:	89a2      	ldrh	r2, [r4, #12]
 80042dc:	439a      	bics	r2, r3
 80042de:	3b02      	subs	r3, #2
 80042e0:	4313      	orrs	r3, r2
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	433b      	orrs	r3, r7
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	e7ce      	b.n	800428a <__smakebuf_r+0x1a>

080042ec <_fstat_r>:
 80042ec:	2300      	movs	r3, #0
 80042ee:	b570      	push	{r4, r5, r6, lr}
 80042f0:	4d06      	ldr	r5, [pc, #24]	; (800430c <_fstat_r+0x20>)
 80042f2:	0004      	movs	r4, r0
 80042f4:	0008      	movs	r0, r1
 80042f6:	0011      	movs	r1, r2
 80042f8:	602b      	str	r3, [r5, #0]
 80042fa:	f7fc fac3 	bl	8000884 <_fstat>
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	d103      	bne.n	800430a <_fstat_r+0x1e>
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d000      	beq.n	800430a <_fstat_r+0x1e>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	20000374 	.word	0x20000374

08004310 <_isatty_r>:
 8004310:	2300      	movs	r3, #0
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	4d06      	ldr	r5, [pc, #24]	; (8004330 <_isatty_r+0x20>)
 8004316:	0004      	movs	r4, r0
 8004318:	0008      	movs	r0, r1
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	f7fc fac0 	bl	80008a0 <_isatty>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d103      	bne.n	800432c <_isatty_r+0x1c>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <_isatty_r+0x1c>
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	bd70      	pop	{r4, r5, r6, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	20000374 	.word	0x20000374

08004334 <_malloc_usable_size_r>:
 8004334:	1f0b      	subs	r3, r1, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1f18      	subs	r0, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	da01      	bge.n	8004342 <_malloc_usable_size_r+0xe>
 800433e:	580b      	ldr	r3, [r1, r0]
 8004340:	18c0      	adds	r0, r0, r3
 8004342:	4770      	bx	lr

08004344 <_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr

08004350 <_fini>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr
