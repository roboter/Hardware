                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; Stack segment in internal ram 
                                     22 ;--------------------------------------------------------
                                     23 	.area	SSEG
      000000                         24 __start__stack:
      000000                         25 	.ds	1
                                     26 
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DABS (ABS)
                                     31 
                                     32 ; default segment ordering for linker
                                     33 	.area HOME
                                     34 	.area GSINIT
                                     35 	.area GSFINAL
                                     36 	.area CONST
                                     37 	.area INITIALIZER
                                     38 	.area CODE
                                     39 
                                     40 ;--------------------------------------------------------
                                     41 ; interrupt vector 
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
      000000                         44 __interrupt_vect:
      000000 82v00u00u00             45 	int s_GSINIT ; reset
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
      000000                         53 __sdcc_init_data:
                                     54 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   55 	ldw x, #l_DATA
      000003 27 07            [ 1]   56 	jreq	00002$
      000005                         57 00001$:
      000005 72 4FuFFuFF      [ 1]   58 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   59 	decw x
      00000A 26 F9            [ 1]   60 	jrne	00001$
      00000C                         61 00002$:
      00000C AEr00r00         [ 2]   62 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   63 	jreq	00004$
      000011                         64 00003$:
      000011 D6uFFuFF         [ 1]   65 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   66 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   67 	decw	x
      000018 26 F7            [ 1]   68 	jrne	00003$
      00001A                         69 00004$:
                                     70 ; stm8_genXINIT() end
                                     71 	.area GSFINAL
      000000 CCr00r04         [ 2]   72 	jp	__sdcc_program_startup
                                     73 ;--------------------------------------------------------
                                     74 ; Home
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME
                                     77 	.area HOME
      000004                         78 __sdcc_program_startup:
      000004 CCr00r37         [ 2]   79 	jp	_main
                                     80 ;	return from main will return to caller
                                     81 ;--------------------------------------------------------
                                     82 ; code
                                     83 ;--------------------------------------------------------
                                     84 	.area CODE
                                     85 ;	main.c: 9: static inline void delay_ms(uint16_t ms) {
                                     86 ;	-----------------------------------------
                                     87 ;	 function delay_ms
                                     88 ;	-----------------------------------------
      000000                         89 _delay_ms:
      000000 52 08            [ 2]   90 	sub	sp, #8
                                     91 ;	main.c: 11: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000002 5F               [ 1]   92 	clrw	x
      000003 1F 07            [ 2]   93 	ldw	(0x07, sp), x
      000005 1F 05            [ 2]   94 	ldw	(0x05, sp), x
      000007                         95 00103$:
      000007 1E 0B            [ 2]   96 	ldw	x, (0x0b, sp)
      000009 89               [ 2]   97 	pushw	x
      00000A 4B 6F            [ 1]   98 	push	#0x6f
      00000C 4B 00            [ 1]   99 	push	#0x00
      00000E CDr00r00         [ 4]  100 	call	___muluint2ulong
      000011 5B 04            [ 2]  101 	addw	sp, #4
      000013 1F 03            [ 2]  102 	ldw	(0x03, sp), x
      000015 17 01            [ 2]  103 	ldw	(0x01, sp), y
      000017 1E 07            [ 2]  104 	ldw	x, (0x07, sp)
      000019 13 03            [ 2]  105 	cpw	x, (0x03, sp)
      00001B 7B 06            [ 1]  106 	ld	a, (0x06, sp)
      00001D 12 02            [ 1]  107 	sbc	a, (0x02, sp)
      00001F 7B 05            [ 1]  108 	ld	a, (0x05, sp)
      000021 12 01            [ 1]  109 	sbc	a, (0x01, sp)
      000023 24 0F            [ 1]  110 	jrnc	00105$
                                    111 ;	main.c: 12: __asm__("nop");
      000025 9D               [ 1]  112 	nop
                                    113 ;	main.c: 11: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000026 1E 07            [ 2]  114 	ldw	x, (0x07, sp)
      000028 5C               [ 1]  115 	incw	x
      000029 1F 07            [ 2]  116 	ldw	(0x07, sp), x
      00002B 26 DA            [ 1]  117 	jrne	00103$
      00002D 1E 05            [ 2]  118 	ldw	x, (0x05, sp)
      00002F 5C               [ 1]  119 	incw	x
      000030 1F 05            [ 2]  120 	ldw	(0x05, sp), x
      000032 20 D3            [ 2]  121 	jra	00103$
      000034                        122 00105$:
                                    123 ;	main.c: 13: }
      000034 5B 08            [ 2]  124 	addw	sp, #8
      000036 81               [ 4]  125 	ret
                                    126 ;	main.c: 14: void main() {
                                    127 ;	-----------------------------------------
                                    128 ;	 function main
                                    129 ;	-----------------------------------------
      000037                        130 _main:
                                    131 ;	main.c: 15: PD_DDR |= (1 << LED_PIN); // configure PD4 as output
      000037 72 18 50 11      [ 1]  132 	bset	20497, #4
                                    133 ;	main.c: 16: PD_CR1 |= (1 << LED_PIN); // push-pull mode
      00003B 72 18 50 12      [ 1]  134 	bset	20498, #4
                                    135 ;	main.c: 17: while (1) {
      00003F                        136 00102$:
                                    137 ;	main.c: 19: PD_ODR ^= (1 << LED_PIN);
      00003F 90 18 50 0F      [ 1]  138 	bcpl	20495, #4
                                    139 ;	main.c: 11: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000043 90 5F            [ 1]  140 	clrw	y
      000045 5F               [ 1]  141 	clrw	x
      000046                        142 00107$:
      000046 90 A3 6C 66      [ 2]  143 	cpw	y, #0x6c66
      00004A 9F               [ 1]  144 	ld	a, xl
      00004B A2 00            [ 1]  145 	sbc	a, #0x00
      00004D 9E               [ 1]  146 	ld	a, xh
      00004E A2 00            [ 1]  147 	sbc	a, #0x00
      000050 24 ED            [ 1]  148 	jrnc	00102$
                                    149 ;	main.c: 12: __asm__("nop");
      000052 9D               [ 1]  150 	nop
                                    151 ;	main.c: 11: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000053 90 5C            [ 1]  152 	incw	y
      000055 26 EF            [ 1]  153 	jrne	00107$
      000057 5C               [ 1]  154 	incw	x
      000058 20 EC            [ 2]  155 	jra	00107$
                                    156 ;	main.c: 20: delay_ms(250);
                                    157 ;	main.c: 22: }
      00005A 81               [ 4]  158 	ret
                                    159 	.area CODE
                                    160 	.area CONST
                                    161 	.area INITIALIZER
                                    162 	.area CABS (ABS)
